You are using a customized version of Django 2.2.28.dev20221212210605
You are using a customized version of djangorestframework 3.13.1
model auth.AbstractUser {
   password: Type.STR [];
   last_login: Type.DATE [Attr.OPTIONAL];
   is_superuser: Type.BOOL [];
   username: Type.STR [Attr.UNIQUE];
   first_name: Type.STR [];
   last_name: Type.STR [];
   email: Type.STR [];
   is_staff: Type.BOOL [];
   is_active: Type.BOOL [];
   date_joined: Type.DATE [];
}
model api.AlbumAuto {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   title: Type.STR [Attr.OPTIONAL];
   timestamp: Type.DATE [];
   created_on: Type.DATE [];
   gps_lat: Type.REAL [Attr.OPTIONAL];
   gps_lon: Type.REAL [Attr.OPTIONAL];
   favorited: Type.BOOL [];
}
model api.AlbumDate {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   title: Type.STR [Attr.OPTIONAL];
   date: Type.DATE [Attr.OPTIONAL];
   favorited: Type.BOOL [];
   location: Type.STR [Attr.OPTIONAL];
}
model api.AlbumPlace {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   title: Type.STR [];
   geolocation_level: Type.INT [Attr.OPTIONAL];
   favorited: Type.BOOL [];
}
model api.AlbumThing {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   title: Type.STR [];
   thing_type: Type.STR [Attr.OPTIONAL];
   favorited: Type.BOOL [];
}
model api.AlbumUser {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   title: Type.STR [];
   created_on: Type.DATE [];
   favorited: Type.BOOL [];
   public: Type.BOOL [];
}
model api.Face {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   image: Type.STR [];
   image_path: Type.STR [];
   person_label_is_inferred: Type.BOOL [Attr.OPTIONAL];
   person_label_probability: Type.REAL [];
   location_top: Type.INT [];
   location_bottom: Type.INT [];
   location_left: Type.INT [];
   location_right: Type.INT [];
   encoding: Type.STR [];
}
model api.LongRunningJob {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   job_type: Type.INT [];
   finished: Type.BOOL [];
   failed: Type.BOOL [];
   job_id: Type.STR [Attr.UNIQUE];
   queued_at: Type.DATE [];
   started_at: Type.DATE [Attr.OPTIONAL];
   finished_at: Type.DATE [Attr.OPTIONAL];
   result: Type.STR [];
}
model api.Person {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   name: Type.STR [];
   kind: Type.STR [];
   mean_face_encoding: Type.STR [];
   cluster_id: Type.INT [Attr.OPTIONAL];
}
model api.Photo {
   image_path: Type.STR [];
   image_hash: Type.STR [Attr.PRIMARY,Attr.UNIQUE];
   thumbnail: Type.STR [];
   thumbnail_tiny: Type.STR [];
   thumbnail_small: Type.STR [];
   thumbnail_big: Type.STR [];
   square_thumbnail: Type.STR [];
   square_thumbnail_tiny: Type.STR [];
   square_thumbnail_small: Type.STR [];
   square_thumbnail_big: Type.STR [];
   image: Type.STR [];
   added_on: Type.DATE [];
   exif_gps_lat: Type.REAL [Attr.OPTIONAL];
   exif_gps_lon: Type.REAL [Attr.OPTIONAL];
   exif_timestamp: Type.DATE [Attr.OPTIONAL];
   exif_json: Type.STR [Attr.OPTIONAL];
   geolocation_json: Type.STR [Attr.OPTIONAL];
   captions_json: Type.STR [Attr.OPTIONAL];
   search_captions: Type.STR [Attr.OPTIONAL];
   search_location: Type.STR [Attr.OPTIONAL];
   favorited: Type.BOOL [];
   hidden: Type.BOOL [];
   public: Type.BOOL [];
   encoding: Type.STR [Attr.OPTIONAL];
}
model api.User {
   id: Type.INT [Attr.PRIMARY,Attr.UNIQUE];
   password: Type.STR [];
   last_login: Type.DATE [Attr.OPTIONAL];
   is_superuser: Type.BOOL [];
   username: Type.STR [Attr.UNIQUE];
   first_name: Type.STR [];
   last_name: Type.STR [];
   email: Type.STR [];
   is_staff: Type.BOOL [];
   is_active: Type.BOOL [];
   date_joined: Type.DATE [];
   scan_directory: Type.STR [];
   avatar: Type.STR [Attr.OPTIONAL];
   nextcloud_server_address: Type.STR [Attr.OPTIONAL];
   nextcloud_username: Type.STR [Attr.OPTIONAL];
   nextcloud_app_password: Type.STR [Attr.OPTIONAL];
   nextcloud_scan_directory: Type.STR [Attr.OPTIONAL];
}
relation api.AlbumAuto__api.User__owner RelationKind.MANY_ONE api.AlbumAuto api.User;
relation api.AlbumAuto__api.Photo__photos RelationKind.MANY_MANY api.AlbumAuto api.Photo;
relation api.AlbumAuto__api.User__shared_to RelationKind.MANY_MANY api.AlbumAuto api.User;
relation api.AlbumDate__api.User__owner RelationKind.MANY_ONE api.AlbumDate api.User;
relation api.AlbumDate__api.Photo__photos RelationKind.MANY_MANY api.AlbumDate api.Photo;
relation api.AlbumDate__api.User__shared_to RelationKind.MANY_MANY api.AlbumDate api.User;
relation api.AlbumPlace__api.User__owner RelationKind.MANY_ONE api.AlbumPlace api.User;
relation api.AlbumPlace__api.Photo__photos RelationKind.MANY_MANY api.AlbumPlace api.Photo;
relation api.AlbumPlace__api.Photo__cover_photos RelationKind.MANY_MANY api.AlbumPlace api.Photo;
relation api.AlbumPlace__api.User__shared_to RelationKind.MANY_MANY api.AlbumPlace api.User;
relation api.AlbumThing__api.User__owner RelationKind.MANY_ONE api.AlbumThing api.User;
relation api.AlbumThing__api.Photo__photos RelationKind.MANY_MANY api.AlbumThing api.Photo;
relation api.AlbumThing__api.Photo__cover_photos RelationKind.MANY_MANY api.AlbumThing api.Photo;
relation api.AlbumThing__api.User__shared_to RelationKind.MANY_MANY api.AlbumThing api.User;
relation api.AlbumUser__api.User__owner RelationKind.MANY_ONE api.AlbumUser api.User;
relation api.AlbumUser__api.Photo__photos RelationKind.MANY_MANY api.AlbumUser api.Photo;
relation api.AlbumUser__api.Photo__cover_photos RelationKind.MANY_MANY api.AlbumUser api.Photo;
relation api.AlbumUser__api.User__shared_to RelationKind.MANY_MANY api.AlbumUser api.User;
relation api.Face__api.Photo__photo RelationKind.MANY_ONE api.Face api.Photo;
relation api.Face__api.Person__person RelationKind.MANY_ONE api.Face api.Person;
relation api.LongRunningJob__api.User__started_by RelationKind.MANY_ONE api.LongRunningJob api.User;
relation api.Person__api.User__account RelationKind.ONE_ONE api.Person api.User;
relation api.Photo__api.AlbumThing__albumthing RelationKind.MANY_MANY api.Photo api.AlbumThing;
relation api.Photo__api.AlbumThing__album_thing_cover_photos RelationKind.MANY_MANY api.Photo api.AlbumThing;
relation api.Photo__api.AlbumPlace__albumplace RelationKind.MANY_MANY api.Photo api.AlbumPlace;
relation api.Photo__api.AlbumPlace__album_place_cover_photos RelationKind.MANY_MANY api.Photo api.AlbumPlace;
relation api.Photo__api.AlbumDate__albumdate RelationKind.MANY_MANY api.Photo api.AlbumDate;
relation api.Photo__api.AlbumAuto__albumauto RelationKind.MANY_MANY api.Photo api.AlbumAuto;
relation api.Photo__api.AlbumUser__albumuser RelationKind.MANY_MANY api.Photo api.AlbumUser;
relation api.Photo__api.AlbumUser__album_user_cover_photos RelationKind.MANY_MANY api.Photo api.AlbumUser;
relation api.Photo__api.User__owner RelationKind.MANY_ONE api.Photo api.User;
relation api.Photo__api.User__shared_to RelationKind.MANY_MANY api.Photo api.User;
relation api.User__api.Photo__photo_shared_to RelationKind.MANY_MANY api.User api.Photo;
relation api.User__api.AlbumThing__album_thing_shared_to RelationKind.MANY_MANY api.User api.AlbumThing;
relation api.User__api.AlbumPlace__album_place_shared_to RelationKind.MANY_MANY api.User api.AlbumPlace;
relation api.User__api.AlbumDate__album_date_shared_to RelationKind.MANY_MANY api.User api.AlbumDate;
relation api.User__api.AlbumAuto__album_auto_shared_to RelationKind.MANY_MANY api.User api.AlbumAuto;
relation api.User__api.AlbumUser__album_user_shared_to RelationKind.MANY_MANY api.User api.AlbumUser;
relation api.AlbumThing__api.User__owner RelationKind.MANY_ONE api.AlbumThing api.User;
relation api.AlbumThing__api.Photo__photos RelationKind.MANY_MANY api.AlbumThing api.Photo;
relation api.AlbumThing__api.Photo__cover_photos RelationKind.MANY_MANY api.AlbumThing api.Photo;
relation api.AlbumThing__api.User__shared_to RelationKind.MANY_MANY api.AlbumThing api.User;
// 2 apps, 12 models (104 fields)
// 46 relations (1 oneone, 10 manyone, 35 manymany)

/api/user/ <function UserViewSet at 0x13e887e20> ^^api/user/$ user-list
for POST...{}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1228 get_permissions : if self.action == 'create':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1229 get_permissions : self.permission_classes = (IsRegistrationAllowed, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1236 get_permissions : return super(UserViewSet, self).get_permissions()
+++ return [<api.permissions.IsRegistrationAllowed object at 0x13e932bc0>]
+++ call has_permission None
+++ /Users/kaima/src/soir/apps/ownphotos/api/permissions.py 61 has_permission : return bool(site_config.ALLOW_REGISTRATION)
+++ call _setup None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__init__.py 13 _setup : from .base import Config
+++ call find_spec None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 92 find_spec : if path is not None and not fullname.startswith('test.'):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 93 find_spec : return
+++ return None
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1437 find_spec : 
+++ <frozen importlib._bootstrap_external> 1439 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1404 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1405 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1406 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1408 _get_spec : 
+++ call _path_importer_cache None
+++ <frozen importlib._bootstrap_external> 1364 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1371 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1372 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1376 _path_importer_cache : 
+++ return FileFinder('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance')
+++ <frozen importlib._bootstrap_external> 1409 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1410 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1411 _get_spec : 
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1541 find_spec : 
+++ <frozen importlib._bootstrap_external> 1542 find_spec : 
+++ <frozen importlib._bootstrap_external> 1543 find_spec : 
+++ <frozen importlib._bootstrap_external> 1544 find_spec : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=16877, st_ino=268383969, st_dev=16777220, st_nlink=18, st_uid=501, st_gid=20, st_size=576, st_atime=1668951469, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 1547 find_spec : 
+++ <frozen importlib._bootstrap_external> 1551 find_spec : 
+++ call _relax_case None
+++ <frozen importlib._bootstrap_external> 69 _relax_case : 
+++ return False
+++ <frozen importlib._bootstrap_external> 1555 find_spec : 
+++ <frozen importlib._bootstrap_external> 1556 find_spec : 
+++ <frozen importlib._bootstrap_external> 1558 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.cpython-310-darwin.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.cpython-310-darwin.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.abi3.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.abi3.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.py']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1577 find_spec : 
+++ call _path_isfile None
+++ <frozen importlib._bootstrap_external> 161 _path_isfile : 
+++ call _path_is_mode_type None
+++ <frozen importlib._bootstrap_external> 152 _path_is_mode_type : 
+++ <frozen importlib._bootstrap_external> 153 _path_is_mode_type : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=268383973, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=894, st_atime=1668951465, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 156 _path_is_mode_type : 
+++ return True
+++ return True
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ <frozen importlib._bootstrap_external> 1579 find_spec : 
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1532 _get_spec : 
+++ call __init__ None
+++ <frozen importlib._bootstrap_external> 1043 __init__ : 
+++ <frozen importlib._bootstrap_external> 1044 __init__ : 
+++ return None
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1534 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ call spec_from_file_location None
+++ <frozen importlib._bootstrap_external> 733 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 745 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 746 spec_from_file_location : 
+++ call _path_isabs None
+++ <frozen importlib._bootstrap_external> 182 _path_isabs : 
+++ return True
+++ <frozen importlib._bootstrap_external> 758 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 759 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 762 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 772 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 783 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 784 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 789 spec_from_file_location : 
+++ return ModuleSpec(name='constance.base', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e932d40>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py')
+++ return ModuleSpec(name='constance.base', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e932d40>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py')
+++ return ModuleSpec(name='constance.base', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e932d40>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py')
+++ <frozen importlib._bootstrap_external> 1414 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1416 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1417 _get_spec : 
+++ return ModuleSpec(name='constance.base', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e932d40>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py')
+++ <frozen importlib._bootstrap_external> 1440 find_spec : 
+++ <frozen importlib._bootstrap_external> 1442 find_spec : 
+++ <frozen importlib._bootstrap_external> 1453 find_spec : 
+++ return ModuleSpec(name='constance.base', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e932d40>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py')
+++ call create_module None
+++ <frozen importlib._bootstrap_external> 874 create_module : 
+++ return None
+++ call _get_cached None
+++ <frozen importlib._bootstrap_external> 511 _get_cached : 
+++ <frozen importlib._bootstrap_external> 512 _get_cached : 
+++ <frozen importlib._bootstrap_external> 513 _get_cached : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 73
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', '__pycache__', 'base.cpython-310.pyc']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/base.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/base.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/base.cpython-310.pyc
+++ call exec_module None
+++ <frozen importlib._bootstrap_external> 879 exec_module : 
+++ call get_code None
+++ <frozen importlib._bootstrap_external> 957 get_code : 
+++ call _check_name_wrapper None
+++ <frozen importlib._bootstrap_external> 543 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 545 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 548 _check_name_wrapper : 
+++ call get_filename None
+++ <frozen importlib._bootstrap_external> 1068 get_filename : 
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py
+++ <frozen importlib._bootstrap_external> 958 get_code : 
+++ <frozen importlib._bootstrap_external> 959 get_code : 
+++ <frozen importlib._bootstrap_external> 960 get_code : 
+++ <frozen importlib._bootstrap_external> 961 get_code : 
+++ <frozen importlib._bootstrap_external> 962 get_code : 
+++ <frozen importlib._bootstrap_external> 963 get_code : 
+++ <frozen importlib._bootstrap_external> 964 get_code : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 73
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'base.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', '__pycache__', 'base.cpython-310.pyc']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/base.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/base.cpython-310.pyc
+++ <frozen importlib._bootstrap_external> 968 get_code : 
+++ <frozen importlib._bootstrap_external> 969 get_code : 
+++ call path_stats None
+++ <frozen importlib._bootstrap_external> 1091 path_stats : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=268383973, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=894, st_atime=1668951465, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 1092 path_stats : 
+++ return {'mtime': 1668951465.2535877, 'size': 894}
+++ <frozen importlib._bootstrap_external> 973 get_code : 
+++ <frozen importlib._bootstrap_external> 974 get_code : 
+++ <frozen importlib._bootstrap_external> 975 get_code : 
+++ call get_data None
+++ <frozen importlib._bootstrap_external> 1072 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ <frozen importlib._bootstrap_external> 1074 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ return b'o\r\r\n\x00\x00\x00\x00\xa9-zc~\x03\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s"\x00\x00\x00d\x00d\x01l\x00m\x01Z\x01m\x02Z\x02\x01\x00G\x00d\x02d\x03\x84\x00d\x03\x83\x02Z\x03d\x04S\x00)\x05\xe9\x01\x00\x00\x00)\x02\xda\x08settings\xda\x05utilsc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00s8\x00\x00\x00e\x00Z\x01d\x00Z\x02d\x01Z\x03\x87\x00f\x01d\x02d\x03\x84\x08Z\x04d\x04d\x05\x84\x00Z\x05d\x06d\x07\x84\x00Z\x06d\x08d\t\x84\x00Z\x07\x87\x00\x04\x00Z\x08S\x00)\n\xda\x06Configz=\n    The global config wrapper that handles the backend.\n    c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00s\x1c\x00\x00\x00t\x00\x83\x00\xa0\x01d\x01t\x02\xa0\x03t\x04j\x05\xa1\x01\x83\x00\xa1\x02\x01\x00d\x00S\x00)\x02N\xda\x08_backend)\x06\xda\x05super\xda\x0b__setattr__r\x03\x00\x00\x00Z\x12import_module_attrr\x02\x00\x00\x00Z\x07BACKEND\xa9\x01\xda\x04self\xa9\x01\xda\t__class__\xa9\x00\xfaQ/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py\xda\x08__init__\x08\x00\x00\x00s\x06\x00\x00\x00\x08\x01\x0c\x01\x08\xffz\x0fConfig.__init__c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00z\x16t\x00t\x01j\x02|\x01\x19\x00\x83\x01d\x01v\x01r\x0et\x03|\x01\x83\x01\x82\x01t\x01j\x02|\x01\x19\x00d\x02\x19\x00}\x02W\x00n\x0b\x04\x00t\x04y!\x01\x00\x01\x00\x01\x00t\x03|\x01\x83\x01\x82\x01w\x00|\x00j\x05\xa0\x06|\x01\xa1\x01}\x03|\x03d\x00u\x00r6|\x02}\x03t\x07|\x00|\x01|\x02\x83\x03\x01\x00|\x03S\x00|\x03S\x00)\x03N)\x02\xe9\x02\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x00\x00\x00\x00)\x08\xda\x03lenr\x02\x00\x00\x00\xda\x06CONFIG\xda\x0eAttributeError\xda\x08KeyErrorr\x05\x00\x00\x00\xda\x03get\xda\x07setattr)\x04r\t\x00\x00\x00\xda\x03key\xda\x07default\xda\x06resultr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x0b__getattr__\x0c\x00\x00\x00s\x1a\x00\x00\x00\x02\x01\x12\x01\x08\x01\x12\x01\x0c\x01\x08\x01\x02\xff\x0c\x02\x08\x01\x04\x01\x0c\x01\x04\x01\x04\x01z\x12Config.__getattr__c\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s$\x00\x00\x00|\x01t\x00j\x01v\x01r\tt\x02|\x01\x83\x01\x82\x01|\x00j\x03\xa0\x04|\x01|\x02\xa1\x02\x01\x00d\x00S\x00\xa9\x01N)\x05r\x02\x00\x00\x00r\x13\x00\x00\x00r\x14\x00\x00\x00r\x05\x00\x00\x00\xda\x03set)\x03r\t\x00\x00\x00r\x18\x00\x00\x00\xda\x05valuer\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00r\x07\x00\x00\x00\x1a\x00\x00\x00s\x06\x00\x00\x00\n\x01\x08\x01\x12\x01z\x12Config.__setattr__c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\n\x00\x00\x00t\x00j\x01\xa0\x02\xa1\x00S\x00r\x1c\x00\x00\x00)\x03r\x02\x00\x00\x00r\x13\x00\x00\x00\xda\x04keysr\x08\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x07__dir__\x1f\x00\x00\x00s\x02\x00\x00\x00\n\x01z\x0eConfig.__dir__)\t\xda\x08__name__\xda\n__module__\xda\x0c__qualname__\xda\x07__doc__r\x0e\x00\x00\x00r\x1b\x00\x00\x00r\x07\x00\x00\x00r \x00\x00\x00\xda\r__classcell__r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\n\x00\x00\x00r\r\x00\x00\x00r\x04\x00\x00\x00\x04\x00\x00\x00s\x0c\x00\x00\x00\x08\x00\x04\x01\x0c\x03\x08\x04\x08\x0e\x10\x05r\x04\x00\x00\x00N)\x04\xda\x00r\x02\x00\x00\x00r\x03\x00\x00\x00r\x04\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x10\x00\x12\x03'
+++ <frozen importlib._bootstrap_external> 980 get_code : 
+++ <frozen importlib._bootstrap_external> 981 get_code : 
+++ <frozen importlib._bootstrap_external> 979 get_code : 
+++ <frozen importlib._bootstrap_external> 983 get_code : 
+++ <frozen importlib._bootstrap_external> 984 get_code : 
+++ call _classify_pyc None
+++ <frozen importlib._bootstrap_external> 601 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 602 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 606 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 610 _classify_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 612 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 615 _classify_pyc : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 985 get_code : 
+++ <frozen importlib._bootstrap_external> 986 get_code : 
+++ <frozen importlib._bootstrap_external> 987 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ <frozen importlib._bootstrap_external> 1001 get_code : 
+++ <frozen importlib._bootstrap_external> 1002 get_code : 
+++ <frozen importlib._bootstrap_external> 1003 get_code : 
+++ <frozen importlib._bootstrap_external> 1004 get_code : 
+++ <frozen importlib._bootstrap_external> 1005 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ call _validate_timestamp_pyc None
+++ <frozen importlib._bootstrap_external> 637 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 1668951465
+++ <frozen importlib._bootstrap_external> 641 _validate_timestamp_pyc : 
+++ <frozen importlib._bootstrap_external> 642 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 894
+++ return None
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1011 get_code : 
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ <frozen importlib._bootstrap_external> 1013 get_code : 
+++ <frozen importlib._bootstrap_external> 1014 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ call _compile_bytecode None
+++ <frozen importlib._bootstrap_external> 672 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 673 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 674 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 675 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 676 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 677 _compile_bytecode : 
+++ return <code object <module> at 0x13e9077e0, file "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 1>
+++ return <code object <module> at 0x13e9077e0, file "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 1>
+++ <frozen importlib._bootstrap_external> 880 exec_module : 
+++ <frozen importlib._bootstrap_external> 883 exec_module : 
+++ call <module> None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 1 <module> : from . import settings, utils
+++ call find_spec None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 92 find_spec : if path is not None and not fullname.startswith('test.'):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 93 find_spec : return
+++ return None
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1437 find_spec : 
+++ <frozen importlib._bootstrap_external> 1439 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1404 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1405 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1406 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1408 _get_spec : 
+++ call _path_importer_cache None
+++ <frozen importlib._bootstrap_external> 1364 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1371 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1372 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1376 _path_importer_cache : 
+++ return FileFinder('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance')
+++ <frozen importlib._bootstrap_external> 1409 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1410 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1411 _get_spec : 
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1541 find_spec : 
+++ <frozen importlib._bootstrap_external> 1542 find_spec : 
+++ <frozen importlib._bootstrap_external> 1543 find_spec : 
+++ <frozen importlib._bootstrap_external> 1544 find_spec : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=16877, st_ino=268383969, st_dev=16777220, st_nlink=18, st_uid=501, st_gid=20, st_size=576, st_atime=1668951469, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 1547 find_spec : 
+++ <frozen importlib._bootstrap_external> 1551 find_spec : 
+++ call _relax_case None
+++ <frozen importlib._bootstrap_external> 69 _relax_case : 
+++ return False
+++ <frozen importlib._bootstrap_external> 1555 find_spec : 
+++ <frozen importlib._bootstrap_external> 1556 find_spec : 
+++ <frozen importlib._bootstrap_external> 1558 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.cpython-310-darwin.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.cpython-310-darwin.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.abi3.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.abi3.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.so']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.py']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1577 find_spec : 
+++ call _path_isfile None
+++ <frozen importlib._bootstrap_external> 161 _path_isfile : 
+++ call _path_is_mode_type None
+++ <frozen importlib._bootstrap_external> 152 _path_is_mode_type : 
+++ <frozen importlib._bootstrap_external> 153 _path_is_mode_type : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=268383978, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=161, st_atime=1668951465, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 156 _path_is_mode_type : 
+++ return True
+++ return True
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ <frozen importlib._bootstrap_external> 1579 find_spec : 
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1532 _get_spec : 
+++ call __init__ None
+++ <frozen importlib._bootstrap_external> 1043 __init__ : 
+++ <frozen importlib._bootstrap_external> 1044 __init__ : 
+++ return None
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1534 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ call spec_from_file_location None
+++ <frozen importlib._bootstrap_external> 733 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 745 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 746 spec_from_file_location : 
+++ call _path_isabs None
+++ <frozen importlib._bootstrap_external> 182 _path_isabs : 
+++ return True
+++ <frozen importlib._bootstrap_external> 758 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 759 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 762 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 772 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 783 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 784 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 789 spec_from_file_location : 
+++ return ModuleSpec(name='constance.utils', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e9330a0>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py')
+++ return ModuleSpec(name='constance.utils', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e9330a0>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py')
+++ return ModuleSpec(name='constance.utils', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e9330a0>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py')
+++ <frozen importlib._bootstrap_external> 1414 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1416 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1417 _get_spec : 
+++ return ModuleSpec(name='constance.utils', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e9330a0>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py')
+++ <frozen importlib._bootstrap_external> 1440 find_spec : 
+++ <frozen importlib._bootstrap_external> 1442 find_spec : 
+++ <frozen importlib._bootstrap_external> 1453 find_spec : 
+++ return ModuleSpec(name='constance.utils', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13e9330a0>, origin='/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py')
+++ call create_module None
+++ <frozen importlib._bootstrap_external> 874 create_module : 
+++ return None
+++ call _get_cached None
+++ <frozen importlib._bootstrap_external> 511 _get_cached : 
+++ <frozen importlib._bootstrap_external> 512 _get_cached : 
+++ <frozen importlib._bootstrap_external> 513 _get_cached : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 73
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', '__pycache__', 'utils.cpython-310.pyc']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/utils.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/utils.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/utils.cpython-310.pyc
+++ call exec_module None
+++ <frozen importlib._bootstrap_external> 879 exec_module : 
+++ call get_code None
+++ <frozen importlib._bootstrap_external> 957 get_code : 
+++ call _check_name_wrapper None
+++ <frozen importlib._bootstrap_external> 543 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 545 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 548 _check_name_wrapper : 
+++ call get_filename None
+++ <frozen importlib._bootstrap_external> 1068 get_filename : 
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py
+++ <frozen importlib._bootstrap_external> 958 get_code : 
+++ <frozen importlib._bootstrap_external> 959 get_code : 
+++ <frozen importlib._bootstrap_external> 960 get_code : 
+++ <frozen importlib._bootstrap_external> 961 get_code : 
+++ <frozen importlib._bootstrap_external> 962 get_code : 
+++ <frozen importlib._bootstrap_external> 963 get_code : 
+++ <frozen importlib._bootstrap_external> 964 get_code : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 73
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', 'utils.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance', '__pycache__', 'utils.cpython-310.pyc']
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/utils.cpython-310.pyc
+++ return /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__pycache__/utils.cpython-310.pyc
+++ <frozen importlib._bootstrap_external> 968 get_code : 
+++ <frozen importlib._bootstrap_external> 969 get_code : 
+++ call path_stats None
+++ <frozen importlib._bootstrap_external> 1091 path_stats : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=268383978, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=161, st_atime=1668951465, st_mtime=1668951465, st_ctime=1668951465)
+++ <frozen importlib._bootstrap_external> 1092 path_stats : 
+++ return {'mtime': 1668951465.254755, 'size': 161}
+++ <frozen importlib._bootstrap_external> 973 get_code : 
+++ <frozen importlib._bootstrap_external> 974 get_code : 
+++ <frozen importlib._bootstrap_external> 975 get_code : 
+++ call get_data None
+++ <frozen importlib._bootstrap_external> 1072 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ <frozen importlib._bootstrap_external> 1074 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ return b'o\r\r\n\x00\x00\x00\x00\xa9-zc\xa1\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00@\x00\x00\x00s\x18\x00\x00\x00d\x00d\x01l\x00m\x01Z\x01\x01\x00d\x02d\x03\x84\x00Z\x02d\x04S\x00)\x05\xe9\x00\x00\x00\x00)\x01\xda\rimport_modulec\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s\x1e\x00\x00\x00|\x00\xa0\x00d\x01d\x02\xa1\x02\\\x02}\x01}\x02t\x01t\x02|\x01\x83\x01|\x02\x83\x02S\x00)\x03N\xda\x01.\xe9\x01\x00\x00\x00)\x03\xda\x06rsplit\xda\x07getattrr\x02\x00\x00\x00)\x03\xda\x04path\xda\x07package\xda\x06module\xa9\x00r\n\x00\x00\x00\xfaR/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py\xda\x12import_module_attr\x04\x00\x00\x00s\x04\x00\x00\x00\x10\x01\x0e\x01r\x0c\x00\x00\x00N)\x03\xda\timportlibr\x02\x00\x00\x00r\x0c\x00\x00\x00r\n\x00\x00\x00r\n\x00\x00\x00r\n\x00\x00\x00r\x0b\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00s\x04\x00\x00\x00\x0c\x00\x0c\x03'
+++ <frozen importlib._bootstrap_external> 980 get_code : 
+++ <frozen importlib._bootstrap_external> 981 get_code : 
+++ <frozen importlib._bootstrap_external> 979 get_code : 
+++ <frozen importlib._bootstrap_external> 983 get_code : 
+++ <frozen importlib._bootstrap_external> 984 get_code : 
+++ call _classify_pyc None
+++ <frozen importlib._bootstrap_external> 601 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 602 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 606 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 610 _classify_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 612 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 615 _classify_pyc : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 985 get_code : 
+++ <frozen importlib._bootstrap_external> 986 get_code : 
+++ <frozen importlib._bootstrap_external> 987 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ <frozen importlib._bootstrap_external> 1001 get_code : 
+++ <frozen importlib._bootstrap_external> 1002 get_code : 
+++ <frozen importlib._bootstrap_external> 1003 get_code : 
+++ <frozen importlib._bootstrap_external> 1004 get_code : 
+++ <frozen importlib._bootstrap_external> 1005 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ call _validate_timestamp_pyc None
+++ <frozen importlib._bootstrap_external> 637 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 1668951465
+++ <frozen importlib._bootstrap_external> 641 _validate_timestamp_pyc : 
+++ <frozen importlib._bootstrap_external> 642 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 161
+++ return None
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1011 get_code : 
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ <frozen importlib._bootstrap_external> 1013 get_code : 
+++ <frozen importlib._bootstrap_external> 1014 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ call _compile_bytecode None
+++ <frozen importlib._bootstrap_external> 672 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 673 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 674 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 675 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 676 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 677 _compile_bytecode : 
+++ return <code object <module> at 0x13e93c030, file "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py", line 1>
+++ return <code object <module> at 0x13e93c030, file "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py", line 1>
+++ <frozen importlib._bootstrap_external> 880 exec_module : 
+++ <frozen importlib._bootstrap_external> 883 exec_module : 
+++ call <module> None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py 1 <module> : from importlib import import_module
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py 4 <module> : def import_module_attr(path):
+++ return None
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 4 <module> : class Config:
+++ call Config None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 4 Config : class Config:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 5 Config : """
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 8 Config : def __init__(self):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 12 Config : def __getattr__(self, key):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 26 Config : def __setattr__(self, key, value):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 31 Config : def __dir__(self):
+++ return <cell at 0x13e932e30: empty>
+++ return None
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__init__.py 14 _setup : self._wrapped = Config()
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 9 __init__ : super().__setattr__('_backend',
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py 10 __init__ : utils.import_module_attr(settings.BACKEND)())
+++ call import_module_attr None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py 5 import_module_attr : package, module = path.rsplit('.', 1)
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/utils.py 6 import_module_attr : return getattr(import_module(package), module)
+++ return <class 'constance.backends.database.DatabaseBackend'>
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 18 __init__ : from .models import Constance
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 19 __init__ : self._model = Constance
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 20 __init__ : self._prefix = settings.DATABASE_PREFIX
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 21 __init__ : self._autofill_timeout = settings.DATABASE_CACHE_AUTOFILL_TIMEOUT
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 22 __init__ : self._autofill_cachekey = 'autofilled'
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 24 __init__ : if self._model._meta.app_config is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 29 __init__ : if settings.DATABASE_CACHE_BACKEND:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 30 __init__ : self._cache = caches[settings.DATABASE_CACHE_BACKEND]
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 31 __init__ : if isinstance(self._cache, LocMemCache):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 32 __init__ : raise ImproperlyConfigured(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 33 __init__ : "The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a "
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 36 __init__ : % settings.DATABASE_CACHE_BACKEND)
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 33 __init__ : "The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a "
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py 32 __init__ : raise ImproperlyConfigured(
+++ exception (<class 'django.core.exceptions.ImproperlyConfigured'>, ImproperlyConfigured("The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching."), <traceback object at 0x13e1b0080>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py", line 32, in __init__
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching.

+++ return None
+++ exception (<class 'django.core.exceptions.ImproperlyConfigured'>, ImproperlyConfigured("The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching."), <traceback object at 0x13e9674c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 10, in __init__
    utils.import_module_attr(settings.BACKEND)())
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py", line 32, in __init__
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching.

+++ return None
+++ exception (<class 'django.core.exceptions.ImproperlyConfigured'>, ImproperlyConfigured("The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching."), <traceback object at 0x13e99c800>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__init__.py", line 14, in _setup
    self._wrapped = Config()
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 10, in __init__
    utils.import_module_attr(settings.BACKEND)())
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py", line 32, in __init__
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching.

+++ return None
+++ exception (<class 'django.core.exceptions.ImproperlyConfigured'>, ImproperlyConfigured("The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching."), <traceback object at 0x13e13d1c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/permissions.py", line 61, in has_permission
    return bool(site_config.ALLOW_REGISTRATION)
  File "/Users/kaima/src/soir/deps/django22/django/utils/functional.py", line 256, in inner
    self._setup()
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__init__.py", line 14, in _setup
    self._wrapped = Config()
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 10, in __init__
    utils.import_module_attr(settings.BACKEND)())
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py", line 32, in __init__
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching.

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/Users/kaima/src/soir/apps/ownphotos/api/permissions.py", line 61, in has_permission
    return bool(site_config.ALLOW_REGISTRATION)
  File "/Users/kaima/src/soir/deps/django22/django/utils/functional.py", line 256, in inner
    self._setup()
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/__init__.py", line 14, in _setup
    self._wrapped = Config()
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/base.py", line 10, in __init__
    utils.import_module_attr(settings.BACKEND)())
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/constance/backends/database/__init__.py", line 32, in __init__
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: The CONSTANCE_DATABASE_CACHE_BACKEND setting refers to a subclass of Django's local-memory backend ('default'). Please set it to a backend that supports cross-process caching.

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1228 get_permissions : if self.action == 'create':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1230 get_permissions : elif self.action == 'list':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1232 get_permissions : elif self.request.method == 'GET' or self.request.method == 'POST':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1235 get_permissions : self.permission_classes = (IsUserOrReadOnly, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1236 get_permissions : return super(UserViewSet, self).get_permissions()
+++ return [<api.permissions.IsUserOrReadOnly object at 0x13e933580>]
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/user/<pk>/ <function UserViewSet at 0x13e887f40> ^^api/user/(?P<pk>[^/.]+)/$ user-detail
for POST...{'pk': <Sym: arg_pk>}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1228 get_permissions : if self.action == 'create':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1230 get_permissions : elif self.action == 'list':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1232 get_permissions : elif self.request.method == 'GET' or self.request.method == 'POST':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1233 get_permissions : self.permission_classes = (AllowAny, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1236 get_permissions : return super(UserViewSet, self).get_permissions()
+++ return [<rest_framework.permissions.AllowAny object at 0x13e933d30>]
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1228 get_permissions : if self.action == 'create':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1230 get_permissions : elif self.action == 'list':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1232 get_permissions : elif self.request.method == 'GET' or self.request.method == 'POST':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1235 get_permissions : self.permission_classes = (IsUserOrReadOnly, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1236 get_permissions : return super(UserViewSet, self).get_permissions()
+++ return [<api.permissions.IsUserOrReadOnly object at 0x13ea043d0>]
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1220 get_queryset : queryset = User.objects.only(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1221 get_queryset : 'id', 'username', 'email', 'scan_directory', 'first_name',
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1222 get_queryset : 'last_name', 'date_joined', 'avatar', 'nextcloud_server_address',
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1223 get_queryset : 'nextcloud_username', 'nextcloud_scan_directory'
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1220 get_queryset : queryset = User.objects.only(
+++ exception (<class 'AttributeError'>, AttributeError("'NoneType' object has no attribute '_filtered_relations'"), <traceback object at 0x13e9fd200>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1220, in get_queryset
    queryset = User.objects.only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/query.py", line 1134, in only
    if field in self.query._filtered_relations:
AttributeError: 'NoneType' object has no attribute '_filtered_relations'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1220, in get_queryset
    queryset = User.objects.only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/query.py", line 1134, in only
    if field in self.query._filtered_relations:
AttributeError: 'NoneType' object has no attribute '_filtered_relations'

[DBG] Number of effectful paths discovered = 0

/api/manage/user/ <function ManageUserViewSet at 0x13e8940d0> ^^api/manage/user/$ user-list
for POST...{}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0

/api/manage/user/<pk>/ <function ManageUserViewSet at 0x13e8941f0> ^^api/manage/user/(?P<pk>[^/.]+)/$ user-detail
for POST...{'pk': <Sym: arg_pk>}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0

/api/albums/auto/list/ <function AlbumAutoListViewSet at 0x13e894310> ^^api/albums/auto/list/$ album_auto-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/relations.py", line 523, in to_internal_value
    if isinstance(data, str) or not hasattr(data, '__iter__'):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr __iter__ from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/auto/list/<pk>/ <function AlbumAutoListViewSet at 0x13e894430> ^^api/albums/auto/list/(?P<pk>[^/.]+)/$ album_auto-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 781 get_queryset : return AlbumAuto.objects.filter(owner=self.request.user) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ea62dc0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 781, in get_queryset
    return AlbumAuto.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 781, in get_queryset
    return AlbumAuto.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/date/list/ <function AlbumDateListViewSet at 0x13e894550> ^^api/albums/date/list/$ album_date-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))
[DBG]  {not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), not(request_data_favorited), not((request_data_title)==(''))}
!!! Unknown field type in insert: api.AlbumDate.location <class 'django.contrib.postgres.fields.jsonb.JSONField'>
+++ call get_people None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 397 get_people : photos = obj.photos.all()
+++ exception (<class 'TypeError'>, TypeError("'NoneType' object is not callable"), <traceback object at 0x13ea610c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 397, in get_people
    photos = obj.photos.all()
TypeError: 'NoneType' object is not callable

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 522, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2190, in to_representation
    return method(value)
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 397, in get_people
    photos = obj.photos.all()
TypeError: 'NoneType' object is not callable

[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), request_data_favorited}
!!! Unknown field type in insert: api.AlbumDate.location <class 'django.contrib.postgres.fields.jsonb.JSONField'>
+++ call get_people None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 397 get_people : photos = obj.photos.all()
+++ exception (<class 'TypeError'>, TypeError("'NoneType' object is not callable"), <traceback object at 0x13b8af340>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 397, in get_people
    photos = obj.photos.all()
TypeError: 'NoneType' object is not callable

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 522, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2190, in to_representation
    return method(value)
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 397, in get_people
    photos = obj.photos.all()
TypeError: 'NoneType' object is not callable

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/date/list/<pk>/ <function AlbumDateListViewSet at 0x13e894670> ^^api/albums/date/list/(?P<pk>[^/.]+)/$ album_date-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG]  exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))
[DBG]  {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}
[DBG] Found a new path with retval = <Response status_code=204, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'pk': <Type.INT: 2>}
condition = {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}
effect = [delete[api.AlbumDate](singleton[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'pk': <Type.INT: 2>}, {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}, [delete[api.AlbumDate](singleton[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))]]

/api/albums/date/photohash/list/ <function AlbumDateListWithPhotoHashViewSet at 0x13e894790> ^^api/albums/date/photohash/list/$ album_date-list
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/date/photohash/list/<pk>/ <function AlbumDateListWithPhotoHashViewSet at 0x13e8948b0> ^^api/albums/date/photohash/list/(?P<pk>[^/.]+)/$ album_date-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/person/list/ <function AlbumPersonListViewSet at 0x13e8949d0> ^^api/albums/person/list/$ person-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
[DBG]  not((request_data_name)==(''))
[DBG]  {not((request_data_name)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Person](objtoref[api.Person](obj1)))
[DBG]  {not((request_data_name)==('')), not(exists[api.Person](objtoref[api.Person](obj1)))}
!!! Unknown field type in insert: api.Person.mean_face_encoding <class 'django.db.models.fields.TextField'>
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 482 get_photo_count : return obj.faces.count()
+++ exception (<class 'TypeError'>, TypeError("'NoneType' object is not callable"), <traceback object at 0x13eaf5f00>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 482, in get_photo_count
    return obj.faces.count()
TypeError: 'NoneType' object is not callable

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 522, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2190, in to_representation
    return method(value)
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 482, in get_photo_count
    return obj.faces.count()
TypeError: 'NoneType' object is not callable

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/person/list/<pk>/ <function AlbumPersonListViewSet at 0x13e894af0> ^^api/albums/person/list/(?P<pk>[^/.]+)/$ person-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 63, in get_queryset
    assert self.queryset is not None, (
AssertionError: 'AlbumPersonListViewSet' should either include a `queryset` attribute, or override the `get_queryset()` method.

[DBG] Number of effectful paths discovered = 0

/api/albums/thing/list/ <function AlbumThingListViewSet at 0x13e894c10> ^^api/albums/thing/list/$ album_thing-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 351 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}
effect = [update[api.AlbumThing](singleton[api.AlbumThing](obj1))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}, [update[api.AlbumThing](singleton[api.AlbumThing](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/thing/list/<pk>/ <function AlbumThingListViewSet at 0x13e894d30> ^^api/albums/thing/list/(?P<pk>[^/.]+)/$ album_thing-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1007 get_queryset : return AlbumThing.objects.filter(owner=self.request.user) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ea60ec0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1007, in get_queryset
    return AlbumThing.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1007, in get_queryset
    return AlbumThing.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/place/list/ <function AlbumPlaceListViewSet at 0x13e894e50> ^^api/albums/place/list/$ album_place-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 319 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_geolocation_level': <Type.INT: 2>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}
effect = [update[api.AlbumPlace](singleton[api.AlbumPlace](obj1))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'request_data_geolocation_level': <Type.INT: 2>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}, [update[api.AlbumPlace](singleton[api.AlbumPlace](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/place/list/<pk>/ <function AlbumPlaceListViewSet at 0x13e894f70> ^^api/albums/place/list/(?P<pk>[^/.]+)/$ album_place-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1062 get_queryset : return AlbumPlace.objects.filter(owner=self.request.user) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13eb24e40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1062, in get_queryset
    return AlbumPlace.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1062, in get_queryset
    return AlbumPlace.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/user/list/ <function AlbumUserListViewSet at 0x13e895090> ^^api/albums/user/list/$ album_user-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited)}
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==('')), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited}
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==('')), request_data_favorited}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==('')), request_data_favorited}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Number of effectful paths discovered = 2
[DBG] Path 1 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
[DBG] Path 2 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==('')), request_data_favorited}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/user/list/<pk>/ <function AlbumUserListViewSet at 0x13e8951b0> ^^api/albums/user/list/(?P<pk>[^/.]+)/$ album_user-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1137 get_queryset : return AlbumUser.objects.filter(owner=self.request.user) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ea61240>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1137, in get_queryset
    return AlbumUser.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1137, in get_queryset
    return AlbumUser.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/user/edit/ <function AlbumUserEditViewSet at 0x13e8952d0> ^^api/albums/user/edit/$ album_user-list
for POST...{}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 479, in to_internal_value
    for field in fields:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 362, in _writable_fields
    for field in self.fields.values():
  File "/Users/kaima/src/soir/deps/django22/django/utils/functional.py", line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 356, in fields
    for key, value in self.get_fields().items():
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 1047, in get_fields
    declared_fields = copy.deepcopy(self._declared_fields)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py", line 172, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py", line 297, in _reconstruct
    value = deepcopy(value, memo)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py", line 153, in deepcopy
    y = copier(memo)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 682, in __deepcopy__
    kwargs = {
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 683, in <dictcomp>
    key: (copy.deepcopy(value, memo) if (key not in ('validators', 'regex')) else value)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py", line 153, in deepcopy
    y = copier(memo)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 682, in __deepcopy__
    kwargs = {
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 683, in <dictcomp>
    key: (copy.deepcopy(value, memo) if (key not in ('validators', 'regex')) else value)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py", line 153, in deepcopy
    y = copier(memo)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/query.py", line 218, in __deepcopy__
    obj = self.__class__()
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 18, in __init__
    self._label = self.model._meta.label
AttributeError: 'NoneType' object has no attribute '_meta'

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/user/edit/<pk>/ <function AlbumUserEditViewSet at 0x13e8953f0> ^^api/albums/user/edit/(?P<pk>[^/.]+)/$ album_user-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1095 get_queryset : return AlbumUser.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1096 get_queryset : owner=self.request.user).order_by('title')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1095 get_queryset : return AlbumUser.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13eab7c80>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1095, in get_queryset
    return AlbumUser.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1095, in get_queryset
    return AlbumUser.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/user/shared/tome/ <function SharedToMeAlbumUserListViewSet at 0x13e895510> ^^api/albums/user/shared/tome/$ album_user-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited)}
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==('')), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited}
[DBG]  not((request_data_title)==(''))
[DBG]  {request_data_favorited, not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {request_data_favorited, not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {request_data_favorited, not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Number of effectful paths discovered = 2
[DBG] Path 1 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not(request_data_favorited)}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
[DBG] Path 2 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {request_data_favorited, not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/user/shared/tome/<pk>/ <function SharedToMeAlbumUserListViewSet at 0x13e895630> ^^api/albums/user/shared/tome/(?P<pk>[^/.]+)/$ album_user-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1161 get_queryset : return AlbumUser.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1162 get_queryset : shared_to__id__exact=self.request.user.id)
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'id'"), <traceback object at 0x13eb3fe40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1162, in get_queryset
    shared_to__id__exact=self.request.user.id)
AttributeError: 'FakeUser' object has no attribute 'id'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1162, in get_queryset
    shared_to__id__exact=self.request.user.id)
AttributeError: 'FakeUser' object has no attribute 'id'

[DBG] Number of effectful paths discovered = 0

/api/albums/user/shared/fromme/ <function SharedFromMeAlbumUserListViewSet at 0x13e895750> ^^api/albums/user/shared/fromme/$ album_user-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited)}
[DBG]  not((request_data_title)==(''))
[DBG]  {not(request_data_favorited), not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not(request_data_favorited), not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited}
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call get_photo_count None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 592 get_photo_count : try:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 593 get_photo_count : return obj.photo_count
+++ return None
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Number of effectful paths discovered = 2
[DBG] Path 1 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_favorited), not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
[DBG] Path 2 = [{'request_data_favorited': <Type.BOOL: 1>, 'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/user/shared/fromme/<pk>/ <function SharedFromMeAlbumUserListViewSet at 0x13e895870> ^^api/albums/user/shared/fromme/(?P<pk>[^/.]+)/$ album_user-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1171 get_queryset : return AlbumUser.objects.annotate(shared_to_count=Count('shared_to')) \
annotate
+++ exception (<class 'NotImplementedError'>, NotImplementedError(), <traceback object at 0x13eb5e080>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1171, in get_queryset
    return AlbumUser.objects.annotate(shared_to_count=Count('shared_to')) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 356, in annotate
    raise NotImplementedError()
NotImplementedError

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1171, in get_queryset
    return AlbumUser.objects.annotate(shared_to_count=Count('shared_to')) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 356, in annotate
    raise NotImplementedError()
NotImplementedError

[DBG] Number of effectful paths discovered = 0

/api/albums/auto/ <function AlbumAutoViewSet at 0x13e895990> ^^api/albums/auto/$ album_auto-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_title)==('')), not(request_data_favorited)}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 618, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 632, in to_internal_value
    if html.is_html_input(data):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/utils/html.py", line 12, in is_html_input
    return hasattr(dictionary, 'getlist')
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr getlist from symbolic value for python type <class 'int'>

[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('timestamp', <django.db.models.fields.DateTimeField: timestamp>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('gps_lat', <django.db.models.fields.FloatField: gps_lat>), ('gps_lon', <django.db.models.fields.FloatField: gps_lon>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), request_data_favorited}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 618, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 632, in to_internal_value
    if html.is_html_input(data):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/utils/html.py", line 12, in is_html_input
    return hasattr(dictionary, 'getlist')
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr getlist from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/auto/<pk>/ <function AlbumAutoViewSet at 0x13e895ab0> ^^api/albums/auto/(?P<pk>[^/.]+)/$ album_auto-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 746 get_queryset : return AlbumAuto.objects.filter(owner=self.request.user) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13eb5cf40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 746, in get_queryset
    return AlbumAuto.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 746, in get_queryset
    return AlbumAuto.objects.filter(owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/person/ <function AlbumPersonViewSet at 0x13e895bd0> ^^api/albums/person/$ person-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
[DBG]  not((request_data_name)==(''))
[DBG]  {not((request_data_name)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Person](objtoref[api.Person](obj1)))
[DBG]  {not((request_data_name)==('')), not(exists[api.Person](objtoref[api.Person](obj1)))}
!!! Unknown field type in insert: api.Person.mean_face_encoding <class 'django.db.models.fields.TextField'>
+++ call get_photos None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 436 get_photos : start = datetime.now()
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 438 get_photos : user = None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 439 get_photos : request = self.context.get("request")
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 440 get_photos : if request and hasattr(request, "user"):
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 441 get_photos : user = request.user
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 443 get_photos : res = PhotoSuperSimpleSerializer(obj.get_photos(user), many=True).data
fuck, ATTR NOT RECOGNIZED BUT IT IS IN model_cls: get_photos
+++ exception (<class 'TypeError'>, TypeError('Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given'), <traceback object at 0x13eb5ff80>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 443, in get_photos
    res = PhotoSuperSimpleSerializer(obj.get_photos(user), many=True).data
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 555, in data
    ret = super().data
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 253, in data
    self._data = self.to_representation(self.instance)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 522, in to_representation
    ret[field.field_name] = field.to_representation(attribute)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2190, in to_representation
    return method(value)
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 443, in get_photos
    res = PhotoSuperSimpleSerializer(obj.get_photos(user), many=True).data
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/person/<pk>/ <function AlbumPersonViewSet at 0x13e895cf0> ^^api/albums/person/(?P<pk>[^/.]+)/$ person-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 845 get_queryset : return Person.objects.all().prefetch_related(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 846 get_queryset : Prefetch(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 847 get_queryset : 'faces__photo',
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 848 get_queryset : queryset=Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 849 get_queryset : owner=self.request.user).order_by('-exif_timestamp').only(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 848 get_queryset : queryset=Photo.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13eb3ff80>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 848, in get_queryset
    queryset=Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 848, in get_queryset
    queryset=Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/date/ <function AlbumDateViewSet at 0x13e895e10> ^^api/albums/date/$ albumdate-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))
[DBG]  {not(request_data_favorited), not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), not((request_data_title)==(''))}
!!! Unknown field type in insert: api.AlbumDate.location <class 'django.contrib.postgres.fields.jsonb.JSONField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), not((request_data_title)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'request_data_date': <Type.INT: 2>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>}
condition = {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), not((request_data_title)==(''))}
effect = [update[api.AlbumDate](singleton[api.AlbumDate](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('date', <django.db.models.fields.DateField: date>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('location', <django.contrib.postgres.fields.jsonb.JSONField: location>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))
[DBG]  {not((request_data_title)==('')), request_data_favorited, not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))}
!!! Unknown field type in insert: api.AlbumDate.location <class 'django.contrib.postgres.fields.jsonb.JSONField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), request_data_favorited, not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'request_data_date': <Type.INT: 2>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>}
condition = {not((request_data_title)==('')), request_data_favorited, not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))}
effect = [update[api.AlbumDate](singleton[api.AlbumDate](obj1))]
[DBG] Number of effectful paths discovered = 2
[DBG] Path 1 = [{'request_data_title': <Type.STR: 5>, 'request_data_date': <Type.INT: 2>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1))), not((request_data_title)==(''))}, [update[api.AlbumDate](singleton[api.AlbumDate](obj1))]]
[DBG] Path 2 = [{'request_data_title': <Type.STR: 5>, 'request_data_date': <Type.INT: 2>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>}, {not((request_data_title)==('')), request_data_favorited, not(exists[api.AlbumDate](objtoref[api.AlbumDate](obj1)))}, [update[api.AlbumDate](singleton[api.AlbumDate](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/date/<pk>/ <function AlbumDateViewSet at 0x13e895f30> ^^api/albums/date/(?P<pk>[^/.]+)/$ albumdate-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG]  exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))
[DBG]  {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}
[DBG] Found a new path with retval = <Response status_code=204, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'pk': <Type.INT: 2>}
condition = {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}
effect = [delete[api.AlbumDate](singleton[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'pk': <Type.INT: 2>}, {exists[api.AlbumDate](objtoref[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))}, [delete[api.AlbumDate](singleton[api.AlbumDate](deref[api.AlbumDate](orderby[api.AlbumDate, date, desc](all[api.AlbumDate]),arg_pk)))]]

/api/albums/thing/ <function AlbumThingViewSet at 0x13e896050> ^^api/albums/thing/$ album_thing-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('thing_type', <django.db.models.fields.CharField: thing_type>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}
effect = [update[api.AlbumThing](singleton[api.AlbumThing](obj1))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumThing](objtoref[api.AlbumThing](obj1)))}, [update[api.AlbumThing](singleton[api.AlbumThing](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/thing/<pk>/ <function AlbumThingViewSet at 0x13e896170> ^^api/albums/thing/(?P<pk>[^/.]+)/$ album_thing-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 976 get_queryset : return AlbumThing.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 977 get_queryset : owner=self.request.user).order_by('title')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 976 get_queryset : return AlbumThing.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13de7c740>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 976, in get_queryset
    return AlbumThing.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 976, in get_queryset
    return AlbumThing.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/place/ <function AlbumPlaceViewSet at 0x13e896290> ^^api/albums/place/$ album_place-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('geolocation_level', <django.db.models.fields.IntegerField: geolocation_level>), ('favorited', <django.db.models.fields.BooleanField: favorited>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}
effect = [update[api.AlbumPlace](singleton[api.AlbumPlace](obj1))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'request_data_title': <Type.STR: 5>, 'obj1_id': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumPlace](objtoref[api.AlbumPlace](obj1)))}, [update[api.AlbumPlace](singleton[api.AlbumPlace](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/place/<pk>/ <function AlbumPlaceViewSet at 0x13e8963b0> ^^api/albums/place/(?P<pk>[^/.]+)/$ album_place-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1032 get_queryset : return AlbumPlace.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1033 get_queryset : owner=self.request.user).order_by('title')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1032 get_queryset : return AlbumPlace.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13eb147c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1032, in get_queryset
    return AlbumPlace.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1032, in get_queryset
    return AlbumPlace.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/albums/user/ <function AlbumUserViewSet at 0x13e8964d0> ^^api/albums/user/$ album_user-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not(request_data_favorited), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==(''))}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==(''))}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not((request_data_title)==(''))
[DBG]  {not((request_data_title)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('title', <django.db.models.fields.CharField: title>), ('created_on', <django.db.models.fields.DateTimeField: created_on>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('public', <django.db.models.fields.BooleanField: public>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('cover_photos', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: cover_photos>, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1)))
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
[WARN] Assume api.AlbumUser.created_on default is __now
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_title': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}
condition = {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}
effect = [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]
[DBG] Number of effectful paths discovered = 2
[DBG] Path 1 = [{'request_data_title': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_favorited), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), not((request_data_title)==(''))}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
[DBG] Path 2 = [{'request_data_title': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'obj1_id': <Type.INT: 2>, '__now': <Type.INT: 2>}, {not((request_data_title)==('')), not(exists[api.AlbumUser](objtoref[api.AlbumUser](obj1))), request_data_favorited}, [update[api.AlbumUser](singleton[api.AlbumUser](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/albums/user/<pk>/ <function AlbumUserViewSet at 0x13e8965f0> ^^api/albums/user/(?P<pk>[^/.]+)/$ album_user-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1106 get_queryset : qs = AlbumUser.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1107 get_queryset : Q(owner=self.request.user)
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1108 get_queryset : | Q(shared_to__exact=self.request.user.id)).distinct(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'id'"), <traceback object at 0x13db45200>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1108, in get_queryset
    | Q(shared_to__exact=self.request.user.id)).distinct(
AttributeError: 'FakeUser' object has no attribute 'id'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1108, in get_queryset
    | Q(shared_to__exact=self.request.user.id)).distinct(
AttributeError: 'FakeUser' object has no attribute 'id'

[DBG] Number of effectful paths discovered = 0

/api/persons/ <function PersonViewSet at 0x13e896710> ^^api/persons/$ person-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
[DBG]  not((request_data_name)==(''))
[DBG]  {not((request_data_name)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), forward_relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('name', <django.db.models.fields.CharField: name>), ('kind', <django.db.models.fields.CharField: kind>), ('mean_face_encoding', <django.db.models.fields.TextField: mean_face_encoding>), ('cluster_id', <django.db.models.fields.IntegerField: cluster_id>)]), relations=OrderedDict([('account', RelationInfo(model_field=<django.db.models.fields.related.OneToOneField: account>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='id', has_through_model=False, reverse=True))]))
+++ call create None
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 219 create : name = validated_data.pop('name')
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 220 create : qs = Person.objects.filter(name=name)
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 221 create : if qs.count() > 0:
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 224 create : new_person = Person()
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 225 create : new_person.name = name
+++ /Users/kaima/src/soir/apps/ownphotos/api/serializers.py 226 create : new_person.save()
+++ call find_spec None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 92 find_spec : if path is not None and not fullname.startswith('test.'):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/_distutils_hack/__init__.py 93 find_spec : return
+++ return None
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1437 find_spec : 
+++ <frozen importlib._bootstrap_external> 1439 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1404 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1405 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1406 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1408 _get_spec : 
+++ call _path_importer_cache None
+++ <frozen importlib._bootstrap_external> 1364 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1371 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1372 _path_importer_cache : 
+++ <frozen importlib._bootstrap_external> 1376 _path_importer_cache : 
+++ return FileFinder('/Users/kaima/src/soir/deps/django22/django/db/models/sql')
+++ <frozen importlib._bootstrap_external> 1409 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1410 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1411 _get_spec : 
+++ call find_spec None
+++ <frozen importlib._bootstrap_external> 1541 find_spec : 
+++ <frozen importlib._bootstrap_external> 1542 find_spec : 
+++ <frozen importlib._bootstrap_external> 1543 find_spec : 
+++ <frozen importlib._bootstrap_external> 1544 find_spec : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=16877, st_ino=172537476, st_dev=16777220, st_nlink=10, st_uid=501, st_gid=20, st_size=320, st_atime=1646147249, st_mtime=1646147249, st_ctime=1646147249)
+++ <frozen importlib._bootstrap_external> 1547 find_spec : 
+++ <frozen importlib._bootstrap_external> 1551 find_spec : 
+++ call _relax_case None
+++ <frozen importlib._bootstrap_external> 69 _relax_case : 
+++ return False
+++ <frozen importlib._bootstrap_external> 1555 find_spec : 
+++ <frozen importlib._bootstrap_external> 1556 find_spec : 
+++ <frozen importlib._bootstrap_external> 1558 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.cpython-310-darwin.so']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.cpython-310-darwin.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.abi3.so']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.abi3.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.so']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.so
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1570 find_spec : 
+++ <frozen importlib._bootstrap_external> 1571 find_spec : 
+++ <frozen importlib._bootstrap_external> 1572 find_spec : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.py']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py
+++ <frozen importlib._bootstrap_external> 1575 find_spec : 
+++ <frozen importlib._bootstrap_external> 1576 find_spec : 
+++ <frozen importlib._bootstrap_external> 1577 find_spec : 
+++ call _path_isfile None
+++ <frozen importlib._bootstrap_external> 161 _path_isfile : 
+++ call _path_is_mode_type None
+++ <frozen importlib._bootstrap_external> 152 _path_is_mode_type : 
+++ <frozen importlib._bootstrap_external> 153 _path_is_mode_type : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=172537478, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=71525, st_atime=1646141035, st_mtime=1646141005, st_ctime=1646141005)
+++ <frozen importlib._bootstrap_external> 156 _path_is_mode_type : 
+++ return True
+++ return True
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ <frozen importlib._bootstrap_external> 1579 find_spec : 
+++ <frozen importlib._bootstrap_external> 1578 find_spec : 
+++ call _get_spec None
+++ <frozen importlib._bootstrap_external> 1532 _get_spec : 
+++ call __init__ None
+++ <frozen importlib._bootstrap_external> 1043 __init__ : 
+++ <frozen importlib._bootstrap_external> 1044 __init__ : 
+++ return None
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1534 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1533 _get_spec : 
+++ call spec_from_file_location None
+++ <frozen importlib._bootstrap_external> 733 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 745 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 746 spec_from_file_location : 
+++ call _path_isabs None
+++ <frozen importlib._bootstrap_external> 182 _path_isabs : 
+++ return True
+++ <frozen importlib._bootstrap_external> 758 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 759 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 762 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 772 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 783 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 784 spec_from_file_location : 
+++ <frozen importlib._bootstrap_external> 789 spec_from_file_location : 
+++ return ModuleSpec(name='django.db.models.sql.compiler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13eb495a0>, origin='/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py')
+++ return ModuleSpec(name='django.db.models.sql.compiler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13eb495a0>, origin='/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py')
+++ return ModuleSpec(name='django.db.models.sql.compiler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13eb495a0>, origin='/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py')
+++ <frozen importlib._bootstrap_external> 1414 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1416 _get_spec : 
+++ <frozen importlib._bootstrap_external> 1417 _get_spec : 
+++ return ModuleSpec(name='django.db.models.sql.compiler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13eb495a0>, origin='/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py')
+++ <frozen importlib._bootstrap_external> 1440 find_spec : 
+++ <frozen importlib._bootstrap_external> 1442 find_spec : 
+++ <frozen importlib._bootstrap_external> 1453 find_spec : 
+++ return ModuleSpec(name='django.db.models.sql.compiler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x13eb495a0>, origin='/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py')
+++ call create_module None
+++ <frozen importlib._bootstrap_external> 874 create_module : 
+++ return None
+++ call _get_cached None
+++ <frozen importlib._bootstrap_external> 511 _get_cached : 
+++ <frozen importlib._bootstrap_external> 512 _get_cached : 
+++ <frozen importlib._bootstrap_external> 513 _get_cached : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 56
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', '__pycache__', 'compiler.cpython-310.pyc']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/__pycache__/compiler.cpython-310.pyc
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/__pycache__/compiler.cpython-310.pyc
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/__pycache__/compiler.cpython-310.pyc
+++ call exec_module None
+++ <frozen importlib._bootstrap_external> 879 exec_module : 
+++ call get_code None
+++ <frozen importlib._bootstrap_external> 957 get_code : 
+++ call _check_name_wrapper None
+++ <frozen importlib._bootstrap_external> 543 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 545 _check_name_wrapper : 
+++ <frozen importlib._bootstrap_external> 548 _check_name_wrapper : 
+++ call get_filename None
+++ <frozen importlib._bootstrap_external> 1068 get_filename : 
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py
+++ <frozen importlib._bootstrap_external> 958 get_code : 
+++ <frozen importlib._bootstrap_external> 959 get_code : 
+++ <frozen importlib._bootstrap_external> 960 get_code : 
+++ <frozen importlib._bootstrap_external> 961 get_code : 
+++ <frozen importlib._bootstrap_external> 962 get_code : 
+++ <frozen importlib._bootstrap_external> 963 get_code : 
+++ <frozen importlib._bootstrap_external> 964 get_code : 
+++ call cache_from_source None
+++ <frozen importlib._bootstrap_external> 398 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 405 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 406 cache_from_source : 
+++ call _path_split None
+++ <frozen importlib._bootstrap_external> 134 _path_split : 
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return 56
+++ call <genexpr> None
+++ <frozen importlib._bootstrap_external> 134 <genexpr> : 
+++ return None
+++ <frozen importlib._bootstrap_external> 135 _path_split : 
+++ <frozen importlib._bootstrap_external> 137 _path_split : 
+++ return ('/Users/kaima/src/soir/deps/django22/django/db/models/sql', 'compiler.py')
+++ <frozen importlib._bootstrap_external> 407 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 408 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 409 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 411 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 412 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 413 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 414 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 417 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 418 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 422 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 423 cache_from_source : 
+++ <frozen importlib._bootstrap_external> 448 cache_from_source : 
+++ call _path_join None
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ <frozen importlib._bootstrap_external> 129 _path_join : 
+++ <frozen importlib._bootstrap_external> 128 _path_join : 
+++ call <listcomp> None
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 129 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ <frozen importlib._bootstrap_external> 128 <listcomp> : 
+++ return ['/Users/kaima/src/soir/deps/django22/django/db/models/sql', '__pycache__', 'compiler.cpython-310.pyc']
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/__pycache__/compiler.cpython-310.pyc
+++ return /Users/kaima/src/soir/deps/django22/django/db/models/sql/__pycache__/compiler.cpython-310.pyc
+++ <frozen importlib._bootstrap_external> 968 get_code : 
+++ <frozen importlib._bootstrap_external> 969 get_code : 
+++ call path_stats None
+++ <frozen importlib._bootstrap_external> 1091 path_stats : 
+++ call _path_stat None
+++ <frozen importlib._bootstrap_external> 147 _path_stat : 
+++ return os.stat_result(st_mode=33188, st_ino=172537478, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=71525, st_atime=1646141035, st_mtime=1646141005, st_ctime=1646141005)
+++ <frozen importlib._bootstrap_external> 1092 path_stats : 
+++ return {'mtime': 1646141005.671571, 'size': 71525}
+++ <frozen importlib._bootstrap_external> 973 get_code : 
+++ <frozen importlib._bootstrap_external> 974 get_code : 
+++ <frozen importlib._bootstrap_external> 975 get_code : 
+++ call get_data None
+++ <frozen importlib._bootstrap_external> 1072 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ <frozen importlib._bootstrap_external> 1074 get_data : 
+++ <frozen importlib._bootstrap_external> 1073 get_data : 
+++ return b'o\r\r\n\x00\x00\x00\x00M\x1e\x1ebe\x17\x01\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00sH\x01\x00\x00d\x00d\x01l\x00Z\x00d\x00d\x01l\x01Z\x01d\x00d\x01l\x02Z\x02d\x00d\x01l\x03Z\x03d\x00d\x02l\x04m\x05Z\x05\x01\x00d\x00d\x03l\x06m\x07Z\x07m\x08Z\x08\x01\x00d\x00d\x04l\tm\nZ\n\x01\x00d\x00d\x05l\x0bm\x0cZ\x0cm\rZ\rm\x0eZ\x0em\x0fZ\x0fm\x10Z\x10\x01\x00d\x00d\x06l\x11m\x12Z\x12m\x13Z\x13\x01\x00d\x00d\x07l\x14m\x15Z\x15m\x16Z\x16m\x17Z\x17m\x18Z\x18m\x19Z\x19m\x1aZ\x1a\x01\x00d\x00d\x08l\x1bm\x1cZ\x1cm\x1dZ\x1d\x01\x00d\x00d\tl\x1em\x1fZ\x1f\x01\x00d\x00d\nl m!Z!m"Z"\x01\x00d\x00d\x0bl#m$Z$m%Z%\x01\x00d\x00d\x0cl&m\'Z\'\x01\x00d\x00d\rl(m)Z)\x01\x00e*\x83\x00Z+G\x00d\x0ed\x0f\x84\x00d\x0f\x83\x02Z,G\x00d\x10d\x11\x84\x00d\x11e,\x83\x03Z-G\x00d\x12d\x13\x84\x00d\x13e,\x83\x03Z.G\x00d\x14d\x15\x84\x00d\x15e,\x83\x03Z/G\x00d\x16d\x17\x84\x00d\x17e,\x83\x03Z0d\x18d\x19\x84\x00Z1d\x01S\x00)\x1a\xe9\x00\x00\x00\x00N)\x01\xda\x05chain)\x02\xda\x0eEmptyResultSet\xda\nFieldError)\x01\xda\nLOOKUP_SEP)\x05\xda\x07OrderBy\xda\x06Random\xda\x06RawSQL\xda\x03Ref\xda\x08Subquery)\x02\xda\x0cQueryWrapper\xda\x16select_related_descend)\x06\xda\x06CURSOR\xda\x17GET_ITERATOR_CHUNK_SIZE\xda\x05MULTI\xda\nNO_RESULTS\xda\tORDER_DIR\xda\x06SINGLE)\x02\xda\x05Query\xda\rget_order_dir)\x01\xda\x1aTransactionManagementError)\x02\xda\rDatabaseError\xda\x11NotSupportedError)\x02\xda\x18RemovedInDjango30Warning\xda\x18RemovedInDjango31Warning)\x01\xda\rmake_hashable)\x01\xda\x17func_supports_parameterc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s\x08\x01\x00\x00e\x00Z\x01d\x00Z\x02d\x01d\x02\x84\x00Z\x03d\x03d\x04\x84\x00Z\x04d\x05d\x06\x84\x00Z\x05d\x07d\x08\x84\x00Z\x06d\td\n\x84\x00Z\x07d\x0bd\x0c\x84\x00Z\x08d\rd\x0e\x84\x00Z\td\x0fd\x10\x84\x00Z\nd\x11d\x12\x84\x00Z\x0bd<d\x14d\x15\x84\x01Z\x0cd\x16d\x17\x84\x00Z\rd=d\x19d\x1a\x84\x01Z\x0ed>d\x1cd\x1d\x84\x01Z\x0fd\x1ed\x1f\x84\x00Z\x10\t \t\x1bd?d!d"\x84\x01Z\x11d#d$\x84\x00Z\x12d%d&\x84\x00Z\x13\t\'\t\x1bd@d(d)\x84\x01Z\x14d*d+\x84\x00Z\x15d,d-\x84\x00Z\x16d.d/\x84\x00Z\x17d0d1\x84\x00Z\x18d\x1bd\x13d\x13e\x19f\x04d2d3\x84\x01Z\x1ad4d5\x84\x00Z\x1be\x1cd\x13e\x19f\x03d6d7\x84\x01Z\x1dd8d9\x84\x00Z\x1ed:d;\x84\x00Z\x1fd\x1bS\x00)A\xda\x0bSQLCompilerc\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00C\x00\x00\x00sD\x00\x00\x00|\x01|\x00_\x00|\x02|\x00_\x01|\x03|\x00_\x02d\x01d\x01i\x01|\x00_\x03d\x00|\x00_\x04d\x00|\x00_\x05d\x00|\x00_\x06t\x07\xa0\x08d\x02\xa1\x01|\x00_\td\x00|\x00_\nd\x00S\x00)\x03N\xda\x01*z\x14(.*)\\s(ASC|DESC)(.*))\x0b\xda\x05query\xda\nconnection\xda\x05using\xda\x0bquote_cache\xda\x06select\xda\x12annotation_col_map\xda\nklass_info\xda\x02re\xda\x07compile\xda\x0eordering_parts\xda\x0e_meta_ordering)\x04\xda\x04selfr\x1e\x00\x00\x00r\x1f\x00\x00\x00r \x00\x00\x00\xa9\x00r*\x00\x00\x00\xfaD/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py\xda\x08__init__\x1b\x00\x00\x00s\x12\x00\x00\x00\x06\x01\x06\x01\x06\x01\n\x01\x06\x05\x06\x01\x06\x01\x0c\x01\n\x01z\x14SQLCompiler.__init__c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00sH\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08\x88\x00j\x01j\x02D\x00\x83\x01\x83\x01r\x12\x88\x00j\x01\xa0\x03\xa1\x00\x01\x00\x88\x00\xa0\x04\xa1\x00\\\x03\x88\x00_\x05\x88\x00_\x06\x88\x00_\x07t\x08\x88\x00j\x05\x83\x01\x88\x00_\td\x00S\x00)\x03Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x003\x00\x00\x00s \x00\x00\x00\x81\x00|\x00]\x0b}\x01\x88\x00j\x00j\x01|\x01\x19\x00d\x00k\x02V\x00\x01\x00q\x02d\x01S\x00\xa9\x02r\x01\x00\x00\x00N\xa9\x02r\x1e\x00\x00\x00\xda\x0ealias_refcount)\x02\xda\x02.0\xda\x01a\xa9\x01r)\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\t<genexpr>+\x00\x00\x00\xf3\x04\x00\x00\x00\x02\x80\x1e\x00z*SQLCompiler.setup_query.<locals>.<genexpr>)\n\xda\x03allr\x1e\x00\x00\x00\xda\talias_map\xda\x11get_initial_alias\xda\nget_selectr"\x00\x00\x00r$\x00\x00\x00r#\x00\x00\x00\xda\x03len\xda\tcol_countr2\x00\x00\x00r*\x00\x00\x00r2\x00\x00\x00r+\x00\x00\x00\xda\x0bsetup_query*\x00\x00\x00s\x08\x00\x00\x00\x1a\x01\n\x01\x14\x01\x10\x01z\x17SQLCompiler.setup_queryc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00sX\x00\x00\x00|\x00\xa0\x00\xa1\x00\x01\x00|\x00\xa0\x01\xa1\x00}\x01|\x00j\x02j\x03\xa0\x04\xa1\x00\\\x02|\x00_\x03|\x00_\x05|\x00\xa0\x06|\x01|\x00j\x07\xa1\x02}\x02t\x08|\x02\x83\x01|\x00_\t|\x00\xa0\n|\x00j\x07|\x02\x17\x00|\x01\xa1\x02}\x03|\x02|\x01|\x03f\x03S\x00)\x01z\xe0\n        Do any necessary class setup immediately prior to producing SQL. This\n        is for things that can\'t necessarily be done in __init__ because we\n        might not have all the pieces in place at that time.\n        )\x0br;\x00\x00\x00\xda\x0cget_order_byr\x1e\x00\x00\x00\xda\x05where\xda\x0csplit_having\xda\x06having\xda\x10get_extra_selectr"\x00\x00\x00\xda\x04bool\xda\x10has_extra_select\xda\x0cget_group_by)\x04r)\x00\x00\x00\xda\x08order_by\xda\x0cextra_select\xda\x08group_byr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\rpre_sql_setup0\x00\x00\x00s\x0e\x00\x00\x00\x08\x06\x08\x01\x14\x01\x0e\x01\n\x01\x12\x01\n\x01z\x19SQLCompiler.pre_sql_setupc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sT\x01\x00\x00|\x00j\x00j\x01d\x01u\x00r\x08g\x00S\x00g\x00}\x03|\x00j\x00j\x01d\x02u\x01r+|\x00j\x00j\x01D\x00]\x16}\x04t\x02|\x04d\x03\x83\x02s%|\x03\xa0\x03|\x00j\x00\xa0\x04|\x04\xa1\x01\xa1\x01\x01\x00q\x14|\x03\xa0\x03|\x04\xa1\x01\x01\x00q\x14|\x01D\x00]\x13\\\x03}\x04}\x05}\x05|\x04\xa0\x05\xa1\x00}\x06|\x06D\x00]\x07}\x07|\x03\xa0\x03|\x07\xa1\x01\x01\x00q8q-|\x02D\x00]\x13\\\x02}\x04\\\x03}\x08}\t}\n|\x04j\x06sV|\nsV|\x03\xa0\x07|\x04\xa0\x08\xa1\x00\xa1\x01\x01\x00qC|\x00j\tr_|\x00j\t\xa0\x05\xa1\x00n\x01d\x04}\x0b|\x0bD\x00]\x07}\x04|\x03\xa0\x03|\x04\xa1\x01\x01\x00qcg\x00}\x0ct\n\x83\x00}\r|\x00\xa0\x0b|\x03|\x0b\xa1\x02}\x03|\x03D\x00]/}\x04|\x00\xa0\x0c|\x04\xa1\x01\\\x02}\x08}\tt\r|\x04t\x0e\x83\x02r\x8f|\x08\xa0\x0fd\x05\xa1\x01s\x8fd\x06|\x08\x16\x00}\x08t\x10|\t\x83\x01}\x0e|\x08|\x0ef\x02|\rv\x01r\xa7|\x0c\xa0\x03|\x08|\tf\x02\xa1\x01\x01\x00|\r\xa0\x11|\x08|\x0ef\x02\xa1\x01\x01\x00qx|\x0cS\x00)\x07z\xed\n        Return a list of 2-tuples of form (sql, params).\n\n        The logic of what exactly the GROUP BY clause contains is hard\n        to describe in other words than "if it passes the test suite,\n        then it is correct".\n        NT\xda\x06as_sqlr*\x00\x00\x00\xfa\x01(\xfa\x04(%s))\x12r\x1e\x00\x00\x00rF\x00\x00\x00\xda\x07hasattr\xda\x06append\xda\x0bresolve_ref\xda\x11get_group_by_cols\xda\x12contains_aggregate\xda\x06extend\xda\x16get_source_expressionsr?\x00\x00\x00\xda\x03set\xda\x11collapse_group_byr&\x00\x00\x00\xda\nisinstancer\n\x00\x00\x00\xda\nstartswithr\x1a\x00\x00\x00\xda\x03add)\x0fr)\x00\x00\x00r"\x00\x00\x00rD\x00\x00\x00\xda\x0bexpressions\xda\x04expr\xda\x01_\xda\x04cols\xda\x03col\xda\x03sql\xda\x06params\xda\x06is_refZ\x0fhaving_group_by\xda\x06result\xda\x04seen\xda\x0bparams_hashr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rC\x00\x00\x00>\x00\x00\x00sB\x00\x00\x00\x0c%\x04\x01\x04\x01\x0c\x01\x0c\x06\n\x01\x14\x01\x0c\x02\x0e\x04\x08\x01\x08\x01\x0c\x01\x02\xff\x12\x02\n\x03\x0e\x01\x02\x80\x14\x01\x08\x01\x0c\x01\x04\x01\x06\x01\x0c\x01\x08\x02\x0e\x01\x14\x01\x08\x04\x08\x01\x0c\x01\x0e\x01\x0e\x01\x02\x80\x04\x01z\x18SQLCompiler.get_group_byc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x05\x00\x00\x00\x03\x00\x00\x00s\xba\x00\x00\x00|\x00j\x00j\x01j\x02r>d\x00}\x03|\x01D\x00]\x1c}\x04t\x03|\x04d\x01d\x00\x83\x03|\x00j\x04j\x05j\x06j\x07k\x02r%t\x03|\x04d\x02d\x00\x83\x03|\x00j\x04j\x08k\x02r%|\x04}\x03\x01\x00n\x01q\t|\x03r<d\x03d\x04\x84\x00|\x01D\x00\x83\x01\x89\x02|\x03g\x01\x87\x01\x87\x02f\x02d\x05d\x06\x84\x08|\x01D\x00\x83\x01\x17\x00}\x01|\x01S\x00|\x00j\x00j\x01j\tr[d\x07d\x04\x84\x00|\x01D\x00\x83\x01\x89\x03d\x08d\x04\x84\x00\x88\x03D\x00\x83\x01\x89\x00\x87\x00\x87\x03f\x02d\td\x06\x84\x08|\x01D\x00\x83\x01}\x01|\x01S\x00)\nN\xda\x06target\xda\x05aliasc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00S\x00\x00\x00s$\x00\x00\x00h\x00|\x00]\x0e}\x01t\x00|\x01d\x00\x83\x02r\x02|\x01j\x01j\x02r\x02|\x01j\x03\x92\x02q\x02S\x00\xa9\x01rb\x00\x00\x00)\x04rK\x00\x00\x00rb\x00\x00\x00\xda\x0bprimary_keyrc\x00\x00\x00\xa9\x02r0\x00\x00\x00rX\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\t<setcomp>\xa4\x00\x00\x00s\x10\x00\x00\x00\x06\x00\x02\x01\x08\x01\x02\xfe\x06\x02\x02\xfe\x04\x01\x06\xffz0SQLCompiler.collapse_group_by.<locals>.<setcomp>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00s2\x00\x00\x00g\x00|\x00]\x15}\x01|\x01\x88\x00v\x00s\x15t\x00|\x01d\x00d\x01\x83\x03d\x01u\x01r\x02|\x01j\x01\x88\x01v\x01r\x02|\x01\x91\x02q\x02S\x00\xa9\x02rc\x00\x00\x00N)\x02\xda\x07getattrrc\x00\x00\x00rf\x00\x00\x00)\x02r?\x00\x00\x00\xda\npk_aliasesr*\x00\x00\x00r+\x00\x00\x00\xda\n<listcomp>\xa8\x00\x00\x00s\x0c\x00\x00\x00\x06\x00\x02\x01\x08\x01\x1a\x01\x02\xfe\x06\x02z1SQLCompiler.collapse_group_by.<locals>.<listcomp>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00S\x00\x00\x00s.\x00\x00\x00h\x00|\x00]\x13}\x01t\x00|\x01d\x00\x83\x02r\x02|\x01j\x01j\x02r\x02|\x01j\x01j\x03j\x04j\x05r\x02|\x01\x92\x02q\x02S\x00rd\x00\x00\x00)\x06rK\x00\x00\x00rb\x00\x00\x00re\x00\x00\x00\xda\x05model\xda\x05_meta\xda\x07managedrf\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rg\x00\x00\x00\xb5\x00\x00\x00s\x14\x00\x00\x00\x06\x00\x02\x01\x08\x01\x02\xfe\x06\x02\x02\xfe\n\x02\x02\xfe\x02\x01\x06\xffc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00S\x00\x00\x00s\x12\x00\x00\x00h\x00|\x00]\x05}\x01|\x01j\x00\x92\x02q\x02S\x00r*\x00\x00\x00)\x01rc\x00\x00\x00rf\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rg\x00\x00\x00\xb9\x00\x00\x00s\x02\x00\x00\x00\x12\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00s(\x00\x00\x00g\x00|\x00]\x10}\x01|\x01\x88\x01v\x00s\x10t\x00|\x01d\x00d\x01\x83\x03\x88\x00v\x01r\x02|\x01\x91\x02q\x02S\x00rh\x00\x00\x00)\x01ri\x00\x00\x00rf\x00\x00\x00)\x02\xda\x07aliases\xda\x03pksr*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\xba\x00\x00\x00s\x04\x00\x00\x00\x06\x00"\x01)\nr\x1f\x00\x00\x00\xda\x08features\xda\x12allows_group_by_pkri\x00\x00\x00r\x1e\x00\x00\x00rl\x00\x00\x00rm\x00\x00\x00\xda\x02pk\xda\nbase_table\xda\x1callows_group_by_selected_pks)\x05r)\x00\x00\x00rW\x00\x00\x00r?\x00\x00\x00rs\x00\x00\x00rX\x00\x00\x00r*\x00\x00\x00)\x04ro\x00\x00\x00r?\x00\x00\x00rj\x00\x00\x00rp\x00\x00\x00r+\x00\x00\x00rS\x00\x00\x00\x91\x00\x00\x00s2\x00\x00\x00\n\x05\x04\x02\x08\x01\x18\x03\x14\x01\x04\x01\x04\x01\x02\x80\x04\x04\x06\x01\x02\x01\x06\xff\x10\x04\x02\x01\x08\xff\x04\x15\n\xf1\x06\x07\x02\x01\x06\xff\x0e\x04\x0c\x01\x02\x01\x06\xff\x04\x03z\x1dSQLCompiler.collapse_group_byc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00s\x80\x01\x00\x00g\x00}\x01d\x01}\x02i\x00}\x03d\x02}\x04|\x00j\x00j\x01\xa0\x02\xa1\x00D\x00]\x18\\\x02}\x05\\\x02}\x06}\x07|\x04|\x03|\x05<\x00|\x01\xa0\x03t\x04|\x06|\x07\x83\x02|\x05f\x02\xa1\x01\x01\x00|\x04d\x037\x00}\x04q\x0e|\x00j\x00j\x05r1|\x00j\x00j\x06r1J\x00\x82\x01|\x00j\x00j\x06r:|\x00\xa0\x07\xa1\x00}\x08n\x04|\x00j\x00j\x05}\x08|\x08r^g\x00}\t|\x08D\x00]\x12}\n|\t\xa0\x03|\x04\xa1\x01\x01\x00|\x01\xa0\x03|\nd\x01f\x02\xa1\x01\x01\x00|\x04d\x037\x00}\x04qD|\x00j\x00j\x08|\td\x04\x9c\x02}\x02|\x00j\x00j\t\xa0\x02\xa1\x00D\x00]\x13\\\x02}\x05}\x0b|\x04|\x03|\x05<\x00|\x01\xa0\x03|\x0b|\x05f\x02\xa1\x01\x01\x00|\x04d\x037\x00}\x04qd|\x00j\x00j\nr\x8f|\x00\xa0\x0b|\x01\xa1\x01}\x0c|\x0c|\x02d\x05<\x00\x87\x00f\x01d\x06d\x07\x84\x08\x89\x00\x88\x00|\x02\x83\x01\x01\x00g\x00}\r|\x01D\x00]\'\\\x02}\n}\x05z\x0b|\x00j\x0c|\nd\x08d\t\x8d\x02\\\x02}\x06}\x07W\x00n\r\x04\x00t\ry\xaf\x01\x00\x01\x00\x01\x00d\n\\\x02}\x06}\x07Y\x00n\x01w\x00|\r\xa0\x03|\n|\x06|\x07f\x02|\x05f\x03\xa1\x01\x01\x00q\x93|\r|\x02|\x03f\x03S\x00)\x0ba\xa0\x02\x00\x00\n        Return three values:\n        - a list of 3-tuples of (expression, (sql, params), alias)\n        - a klass_info structure,\n        - a dictionary of annotations\n\n        The (sql, params) is what the expression will produce, and alias is the\n        "AS alias" for the column (possibly None).\n\n        The klass_info structure contains the following information:\n        - The base model of the query.\n        - Which columns for that model are present in the query (by\n          position of the select clause).\n        - related_klass_infos: [f, klass_info] to descent into\n\n        The annotations is a dictionary of {\'attname\': column position} values.\n        Nr\x01\x00\x00\x00\xe9\x01\x00\x00\x00)\x02rl\x00\x00\x00\xda\rselect_fields\xda\x13related_klass_infosc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s6\x00\x00\x00|\x00d\x01\x19\x00D\x00]\x14}\x01|\x01d\x02\x19\x00r\x14|\x00d\x03\x19\x00|\x01d\x03\x19\x00\x17\x00|\x01d\x03<\x00\x88\x00|\x01\x83\x01\x01\x00q\x04d\x00S\x00)\x04Nrx\x00\x00\x00\xda\x0bfrom_parentrw\x00\x00\x00r*\x00\x00\x00)\x02r$\x00\x00\x00\xda\x02ki\xa9\x01\xda\x16get_select_from_parentr*\x00\x00\x00r+\x00\x00\x00r|\x00\x00\x00\xf3\x00\x00\x00s\x0e\x00\x00\x00\x0c\x01\x08\x01\x06\x01\x06\x01\x08\xff\n\x02\x04\xfcz6SQLCompiler.get_select.<locals>.get_select_from_parentT\xa9\x01\xda\rselect_format)\x02\xda\x010r*\x00\x00\x00)\x0er\x1e\x00\x00\x00rE\x00\x00\x00\xda\x05itemsrL\x00\x00\x00r\x08\x00\x00\x00r"\x00\x00\x00\xda\x0cdefault_cols\xda\x13get_default_columnsrl\x00\x00\x00\xda\x11annotation_select\xda\x0eselect_related\xda\x16get_related_selectionsr&\x00\x00\x00r\x03\x00\x00\x00)\x0er)\x00\x00\x00r"\x00\x00\x00r$\x00\x00\x00\xda\x0bannotationsZ\nselect_idxrc\x00\x00\x00r\\\x00\x00\x00r]\x00\x00\x00rZ\x00\x00\x00Z\x0bselect_listr[\x00\x00\x00\xda\nannotationrx\x00\x00\x00\xda\x03retr*\x00\x00\x00r{\x00\x00\x00r+\x00\x00\x00r8\x00\x00\x00\xbf\x00\x00\x00sN\x00\x00\x00\x04\x12\x04\x01\x04\x01\x04\x01\x18\x01\x08\x01\x14\x01\n\x01\x14\x01\x08\x01\n\x01\x08\x04\x04\x01\x04\x01\x08\x01\n\x01\x0e\x01\n\x01\x06\x02\x02\x01\x06\xfe\x14\x04\x08\x01\x0e\x01\n\x01\x08\x02\n\x01\x08\x01\x0c\x02\x08\x06\x04\x02\x0c\x01\x02\x01\x16\x01\x0c\x01\x0c\x02\x02\xfe\x16\x03\n\x01z\x16SQLCompiler.get_selectc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\t\x00\x00\x00C\x00\x00\x00s8\x03\x00\x00|\x00j\x00j\x01r\t|\x00j\x00j\x01}\x01n$|\x00j\x00j\x02s\x12|\x00j\x00j\x03}\x01n\x1b|\x00j\x00j\x03r\x1b|\x00j\x00j\x03}\x01n\x12|\x00j\x00\xa0\x04\xa1\x00j\x05r+|\x00j\x00\xa0\x04\xa1\x00j\x05}\x01|\x01|\x00_\x06n\x02g\x00}\x01|\x00j\x00j\x07r8t\x08d\x01\x19\x00\\\x02}\x02}\x03n\x06t\x08d\x02\x19\x00\\\x02}\x02}\x03g\x00}\x04|\x01D\x00]\xd0}\x05t\t|\x05d\x03\x83\x02rbt\n|\x05t\x0b\x83\x02sR|\x05\xa0\x0c\xa1\x00}\x05|\x00j\x00j\x07sZ|\x05\xa0\r\xa1\x00\x01\x00|\x04\xa0\x0e|\x05d\x04f\x02\xa1\x01\x01\x00qB|\x05d\x05k\x02rq|\x04\xa0\x0et\x0bt\x0f\x83\x00\x83\x01d\x04f\x02\xa1\x01\x01\x00qBt\x10|\x05|\x02\x83\x02\\\x02}\x06}\x07|\x07d\x02k\x02}\x08|\x06|\x00j\x00j\x11v\x00r\x95|\x04\xa0\x0et\x0bt\x12|\x06|\x00j\x00j\x11|\x06\x19\x00\x83\x02|\x08d\x06\x8d\x02d\x07f\x02\xa1\x01\x01\x00qB|\x06|\x00j\x00j\x13v\x00r\xab|\x04\xa0\x0et\x0b|\x00j\x00j\x13|\x06\x19\x00|\x08d\x06\x8d\x02d\x04f\x02\xa1\x01\x01\x00qBd\x08|\x05v\x00r\xcd|\x06\xa0\x14d\x08d\t\xa1\x02\\\x02}\t}\x06|\x04\xa0\x0et\x0bt\x15d\n|\x00\xa0\x16|\t\xa1\x01|\x06f\x02\x16\x00g\x00\x83\x02|\x08d\x06\x8d\x02d\x04f\x02\xa1\x01\x01\x00qB|\x00j\x00j\x17r\xd7|\x06|\x00j\x00j\x17v\x01r\xe6|\x04\xa0\x18|\x00j\x19|\x05|\x00j\x00\xa0\x04\xa1\x00|\x02d\x0b\x8d\x03\xa1\x01\x01\x00qB|\x06|\x00j\x00j\x1av\x01r\xfe|\x04\xa0\x0et\x0bt\x15|\x00j\x00j\x1b|\x06\x19\x00\x8e\x00|\x08d\x06\x8d\x02d\x04f\x02\xa1\x01\x01\x00qB|\x04\xa0\x0et\x0bt\x12|\x06t\x15|\x00j\x00j\x1b|\x06\x19\x00\x8e\x00\x83\x02|\x08d\x06\x8d\x02d\x07f\x02\xa1\x01\x01\x00qBg\x00}\nt\x1c\x83\x00}\x0b|\x04D\x00]\x7f\\\x02}\x0c}\r|\x0cj\x1d|\x00j\x00d\x07d\x0cd\r\x8d\x03}\x0e|\x00j\x00j\x1e\x90\x01rj|\x0e\xa0\x1f\xa1\x00d\x0e\x19\x00}\x0ft |\x00j!\x83\x01D\x00].\\\x02}\x10\\\x03}\x11}\x12}\x13|\r\x90\x01rK|\x13|\x0fj"k\x02\x90\x01rK|\x0fj#}\x0fn\x05|\x13\x90\x01rP\x90\x01q7|\x0f|\x11k\x02\x90\x01rd|\x0e\xa0$t\x15d\x0f|\x10d\t\x17\x00\x16\x00d\x10\x83\x02g\x01\xa1\x01\x01\x00\x01\x00n\x06\x90\x01q7t%d\x11\x83\x01\x82\x01|\x00\xa0&|\x0e\xa1\x01\\\x02}\x14}\x15|\x00j\'\xa0(|\x14\xa1\x01\xa0)d\t\xa1\x01}\x16t*|\x15\x83\x01}\x17|\x16|\x17f\x02|\x0bv\x00\x90\x01r\x87\x90\x01q\x1a|\x0b\xa0+|\x16|\x17f\x02\xa1\x01\x01\x00|\n\xa0\x0e|\x0e|\x14|\x15|\rf\x03f\x02\xa1\x01\x01\x00\x90\x01q\x1a|\nS\x00)\x12a+\x01\x00\x00\n        Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the\n        ORDER BY clause.\n\n        The order_by clause can alter the select clause (for example it\n        can add aliases to clauses that do not yet have one, or it can\n        add totally new select clauses).\n        \xda\x03ASC\xda\x04DESC\xda\x12resolve_expressionF\xfa\x01?\xa9\x01\xda\ndescendingT\xda\x01.rv\x00\x00\x00\xfa\x05%s.%s)\x01\xda\rdefault_orderN)\x02\xda\x0ballow_joins\xda\x05reuser\x01\x00\x00\x00z\x02%dr*\x00\x00\x00z:ORDER BY term does not match any column in the result set.),r\x1e\x00\x00\x00\xda\x0eextra_order_by\xda\x10default_orderingrD\x00\x00\x00\xda\x08get_meta\xda\x08orderingr(\x00\x00\x00\xda\x11standard_orderingr\x11\x00\x00\x00rK\x00\x00\x00rT\x00\x00\x00r\x06\x00\x00\x00\xda\x03asc\xda\x10reverse_orderingrL\x00\x00\x00r\x07\x00\x00\x00r\x14\x00\x00\x00r\x83\x00\x00\x00r\t\x00\x00\x00r\x86\x00\x00\x00\xda\x05splitr\x08\x00\x00\x00\xda\x17quote_name_unless_alias\xda\x06_extrarP\x00\x00\x00\xda\x12find_ordering_namerE\x00\x00\x00\xda\x05extrarR\x00\x00\x00r\x8b\x00\x00\x00\xda\ncombinatorrQ\x00\x00\x00\xda\tenumerater"\x00\x00\x00\xda\x04refs\xda\x06source\xda\x16set_source_expressionsr\x16\x00\x00\x00r&\x00\x00\x00r\'\x00\x00\x00\xda\x06search\xda\x05groupr\x1a\x00\x00\x00rV\x00\x00\x00)\x18r)\x00\x00\x00r\x97\x00\x00\x00r\x99\x00\x00\x00\xda\x04descrD\x00\x00\x00\xda\x05fieldr[\x00\x00\x00\xda\x05orderr\x8e\x00\x00\x00\xda\x05tabler_\x00\x00\x00r`\x00\x00\x00rX\x00\x00\x00r^\x00\x00\x00\xda\x08resolved\xda\x03src\xda\x03idxZ\x08sel_exprrY\x00\x00\x00\xda\tcol_aliasr\\\x00\x00\x00r]\x00\x00\x00\xda\x10without_orderingra\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r<\x00\x00\x00\x05\x01\x00\x00s\xac\x00\x00\x00\x08\t\n\x01\x08\x01\n\x01\x08\x01\n\x01\x0c\x01\x0c\x01\x08\x01\x04\x02\x08\x01\x0e\x01\x0c\x02\x04\x02\x08\x01\n\x01\n\x01\x08\x01\x08\x01\x08\x01\x0e\x01\x02\x01\x08\x01\x14\x01\x02\x01\x0e\x02\x08\x01\x0c\x02\x04\x02\x18\x01\x02\x01\x06\xfe\x02\x03\x0c\x01\x04\x02\x12\x01\x02\x01\x06\xfe\x02\x03\x08\x02\x10\x03\x04\x01\x02\x01\x16\x01\x02\x01\x04\xfe\x02\x03\x06\xfc\x02\x05\x14\x02\x08\x03\x0c\x01\n\xff\x0c\x03\x04\x01\x16\x01\x02\x01\x08\xfe\x04\x04\x1c\x01\x02\x01\x08\xfe\x04\x03\x06\x01\x0c\x02\x12\x01\n\x01\x0c\x01\x18\x04\x12\x01\x08\x01\x06\x01\x04\x01\n\x01\x1a\x01\x04\x01\x04\xfe\x08\x04\x0e\x01\x12\x05\x08\x01\x0e\x01\x04\x01\x0e\x01\x18\x01\x04\x01z\x18SQLCompiler.get_order_byc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00g\x00}\x03|\x00j\x00j\x01r6|\x00j\x00j\x02s6d\x01d\x02\x84\x00|\x02D\x00\x83\x01}\x04|\x01D\x00]"\\\x02}\x05\\\x03}\x06}\x07}\x08|\x00j\x03\xa0\x04|\x06\xa1\x01\xa0\x05d\x03\xa1\x01}\t|\x08s5|\t|\x07f\x02|\x04v\x01r5|\x03\xa0\x06|\x05|\t|\x07f\x02d\x00f\x03\xa1\x01\x01\x00q\x13|\x03S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00\xf3\x14\x00\x00\x00g\x00|\x00]\x06}\x01|\x01d\x00\x19\x00\x91\x02q\x02S\x00)\x01rv\x00\x00\x00r*\x00\x00\x00\xa9\x02r0\x00\x00\x00\xda\x01tr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00x\x01\x00\x00\xf3\x02\x00\x00\x00\x14\x00z0SQLCompiler.get_extra_select.<locals>.<listcomp>rv\x00\x00\x00)\x07r\x1e\x00\x00\x00\xda\x08distinct\xda\x0fdistinct_fieldsr\'\x00\x00\x00r\xa5\x00\x00\x00r\xa6\x00\x00\x00rL\x00\x00\x00)\nr)\x00\x00\x00rD\x00\x00\x00r"\x00\x00\x00rE\x00\x00\x00Z\nselect_sqlrX\x00\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r^\x00\x00\x00r\xaf\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r@\x00\x00\x00u\x01\x00\x00s\x12\x00\x00\x00\x04\x01\x10\x01\x0e\x01\x12\x01\x12\x01\x10\x01\x14\x01\x02\x80\x04\x01z\x1cSQLCompiler.get_extra_selectc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00C\x00\x00\x00sz\x00\x00\x00|\x01|\x00j\x00v\x00r\n|\x00j\x00|\x01\x19\x00S\x00|\x01|\x00j\x01j\x02v\x00r\x16|\x01|\x00j\x01j\x03v\x01s(|\x01|\x00j\x01j\x04v\x00s(|\x01|\x00j\x01j\x05v\x00r/|\x01|\x00j\x01j\x03v\x01r/|\x01|\x00j\x00|\x01<\x00|\x01S\x00|\x00j\x06j\x07\xa0\x08|\x01\xa1\x01}\x02|\x02|\x00j\x00|\x01<\x00|\x02S\x00)\x01z\xdb\n        A wrapper around connection.ops.quote_name that doesn\'t quote aliases\n        for table names. This avoids problems with some SQL dialects that treat\n        quoted strings specially (e.g. PostgreSQL).\n        )\tr!\x00\x00\x00r\x1e\x00\x00\x00r6\x00\x00\x00\xda\ttable_maprE\x00\x00\x00\xda\x10external_aliasesr\x1f\x00\x00\x00\xda\x03ops\xda\nquote_name)\x03r)\x00\x00\x00\xda\x04name\xda\x01rr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x9c\x00\x00\x00\x7f\x01\x00\x00s\x14\x00\x00\x00\n\x06\n\x01\x18\x01\x0c\x01\x18\x01\n\x01\x04\x01\x0e\x01\n\x01\x04\x01z#SQLCompiler.quote_name_unless_aliasFc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00sh\x00\x00\x00t\x00|\x01d\x01|\x00j\x01j\x02\x17\x00d\x00\x83\x03}\x03|\x03r\x15|\x03|\x00|\x00j\x01\x83\x02\\\x02}\x04}\x05n\t|\x01\xa0\x03|\x00|\x00j\x01\xa1\x02\\\x02}\x04}\x05|\x02t\x04u\x00s(|\x02r0|\x00j\x05j\x06s0|\x01j\x07\xa0\x08|\x00|\x04|\x05\xa1\x03S\x00|\x04|\x05f\x02S\x00)\x02N\xda\x03as_)\tri\x00\x00\x00r\x1f\x00\x00\x00\xda\x06vendorrH\x00\x00\x00\xda\x05FORCEr\x1e\x00\x00\x00\xda\x08subquery\xda\x0coutput_fieldr~\x00\x00\x00)\x06r)\x00\x00\x00\xda\x04noder~\x00\x00\x00Z\x0bvendor_implr\\\x00\x00\x00r]\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r&\x00\x00\x00\x90\x01\x00\x00s\x0e\x00\x00\x00\x14\x01\x04\x01\x12\x01\x12\x02\x14\x01\x10\x01\x08\x01z\x13SQLCompiler.compilec\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00s\x98\x01\x00\x00\x88\x01j\x00j\x01}\x03\x87\x01f\x01d\x01d\x02\x84\x08\x88\x01j\x02j\x03D\x00\x83\x01}\x04|\x03j\x04s0t\x05\x88\x01j\x02j\x03|\x04\x83\x02D\x00]\x16\\\x02}\x05}\x06|\x05j\x06s#|\x05j\x07r\'t\x08d\x03\x83\x01\x82\x01|\x06\xa0\t\xa1\x00r/t\x08d\x04\x83\x01\x82\x01q\x19d\x05}\x07|\x04D\x00]U}\x06z?|\x06j\x02j\nsR\x88\x01j\x02j\nrR|\x06j\x02\xa0\x0bg\x00\x88\x01j\x02j\x0c\xa2\x01\x88\x01j\x02j\n\xa2\x01\x88\x01j\x02j\r\xa2\x01R\x00\xa1\x01\x01\x00|\x06\xa0\x0e\xa1\x00\\\x02}\x08}\t|\x06j\x02j\x0frm|\x03j\x10sed\x06\xa0\x11|\x08\xa1\x01}\x08n\x08|\x03j\x04smd\x07\xa0\x11|\x08\xa1\x01}\x08|\x07|\x08|\tf\x02f\x017\x00}\x07W\x00q4\x04\x00t\x12y\x89\x01\x00\x01\x00\x01\x00|\x01d\x08k\x02s\x86|\x01d\tk\x02r\x88|\x07r\x88Y\x00q4\x82\x00w\x00|\x07s\x8et\x12\x82\x01\x88\x01j\x00j\x13j\x14|\x01\x19\x00}\n|\x02r\x9f|\x01d\x08k\x02r\x9f|\nd\n7\x00}\n|\x03j\x04r\xa4d\x07n\x01d\x0b\x89\x00t\x05\x87\x00f\x01d\x0cd\r\x84\x08|\x07D\x00\x83\x01\x8e\x00\\\x02}\x0b}\x0cd\x0e\xa0\x11|\n\xa1\x01\xa0\x15|\x0b\xa1\x01g\x01}\rg\x00}\x0e|\x0cD\x00]\x07}\x0f|\x0e\xa0\x16|\x0f\xa1\x01\x01\x00q\xc0|\r|\x0ef\x02S\x00)\x0fNc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00s$\x00\x00\x00g\x00|\x00]\x0e}\x01|\x01\xa0\x00\xa1\x00s\x02|\x01\xa0\x01\x88\x00j\x02\x88\x00j\x03\xa1\x02\x91\x02q\x02S\x00r*\x00\x00\x00)\x04\xda\x08is_empty\xda\x0cget_compilerr \x00\x00\x00r\x1f\x00\x00\x00)\x02r0\x00\x00\x00r\x1e\x00\x00\x00r2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\x9c\x01\x00\x00s\n\x00\x00\x00\x06\x00\x08\x02\x02\xfe\x0e\x01\x06\xffz2SQLCompiler.get_combinator_sql.<locals>.<listcomp>z>LIMIT/OFFSET not allowed in subqueries of compound statements.z:ORDER BY not allowed in subqueries of compound statements.r*\x00\x00\x00z\x12SELECT * FROM ({})z\x04({})\xda\x05union\xda\ndifferencez\x04 ALLz\x02{}c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x003\x00\x00\x00s"\x00\x00\x00\x81\x00|\x00]\x0c\\\x02}\x01}\x02\x88\x00\xa0\x00|\x01\xa1\x01|\x02f\x02V\x00\x01\x00q\x02d\x00S\x00\xa9\x01N)\x01\xda\x06format)\x03r0\x00\x00\x00r\\\x00\x00\x00\xda\x04args)\x01\xda\x06bracesr*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xc9\x01\x00\x00s\x04\x00\x00\x00\x02\x80 \x00z1SQLCompiler.get_combinator_sql.<locals>.<genexpr>z\x04 {} )\x17r\x1f\x00\x00\x00rq\x00\x00\x00r\x1e\x00\x00\x00\xda\x10combined_queries\xda%supports_slicing_ordering_in_compound\xda\x03zip\xda\x08low_mark\xda\thigh_markr\x16\x00\x00\x00r<\x00\x00\x00\xda\rvalues_select\xda\nset_valuesrE\x00\x00\x00r\x83\x00\x00\x00rH\x00\x00\x00r\xa0\x00\x00\x00\xda supports_parentheses_in_compoundr\xc7\x00\x00\x00r\x03\x00\x00\x00r\xb8\x00\x00\x00\xda\rset_operators\xda\x04joinrP\x00\x00\x00)\x10r)\x00\x00\x00r\xa0\x00\x00\x00r5\x00\x00\x00rq\x00\x00\x00\xda\tcompilersr\x1e\x00\x00\x00\xda\x08compiler\xda\x05partsZ\x08part_sqlZ\tpart_argsZ\x0ecombinator_sql\xda\tsql_partsZ\nargs_partsr_\x00\x00\x00r]\x00\x00\x00\xda\x04partr*\x00\x00\x00)\x02r\xc9\x00\x00\x00r)\x00\x00\x00r+\x00\x00\x00\xda\x12get_combinator_sql\x9a\x01\x00\x00s\\\x00\x00\x00\x08\x01\n\x01\x06\x02\x06\xfe\x06\x04\x16\x01\x0c\x01\x08\x01\x08\x01\x08\x01\x02\xff\x04\x02\x08\x01\x02\x01\x10\x04\x08\x01\x06\x01\x02\xff\x06\x02\x02\xfe\x06\x03\x08\xfd\x0c\x05\x08\x01\x06\x03\x0c\x01\x06\x03\n\x01\x12\x01\x0c\x01\x14\x03\x04\x01\x02\x01\x02\xfb\x04\x06\x04\x01\x0e\x01\x0c\x01\x08\x01\x0e\x01\x1a\x01\x12\x01\x04\x01\x08\x01\x0c\x01\x08\x01z\x1eSQLCompiler.get_combinator_sqlTc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,\x00\x00\x00\t\x00\x00\x00C\x00\x00\x00s\x1c\x05\x00\x00|\x00j\x00j\x01\xa0\x02\xa1\x00}\x03\x90\x02z\x7f|\x00\xa0\x03\xa1\x00\\\x03}\x04}\x05}\x06d\x01}\x07|\x01o\x1c|\x00j\x00j\x04d\x01u\x01p\x1c|\x00j\x00j\x05}\x08|\x00j\x00j\x06}\t|\x00j\x07j\x08}\n|\trBt\t|\nd\x02\xa0\n|\t\xa1\x01\x83\x02s6t\x0bd\x03\xa0\n|\t\xa1\x01\x83\x01\x82\x01|\x00\xa0\x0c|\t|\x00j\x00j\r\xa1\x02\\\x02}\x0b}\x0c\x90\x01ng|\x00\xa0\x0e\xa1\x00\\\x02}\r}\x0e|\x00\xa0\x0f\xa1\x00\\\x02}\x0f}\x10|\x00j\x10d\x01u\x01rY|\x00\xa0\x11|\x00j\x10\xa1\x01n\x03d\x04g\x00f\x02\\\x02}\x11}\x12|\x00j\x12d\x01u\x01rj|\x00\xa0\x11|\x00j\x12\xa1\x01n\x03d\x04g\x00f\x02\\\x02}\x13}\x14d\x05g\x01}\x0bg\x00}\x0c|\x00j\x00j\x13r\x8b|\x00j\x07j\x14\xa0\x15|\r|\x0e\xa1\x02\\\x02}\x15}\x0e|\x0b|\x157\x00}\x0b|\x0c|\x0e7\x00}\x0cg\x00}\x16d\x06}\x17|\x00j\x16|\x04\x17\x00D\x00]-\\\x03}\x18\\\x02}\x19}\x1a}\x1b|\x1br\xa9d\x07|\x19|\x00j\x07j\x14\xa0\x17|\x1b\xa1\x01f\x02\x16\x00}\x19n\x0e|\x02r\xb7d\x07|\x19d\x08|\x17\x16\x00f\x02\x16\x00}\x19|\x17d\x067\x00}\x17|\x0c\xa0\x18|\x1a\xa1\x01\x01\x00|\x16\xa0\x19|\x19\xa1\x01\x01\x00q\x94|\x0bd\t\xa0\x1a|\x16\xa1\x01d\ng\x02|\x0f\xa2\x017\x00}\x0b|\x0c\xa0\x18|\x10\xa1\x01\x01\x00|\x00j\x00j\x1b\x90\x01r0|\x00j\x07j\x08j\x1c\x90\x01r0|\x00j\x07\xa0\x1d\xa1\x00r\xe6t\x1ed\x0b\x83\x01\x82\x01|\x08r\xf1|\x00j\x07j\x08j\x1fs\xf1t\x0bd\x0c\x83\x01\x82\x01|\x00j\x00j }\x1c|\x00j\x00j!}\x1d|\x00j\x00j"}\x1e|\x1c\x90\x01r\n|\x00j\x07j\x08j#\x90\x01s\nt\x0bd\r\x83\x01\x82\x01|\x1d\x90\x01r\x17|\x00j\x07j\x08j$\x90\x01s\x17t\x0bd\x0e\x83\x01\x82\x01|\x1e\x90\x01r$|\x00j\x07j\x08j%\x90\x01s$t\x0bd\x0f\x83\x01\x82\x01|\x00j\x07j\x14j&|\x1c|\x1d|\x00\xa0\'\xa1\x00d\x10\x8d\x03}\x07|\x07\x90\x01r>|\x00j\x07j\x08j(\x90\x01r>|\x0b\xa0\x19|\x07\xa1\x01\x01\x00|\x11\x90\x01rM|\x0b\xa0\x19d\x11|\x11\x16\x00\xa1\x01\x01\x00|\x0c\xa0\x18|\x12\xa1\x01\x01\x00g\x00}\x1f|\x06D\x00]\x0f\\\x02} }!|\x1f\xa0\x19| \xa1\x01\x01\x00|\x0c\xa0\x18|!\xa1\x01\x01\x00\x90\x01qQ|\x1f\x90\x01r\x9a|\r\x90\x01rkt)d\x12\x83\x01\x82\x01|\x05\x90\x01ps|\x00j\x07j\x14\xa0*\xa1\x00}\x05|\x0b\xa0\x19d\x13d\t\xa0\x1a|\x1f\xa1\x01\x16\x00\xa1\x01\x01\x00|\x00j+\x90\x01r\x9at,j-d\x14|\x00j\x00j.j/d\t\xa0\x1ad\x15d\x16\x84\x00|\x00j+D\x00\x83\x01\xa1\x01f\x02\x16\x00t0d\x17d\x18\x8d\x03\x01\x00|\x13\x90\x01r\xa9|\x0b\xa0\x19d\x19|\x13\x16\x00\xa1\x01\x01\x00|\x0c\xa0\x18|\x14\xa1\x01\x01\x00|\x00j\x00j1\x90\x01r\xc1|\x0b\xa02d\x1a|\x00j\x07j\x14j3|\x00j\x00j4f\x01i\x00|\x00j\x00j5\xa4\x01\x8e\x01\xa1\x02\x01\x00|\x05\x90\x01r\xe5g\x00}"|\x05D\x00]\x12\\\x02}\x18\\\x03}#}$}\x18|"\xa0\x19|#\xa1\x01\x01\x00|\x0c\xa0\x18|$\xa1\x01\x01\x00\x90\x01q\xc8|\x0b\xa0\x19d\x1bd\t\xa0\x1a|"\xa1\x01\x16\x00\xa1\x01\x01\x00|\x08\x90\x01r\xf7|\x0b\xa0\x19|\x00j\x07j\x14\xa06|\x00j\x00j\x05|\x00j\x00j\x04\xa1\x02\xa1\x01\x01\x00|\x07\x90\x02r\x05|\x00j\x07j\x08j(\x90\x02s\x05|\x0b\xa0\x19|\x07\xa1\x01\x01\x00|\x00j\x00j7\x90\x02rw|\x04\x90\x02rwg\x00}%g\x00}&t8|\x00j\x16d\x06d\x1c\x8d\x02D\x00]E\\\x02}\'\\\x03}(}\x18}\x1b|\x1b\x90\x02s)|\x02\x90\x02r)d\x1d|\'\x16\x00}\x1b|\x1b\x90\x02rA|%\xa0\x19d\x1e|\x00j\x07j\x14\xa0\x17d\x1f\xa1\x01|\x00j\x07j\x14\xa0\x17|\x1b\xa1\x01f\x02\x16\x00\xa1\x01\x01\x00\x90\x02q\x18|(\xa09|(j:d\x1fi\x01\xa1\x01})|)\xa0;|\x00|\x00j\x07\xa1\x02\\\x02}*}+|%\xa0\x19|*\xa1\x01\x01\x00|&\xa0\x18|+\xa1\x01\x01\x00\x90\x02q\x18d d\t\xa0\x1a|%\xa1\x01d!\xa0\x1a|\x0b\xa1\x01f\x02\x16\x00t<|&|\x0c\x17\x00\x83\x01f\x02W\x00|\x00j\x00\xa0=|\x03\xa1\x01\x01\x00S\x00d!\xa0\x1a|\x0b\xa1\x01t<|\x0c\x83\x01f\x02W\x00|\x00j\x00\xa0=|\x03\xa1\x01\x01\x00S\x00|\x00j\x00\xa0=|\x03\xa1\x01\x01\x00w\x00)"z\xcd\n        Create the SQL for this query. Return the SQL string and list of\n        parameters.\n\n        If \'with_limits\' is False, any limit/offset information is not included\n        in the query.\n        Nz\x12supports_select_{}z-{} is not supported on this database backend.\xda\x00\xda\x06SELECTrv\x00\x00\x00z\x08%s AS %sz\x05Col%d\xfa\x02, \xda\x04FROMz:select_for_update cannot be used outside of a transaction.zNLIMIT/OFFSET is not supported with select_for_update on this database backend.z1NOWAIT is not supported on this database backend.z6SKIP LOCKED is not supported on this database backend.z8FOR UPDATE OF is not supported on this database backend.)\x03\xda\x06nowait\xda\x0bskip_locked\xda\x02of\xfa\x08WHERE %sz1annotate() + distinct(fields) is not implemented.z\x0bGROUP BY %sza%s QuerySet won\'t use Meta.ordering in Django 3.1. Add .order_by(%s) to retain the current query.c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00\xf3\x18\x00\x00\x00\x81\x00|\x00]\x07}\x01t\x00|\x01\x83\x01V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00)\x01\xda\x04repr\xa9\x02r0\x00\x00\x00\xda\x01fr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x006\x02\x00\x00\xf3\x04\x00\x00\x00\x02\x80\x16\x00z%SQLCompiler.as_sql.<locals>.<genexpr>\xe9\x04\x00\x00\x00)\x01\xda\nstacklevelz\tHAVING %sr\x01\x00\x00\x00z\x0bORDER BY %s)\x01\xda\x05startz\x05col%dr\x90\x00\x00\x00r\xbf\x00\x00\x00\xfa\x1cSELECT %s FROM (%s) subquery\xfa\x01 )>r\x1e\x00\x00\x00r/\x00\x00\x00\xda\x04copyrG\x00\x00\x00r\xce\x00\x00\x00r\xcd\x00\x00\x00r\xa0\x00\x00\x00r\x1f\x00\x00\x00rq\x00\x00\x00ri\x00\x00\x00r\xc7\x00\x00\x00r\x17\x00\x00\x00r\xd9\x00\x00\x00\xda\x0ecombinator_all\xda\x0cget_distinct\xda\x0fget_from_clauser=\x00\x00\x00r&\x00\x00\x00r?\x00\x00\x00r\xb4\x00\x00\x00r\xb8\x00\x00\x00\xda\x0cdistinct_sqlr"\x00\x00\x00r\xb9\x00\x00\x00rP\x00\x00\x00rL\x00\x00\x00r\xd3\x00\x00\x00\xda\x11select_for_update\xda\x15has_select_for_update\xda\x0eget_autocommitr\x15\x00\x00\x00\xda%supports_select_for_update_with_limit\xda\x18select_for_update_nowait\xda\x1dselect_for_update_skip_locked\xda\x14select_for_update_of\xda\x1chas_select_for_update_nowait\xda!has_select_for_update_skip_locked\xda\x18has_select_for_update_of\xda\x0efor_update_sql\xda"get_select_for_update_of_arguments\xda\x15for_update_after_from\xda\x13NotImplementedError\xda\x11force_no_orderingr(\x00\x00\x00\xda\x08warnings\xda\x04warnrl\x00\x00\x00\xda\x08__name__r\x19\x00\x00\x00\xda\rexplain_query\xda\x06insert\xda\x14explain_query_prefix\xda\x0eexplain_format\xda\x0fexplain_options\xda\x10limit_offset_sqlr\xbf\x00\x00\x00r\xa1\x00\x00\x00\xda\x0frelabeled_clonerc\x00\x00\x00rH\x00\x00\x00\xda\x05tuple\xda\x0freset_refcounts),r)\x00\x00\x00Z\x0bwith_limits\xda\x10with_col_aliases\xda\x10refcounts_beforerE\x00\x00\x00rD\x00\x00\x00rF\x00\x00\x00Z\x0ffor_update_partZ\x11with_limit_offsetr\xa0\x00\x00\x00rq\x00\x00\x00r_\x00\x00\x00r]\x00\x00\x00r\xb5\x00\x00\x00Z\x0fdistinct_params\xda\x05from_\xda\x08f_paramsr=\x00\x00\x00Z\x08w_paramsr?\x00\x00\x00Z\x08h_paramsZ\x0fdistinct_resultZ\x08out_cols\xda\x07col_idxrY\x00\x00\x00Z\x05s_sqlZ\x08s_paramsrc\x00\x00\x00r\xde\x00\x00\x00r\xdf\x00\x00\x00r\xe0\x00\x00\x00\xda\x08groupingZ\x05g_sqlZ\x08g_paramsr\x97\x00\x00\x00Z\x05o_sqlZ\x08o_paramsZ\x0bsub_selects\xda\nsub_params\xda\x05indexr"\x00\x00\x00Z\x0cselect_cloneZ\tsubselect\xda\tsubparamsr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rH\x00\x00\x00\xd0\x01\x00\x00s\xf8\x00\x00\x00\x0c\x08\x04\x01\x0e\x01\x04\x01\x18\x02\x08\x01\x08\x01\x04\x01\x10\x01\x0e\x01\x18\x01\x0c\x02\x0c\x03"\x01"\x01\x06\x01\x04\x01\x08\x02\x08\x01\x02\x01\x02\x01\x08\xfe\x08\x04\x08\x01\x04\x02\x04\x01\x18\x01\x04\x01\x18\x01\x04\x01\x10\x01\x08\x01\n\x01\x0c\x01\x16\x02\n\x01\x16\x02\n\x01\x08\x01\x0e\x02\x02\x01\x02\x01\x04\xff\x08\x04\x08\x01\x08\x01\x12\x04\x08\x01\x12\x01\x08\x01\x12\x01\x08\x01\x08\x01\x02\x01\x02\x01\x06\x01\x06\xfd\x12\x06\n\x01\x06\x02\x0e\x01\n\x01\x04\x02\x0c\x01\n\x01\x0e\x01\x06\x01\x06\x01\x08\x01\x12\x01\x14\x01\x08\x01\x04\x03\x02\x01\x08\x02\x14\x01\x02\xfe\x02\xff\x02\x05\x02\x01\x06\xf9\x06\t\x0e\x01\n\x01\n\x02\x0e\x01\x06\x01\x04\xff\x06\x02\x08\xfe\x06\x05\x04\x01\x12\x01\n\x01\x0e\x01\x14\x01\x06\x02\x1e\x01\x12\x02\n\x01\x10\x02\x04\x07\x04\x01\x1c\x01\x0c\x01\x08\x01\x06\x01\x06\x01\x0c\x01\x0c\x01\x0c\xfe\x10\x05\x12\x01\n\x01\x0e\x01\x02\x01\x08\x01\x08\x01\x04\xfe\n\x03\x04\xfd\x0e\x08\x12\xfd\x1c\x03z\x12SQLCompiler.as_sqlNc\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\xbe\x00\x00\x00g\x00}\x04|\x02d\x01u\x00r\x0b|\x00j\x00\xa0\x01\xa1\x00}\x02|\x00\xa0\x02\xa1\x00}\x05|\x01p\x15|\x00j\x00\xa0\x03\xa1\x00}\x01d\x01|\x01i\x01}\x06|\x02j\x04D\x00]?}\x07|\x07j\x05j\x06j\x07}\x08|\x08|\x02j\x05k\x02r+d\x01}\x08|\x03r;|\x08d\x01u\x01r;t\x08|\x03j\x06j\x07|\x08j\x06j\x07\x83\x02r;q\x1d|\x07j\x05|\x05v\x00rI|\x07j\t|\x05|\x07j\x05\x19\x00v\x01rIq\x1d|\x00j\x00\xa0\n|\x02|\x08|\x01|\x06\xa1\x04}\t|\x07\xa0\x0b|\t\xa1\x01}\n|\x04\xa0\x0c|\n\xa1\x01\x01\x00q\x1d|\x04S\x00)\x02aT\x02\x00\x00\n        Compute the default columns for selecting every field in the base\n        model. Will sometimes be called to pull in related models (e.g. via\n        select_related), in which case "opts" and "start_alias" will be given\n        to provide a starting point for the traversal.\n\n        Return a list of strings, quoted appropriately for use in SQL\n        directly, as well as a set of aliases used in the select statement (if\n        \'as_pairs\' is True, return a list of (alias, col_name) pairs instead\n        of strings as the first component and None as the second component).\n        N)\rr\x1e\x00\x00\x00r\x96\x00\x00\x00\xda\x13deferred_to_columnsr7\x00\x00\x00\xda\x0fconcrete_fieldsrl\x00\x00\x00rm\x00\x00\x00\xda\x0econcrete_model\xda\nissubclass\xda\x07attname\xda\x11join_parent_model\xda\x07get_colrL\x00\x00\x00)\x0br)\x00\x00\x00\xda\x0bstart_alias\xda\x04optsry\x00\x00\x00r_\x00\x00\x00\xda\tonly_load\xda\x0bseen_modelsr\xa8\x00\x00\x00rl\x00\x00\x00rc\x00\x00\x00\xda\x06columnr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x82\x00\x00\x00r\x02\x00\x00s,\x00\x00\x00\x04\x0c\x08\x01\n\x01\x08\x01\x0e\x01\x08\x04\n\x02\n\x01\n\x03\x04\x01\x0e\x01\x0c\x01\x04\xff\x02\x07\x1a\x01\x02\x01\x0c\x01\x02\x01\x04\xff\n\x02\x0c\x01\x04\x01z\x1fSQLCompiler.get_default_columnsc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x08\x00\x00\x00C\x00\x00\x00s\xae\x00\x00\x00g\x00}\x01g\x00}\x02|\x00j\x00\xa0\x01\xa1\x00}\x03|\x00j\x00j\x02D\x00]E}\x04|\x04\xa0\x03t\x04\xa1\x01}\x05|\x00\xa0\x05|\x05|\x03d\x01\xa1\x03\\\x07}\x06}\x07}\x08}\t}\n}\x06}\x0b|\x00j\x00\xa0\x06|\x07|\t|\n\xa1\x03\\\x03}\x07}\x08}\x06|\x07D\x00]"}\x0c|\x04|\x00j\x00j\x07v\x00r=|\x01\xa0\x08|\x04\xa1\x01\x01\x00q/|\x00\xa0\t|\x0b|\x0c|\x08\x83\x02\xa1\x01\\\x02}\r}\x0e|\x01\xa0\x08|\r\xa1\x01\x01\x00|\x02\xa0\x08|\x0e\xa1\x01\x01\x00q/q\r|\x01|\x02f\x02S\x00)\x02z\xce\n        Return a quoted list of fields to use in DISTINCT ON part of the query.\n\n        This method can alter the tables in the query, and thus it must be\n        called before get_from_clause().\n        N)\nr\x1e\x00\x00\x00r\x96\x00\x00\x00r\xb5\x00\x00\x00r\x9b\x00\x00\x00r\x05\x00\x00\x00\xda\x0c_setup_joins\xda\ntrim_joinsr\x83\x00\x00\x00rL\x00\x00\x00r&\x00\x00\x00)\x0fr)\x00\x00\x00r_\x00\x00\x00r]\x00\x00\x00r\x1d\x01\x00\x00r\xba\x00\x00\x00r\xd6\x00\x00\x00rY\x00\x00\x00\xda\x07targetsrc\x00\x00\x00\xda\x05joins\xda\x04path\xda\x12transform_functionrb\x00\x00\x00r\xbb\x00\x00\x00\xda\x01pr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\xee\x00\x00\x00\x9e\x02\x00\x00s\x1e\x00\x00\x00\x04\x07\x04\x01\n\x01\x0c\x02\n\x01\x1c\x01\x16\x01\x08\x01\x0c\x01\x0c\x01\x14\x02\n\x01\x0c\x01\x02\xfa\x08\x07z\x18SQLCompiler.get_distinctr\x89\x00\x00\x00c\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\n\x00\x00\x00\x03\x00\x00\x00s\xea\x00\x00\x00t\x00|\x01|\x04\x83\x02\\\x02}\x01}\x06|\x06d\x01k\x02\x89\x01|\x01\xa0\x01t\x02\xa1\x01}\x07\x88\x02\xa0\x03|\x07|\x02\x88\x00\xa1\x03\\\x07}\x08}\t\x89\x00}\n}\x0b}\x02\x89\x03|\x08j\x04r_|\x02j\x05r_t\x06|\x08d\x02d\x03\x83\x03|\x01k\x03r_|\x05p0t\x07\x83\x00}\x05t\x08\x87\x02f\x01d\x04d\x05\x84\x08|\nD\x00\x83\x01\x83\x01}\x0c|\x0c|\x05v\x00rDt\td\x06\x83\x01\x82\x01|\x05\xa0\n|\x0c\xa1\x01\x01\x00g\x00}\r|\x02j\x05D\x00]\x0e}\x0e|\r\xa0\x0b\x88\x02\xa0\x0c|\x0e|\x02\x88\x00|\x06|\x05\xa1\x05\xa1\x01\x01\x00qN|\rS\x00\x88\x02j\r\xa0\x0e|\t|\n|\x0b\xa1\x03\\\x03}\t\x89\x00}\x0f\x87\x00\x87\x01\x87\x03f\x03d\x07d\x08\x84\x08|\tD\x00\x83\x01S\x00)\tz\xe2\n        Return the table alias (the name might be ambiguous, the alias will\n        not be) and column name for ordering by the given \'name\' parameter.\n        The \'name\' is of the form \'field1__field2__...__fieldN\'.\n        r\x8a\x00\x00\x00r\x19\x01\x00\x00Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x003\x00\x00\x00s$\x00\x00\x00\x81\x00|\x00]\r}\x01t\x00\x88\x00j\x01j\x02|\x01\x19\x00d\x00d\x01\x83\x03V\x00\x01\x00q\x02d\x01S\x00)\x02\xda\tjoin_colsN)\x03ri\x00\x00\x00r\x1e\x00\x00\x00r6\x00\x00\x00)\x02r0\x00\x00\x00\xda\x01jr2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xc8\x02\x00\x00s\x04\x00\x00\x00\x02\x80"\x00z1SQLCompiler.find_ordering_name.<locals>.<genexpr>z!Infinite loop caused by ordering.c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00s"\x00\x00\x00g\x00|\x00]\r}\x01t\x00\x88\x02|\x01\x88\x00\x83\x02\x88\x01d\x00\x8d\x02d\x01f\x02\x91\x02q\x02S\x00)\x02r\x8d\x00\x00\x00F)\x01r\x06\x00\x00\x00r\xb1\x00\x00\x00)\x03rc\x00\x00\x00r\x8e\x00\x00\x00r&\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\xd3\x02\x00\x00s\x02\x00\x00\x00"\x00z2SQLCompiler.find_ordering_name.<locals>.<listcomp>)\x0fr\x14\x00\x00\x00r\x9b\x00\x00\x00r\x05\x00\x00\x00r!\x01\x00\x00\xda\x0bis_relationr\x97\x00\x00\x00ri\x00\x00\x00rR\x00\x00\x00r\n\x01\x00\x00r\x04\x00\x00\x00rV\x00\x00\x00rP\x00\x00\x00r\x9e\x00\x00\x00r\x1e\x00\x00\x00r"\x01\x00\x00)\x10r)\x00\x00\x00r\xba\x00\x00\x00r\x1d\x01\x00\x00rc\x00\x00\x00r\x91\x00\x00\x00\xda\x0calready_seenr\xa9\x00\x00\x00\xda\x06piecesr\xa8\x00\x00\x00r#\x01\x00\x00r$\x01\x00\x00r%\x01\x00\x00Z\njoin_tuple\xda\x07results\xda\x04itemrY\x00\x00\x00r*\x00\x00\x00)\x04rc\x00\x00\x00r\x8e\x00\x00\x00r)\x00\x00\x00r&\x01\x00\x00r+\x00\x00\x00r\x9e\x00\x00\x00\xb6\x02\x00\x00s$\x00\x00\x00\x0e\x07\x08\x01\n\x01\x1c\x01\x1c\x05\n\x02\x16\x01\x08\x01\x08\x01\n\x01\x04\x02\n\x01\x0e\x01\x04\x01\x08\xff\x04\x02\x16\x01\x16\x01z\x1eSQLCompiler.find_ordering_namec\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00sD\x00\x00\x00|\x03p\x06|\x00j\x00\xa0\x01\xa1\x00}\x03|\x00j\x00\xa0\x02|\x01|\x02|\x03\xa1\x03\\\x06}\x04}\x05}\x02}\x06}\x07}\x08|\x06d\x01\x19\x00}\x03|\x04|\x05|\x03|\x06|\x07|\x02|\x08f\x07S\x00)\x02a$\x01\x00\x00\n        Helper method for get_order_by() and get_distinct().\n\n        get_ordering() and get_distinct() must produce same target columns on\n        same input, as the prefixes of get_ordering() and get_distinct() must\n        match. Executing SQL where this is not true is an error.\n        \xe9\xff\xff\xff\xff)\x03r\x1e\x00\x00\x00r7\x00\x00\x00\xda\x0bsetup_joins)\tr)\x00\x00\x00r,\x01\x00\x00r\x1d\x01\x00\x00rc\x00\x00\x00r\xa8\x00\x00\x00r#\x01\x00\x00r$\x01\x00\x00r%\x01\x00\x00r&\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r!\x01\x00\x00\xd5\x02\x00\x00s\x08\x00\x00\x00\x0e\x08\x1c\x01\x08\x01\x12\x01z\x18SQLCompiler._setup_joinsc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\t\x00\x00\x00C\x00\x00\x00s\xc4\x00\x00\x00g\x00}\x01g\x00}\x02t\x00|\x00j\x01j\x02\x83\x01D\x00],}\x03|\x00j\x01j\x03|\x03\x19\x00s\x13q\nz\x08|\x00j\x01j\x02|\x03\x19\x00}\x04W\x00n\t\x04\x00t\x04y$\x01\x00\x01\x00\x01\x00Y\x00q\nw\x00|\x00\xa0\x05|\x04\xa1\x01\\\x02}\x05}\x06|\x01\xa0\x06|\x05\xa1\x01\x01\x00|\x02\xa0\x07|\x06\xa1\x01\x01\x00q\n|\x00j\x01j\x08D\x00]"}\x07|\x00j\x01\xa0\t|\x07\xa1\x01\\\x02}\x03}\x08|\x03|\x00j\x01j\x02v\x01sS|\x00j\x01j\x03|\x03\x19\x00d\x01k\x02r]|\x01\xa0\x06d\x02|\x00\xa0\n|\x03\xa1\x01\x16\x00\xa1\x01\x01\x00q;|\x01|\x02f\x02S\x00)\x03a\xdb\x01\x00\x00\n        Return a list of strings that are joined together to go after the\n        "FROM" part of the query, as well as a list any extra parameters that\n        need to be included. Subclasses, can override this to create a\n        from-clause via a "select".\n\n        This should only be called after any SQL construction methods that\n        might change the tables that are needed. This means the select columns,\n        ordering, and distinct must be done first.\n        rv\x00\x00\x00z\x04, %s)\x0br\n\x01\x00\x00r\x1e\x00\x00\x00r6\x00\x00\x00r/\x00\x00\x00\xda\x08KeyErrorr&\x00\x00\x00rL\x00\x00\x00rP\x00\x00\x00\xda\x0cextra_tables\xda\x0btable_aliasr\x9c\x00\x00\x00)\tr)\x00\x00\x00r_\x00\x00\x00r]\x00\x00\x00rc\x00\x00\x00Z\x0bfrom_clauseZ\nclause_sqlZ\rclause_paramsr\xb2\x00\x00\x00rY\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\xef\x00\x00\x00\xe2\x02\x00\x00s&\x00\x00\x00\x04\x0b\x04\x01\x10\x01\x0c\x01\x02\x01\x02\x01\x10\x01\x0c\x01\x04\x03\x02\xfd\x0e\x04\n\x01\x0c\x01\x0c\x01\x10\x01\x1c\x04\x14\x01\x02\x80\x08\x01z\x1bSQLCompiler.get_from_clauserv\x00\x00\x00c\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00sZ\x04\x00\x00\x87\x02\x87\x03f\x02d\x01d\x02\x84\x08}\x07g\x00}\x08|\x06s\x13|\x04\x88\x03j\x00j\x01k\x04r\x13|\x08S\x00\x88\x02s\x1f\x88\x03j\x00\xa0\x02\xa1\x00\x89\x02\x88\x03j\x00\xa0\x03\xa1\x00}\x03\x88\x03j\x00\xa0\x04\xa1\x00}\tt\x05\x83\x00}\n|\x05d\x03u\x00r8t\x06\x88\x03j\x00j\x07t\x08\x83\x02}\x06|\x06r8\x88\x03j\x00j\x07}\x05d\x04d\x05\x84\x00}\x0b\x88\x02j\tD\x00]\xa2\x89\x00\x88\x00j\nj\x0bj\x0c}\x0c|\n\xa0\r\x88\x00j\x0e\xa1\x01\x01\x00|\x06ro|\x05\xa0\x0f\x88\x00j\x0ei\x00\xa1\x02}\r\x88\x00j\x10sn|\rs_\x88\x00j\x0e|\x05v\x00rnt\x11d\x06\x88\x00j\x0ed\x07\xa0\x12|\x07\x83\x00\xa1\x01pjd\x08f\x02\x16\x00\x83\x01\x82\x01n\x02d\t}\rt\x13\x88\x00|\x06|\x05|\t\xa0\x0f|\x0c\xa1\x01\x83\x04s|q?\x88\x00j\x14j\n\x88\x00d\t\x88\x00j\x15\x88\x00j\x16r\x8a\x88\x00j\x14j\x15n\x03d\nd\x0b\x84\x00d\td\x0c\x9c\x06}\x0e|\x08\xa0\x17|\x0e\xa1\x01\x01\x00g\x00}\x0f\x88\x03j\x00\xa0\x18\x88\x00j\x0eg\x01\x88\x02|\x03\xa1\x03\\\x06}\x10}\x10}\x10}\x11}\x10}\x10|\x11d\r\x19\x00}\x12\x88\x03j\x19|\x12\x88\x00j\x14j\nj\x0bd\x0e\x8d\x02}\x13|\x13D\x00]\x10}\x14|\x0f\xa0\x17t\x1a|\x01\x83\x01\xa1\x01\x01\x00|\x01\xa0\x17|\x14d\x03f\x02\xa1\x01\x01\x00q\xb8|\x0f|\x0ed\x0f<\x00\x88\x03\xa0\x1b|\x01\x88\x00j\x14j\nj\x0b|\x12|\x04d\x10\x17\x00|\r|\x06\xa1\x06}\x15|\x0b|\x0e|\x15\x83\x02\x01\x00q?|\x06\x90\x02r+d\x11d\x12\x84\x00\x88\x02j\x1cD\x00\x83\x01}\x16|\x16D\x00]\x84\\\x02\x89\x00}\x17t\x13\x88\x00|\x06|\x05|\t\xa0\x0f|\x17\xa1\x01d\x13d\x14\x8d\x05\x90\x01s\x01q\xef\x88\x00\xa0\x1d\xa1\x00}\x18|\n\xa0\r|\x18\xa1\x01\x01\x00\x88\x03j\x00\xa0\x18|\x18g\x01\x88\x02|\x03\xa1\x03}\x19|\x19j\x1ed\r\x19\x00}\x12t\x1f|\x17\x88\x02j\n\x83\x02\x90\x01o#|\x17\x88\x02j\nu\x01}\x1a|\x17\x88\x00d\x13\x88\x00j\x14j\x15\x88\x00j\x15|\x1ad\x0c\x9c\x06}\x0e|\x08\xa0\x17|\x0e\xa1\x01\x01\x00g\x00}\x0f\x88\x03j\x19|\x12|\x17j\x0b\x88\x02j\nd\x15\x8d\x03}\x13|\x13D\x00]\x11}\x14|\x0f\xa0\x17t\x1a|\x01\x83\x01\xa1\x01\x01\x00|\x01\xa0\x17|\x14d\x03f\x02\xa1\x01\x01\x00\x90\x01qC|\x0f|\x0ed\x0f<\x00|\x05\xa0\x0f\x88\x00\xa0\x1d\xa1\x00i\x00\xa1\x02}\r\x88\x03\xa0\x1b|\x01|\x17j\x0b|\x12|\x04d\x10\x17\x00|\r|\x06\xa1\x06}\x15|\x0b|\x0e|\x15\x83\x02\x01\x00q\xeft |\x05\x83\x01D\x00]\x8f\x89\x01|\x04d\x10k\x04\x90\x01r\x81\x01\x00n\x87\x88\x01\x88\x03j\x00j!v\x00\x90\x02r\x06|\n\xa0\r\x88\x01\xa1\x01\x01\x00\x88\x03j\x00\xa0\x18\x88\x01g\x01\x88\x02|\x03\xa1\x03\\\x06\x89\x00}\x10}\x1b}\x11}\x10}\x10|\x1bj\n}\x17|\x11d\r\x19\x00}\x12t\x1f|\x17\x88\x02j\n\x83\x02\x90\x01o\xae|\x17\x88\x02j\nu\x01}\x1a\x87\x00f\x01d\x16d\x17\x84\x08}\x1c\x87\x01f\x01d\x18d\x19\x84\x08}\x1d|\x17\x88\x00d\x13|\x1c|\x1d|\x1ad\x0c\x9c\x06}\x0e|\x08\xa0\x17|\x0e\xa1\x01\x01\x00g\x00}\x0f\x88\x03j\x19|\x12|\x17j\x0b\x88\x02j\nd\x15\x8d\x03}\x13|\x13D\x00]\x11}\x14|\x0f\xa0\x17t\x1a|\x01\x83\x01\xa1\x01\x01\x00|\x01\xa0\x17|\x14d\x03f\x02\xa1\x01\x01\x00\x90\x01q\xd7|\x0f|\x0ed\x0f<\x00|\x05\xa0\x0f\x88\x01i\x00\xa1\x02}\x1e\x88\x03j\x1b|\x01|\x17j\x0b|\x12|\x04d\x10\x17\x00|\x1e|\x06d\x1a\x8d\x06}\x15|\x0b|\x0e|\x15\x83\x02\x01\x00\x90\x01qxt\x05|\x05\x83\x01\xa0"|\n\xa1\x01}\x1f|\x1f\x90\x02r+d\x1bd\x1c\x84\x00|\x1fD\x00\x83\x01} t\x11d\x1dd\x07\xa0\x12| \xa1\x01d\x07\xa0\x12|\x07\x83\x00\xa1\x01\x90\x02p\'d\x08f\x02\x16\x00\x83\x01\x82\x01|\x08S\x00)\x1ea\x1d\x01\x00\x00\n        Fill in the information needed for a select_related query. The current\n        depth is measured as the number of connections away from the root model\n        (for example, cur_depth=1 means we are looking at models with direct\n        connections to the root model).\n        c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s0\x00\x00\x00d\x01d\x02\x84\x00\x88\x00j\x00D\x00\x83\x01}\x00d\x03d\x02\x84\x00\x88\x00j\x01D\x00\x83\x01}\x01t\x02|\x00|\x01\x88\x01j\x03j\x04\x83\x03S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00s\x00\x00\x00s\x1c\x00\x00\x00\x81\x00|\x00]\t}\x01|\x01j\x00r\x02|\x01j\x01V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00)\x02r*\x01\x00\x00r\xba\x00\x00\x00r\xe4\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\r\x03\x00\x00s\x04\x00\x00\x00\x02\x80\x1a\x00zQSQLCompiler.get_related_selections.<locals>._get_field_choices.<locals>.<genexpr>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00s"\x00\x00\x00\x81\x00|\x00]\x0c}\x01|\x01j\x00j\x01r\x02|\x01j\x00\xa0\x02\xa1\x00V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00)\x03r\xa8\x00\x00\x00\xda\x06unique\xda\x12related_query_namer\xe4\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\x0e\x03\x00\x00s\x0c\x00\x00\x00\x02\x80\x04\x00\x08\x02\x02\xfe\x08\x01\n\xff)\x05\xda\x06fields\xda\x0frelated_objectsr\x02\x00\x00\x00r\x1e\x00\x00\x00\xda\x13_filtered_relations)\x02Z\x0edirect_choicesZ\x0freverse_choices)\x02r\x1d\x01\x00\x00r)\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x12_get_field_choices\x0c\x03\x00\x00s\n\x00\x00\x00\x10\x01\x06\x01\x04\x02\x06\xfe\x10\x04z>SQLCompiler.get_related_selections.<locals>._get_field_choicesNc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00S\x00\x00\x00s\x0c\x00\x00\x00|\x01|\x00d\x01<\x00d\x00S\x00)\x02Nrx\x00\x00\x00r*\x00\x00\x00)\x02r$\x00\x00\x00rx\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x17get_related_klass_infos&\x03\x00\x00s\x02\x00\x00\x00\x0c\x01zCSQLCompiler.get_related_selections.<locals>.get_related_klass_infoszCNon-relational field given in select_related: \'%s\'. Choices are: %sr\xdc\x00\x00\x00z\x06(none)Fc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00S\x00\x00\x00s\x04\x00\x00\x00d\x00S\x00r\xc6\x00\x00\x00r*\x00\x00\x00)\x02\xda\x01x\xda\x01yr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x08<lambda>E\x03\x00\x00s\x02\x00\x00\x00\x04\x00z4SQLCompiler.get_related_selections.<locals>.<lambda>)\x06rl\x00\x00\x00r\xa8\x00\x00\x00\xda\x07reverse\xda\x0clocal_setter\xda\rremote_setterry\x00\x00\x00r/\x01\x00\x00)\x02r\x1c\x01\x00\x00r\x1d\x01\x00\x00rw\x00\x00\x00rv\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00s&\x00\x00\x00g\x00|\x00]\x0f}\x01|\x01j\x00j\x01r\x02|\x01j\x02s\x02|\x01j\x00|\x01j\x03f\x02\x91\x02q\x02S\x00r*\x00\x00\x00)\x04r\xa8\x00\x00\x00r4\x01\x00\x00\xda\x0cmany_to_many\xda\rrelated_model)\x02r0\x00\x00\x00\xda\x01or*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00W\x03\x00\x00s\x10\x00\x00\x00\x06\x00\x02\x02\x06\x01\x02\xfd\x04\x03\x02\xfd\n\x01\x06\xffz6SQLCompiler.get_related_selections.<locals>.<listcomp>T)\x01r>\x01\x00\x00)\x03r\x1c\x01\x00\x00r\x1d\x01\x00\x00ry\x00\x00\x00c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s\x12\x00\x00\x00\x88\x00j\x00\xa0\x01|\x01|\x00\xa1\x02\x01\x00d\x00S\x00r\xc6\x00\x00\x00)\x02\xda\x0cremote_field\xda\x10set_cached_value\xa9\x02\xda\x03obj\xda\x08from_obj)\x01r\xe5\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r?\x01\x00\x00\x87\x03\x00\x00s\x02\x00\x00\x00\x12\x01z8SQLCompiler.get_related_selections.<locals>.local_setterc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s\x10\x00\x00\x00t\x00|\x01\x88\x00|\x00\x83\x03\x01\x00d\x00S\x00r\xc6\x00\x00\x00)\x01\xda\x07setattrrF\x01\x00\x00)\x01r\xba\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r@\x01\x00\x00\x8a\x03\x00\x00s\x02\x00\x00\x00\x10\x01z9SQLCompiler.get_related_selections.<locals>.remote_setter)\x05r\x1d\x01\x00\x00\xda\nroot_alias\xda\tcur_depth\xda\trequested\xda\nrestrictedc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00s\x18\x00\x00\x00\x81\x00|\x00]\x07}\x01d\x00|\x01\x16\x00V\x00\x01\x00q\x02d\x01S\x00)\x02z\x04\'%s\'Nr*\x00\x00\x00\xa9\x02r0\x00\x00\x00\xda\x01sr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xa7\x03\x00\x00r\xe6\x00\x00\x00z5SQLCompiler.get_related_selections.<locals>.<genexpr>zBInvalid field name(s) given in select_related: %s. Choices are: %s)#r\x1e\x00\x00\x00\xda\tmax_depthr\x96\x00\x00\x00r7\x00\x00\x00\xda\x16get_loaded_field_namesrR\x00\x00\x00rT\x00\x00\x00r\x84\x00\x00\x00\xda\x04dictr6\x01\x00\x00rl\x00\x00\x00rm\x00\x00\x00r\x17\x01\x00\x00rV\x00\x00\x00r\xba\x00\x00\x00\xda\x03getr*\x01\x00\x00r\x04\x00\x00\x00r\xd3\x00\x00\x00r\x0c\x00\x00\x00rD\x01\x00\x00rE\x01\x00\x00r4\x01\x00\x00rL\x00\x00\x00r0\x01\x00\x00r\x82\x00\x00\x00r9\x00\x00\x00r\x85\x00\x00\x00r7\x01\x00\x00r5\x01\x00\x00r$\x01\x00\x00r\x18\x01\x00\x00\xda\x04listr8\x01\x00\x00r\xc5\x00\x00\x00)!r)\x00\x00\x00r"\x00\x00\x00r\x1d\x01\x00\x00rJ\x01\x00\x00rK\x01\x00\x00rL\x01\x00\x00rM\x01\x00\x00r9\x01\x00\x00rx\x00\x00\x00r\x1e\x01\x00\x00Z\x0cfields_foundr:\x01\x00\x00Z\x0bfield_model\xda\x04nextr$\x00\x00\x00rw\x00\x00\x00rY\x00\x00\x00r$\x01\x00\x00rc\x00\x00\x00\xda\x07columnsr[\x00\x00\x00Z\x10next_klass_infos\xda\x0erelated_fieldsrl\x00\x00\x00Z\x12related_field_name\xda\tjoin_infory\x00\x00\x00Z\tjoin_optsr?\x01\x00\x00r@\x01\x00\x00Z\x0enext_requestedZ\x10fields_not_found\xda\x0einvalid_fieldsr*\x00\x00\x00)\x04r\xe5\x00\x00\x00r\xba\x00\x00\x00r\x1d\x01\x00\x00r)\x00\x00\x00r+\x00\x00\x00r\x85\x00\x00\x00\x04\x03\x00\x00s\x16\x01\x00\x00\x0e\x08\x04\x08\x10\x01\x04\x02\x04\x02\n\x01\n\x01\n\x01\x06\x04\x08\x01\x0e\x01\x04\x01\x08\x01\x08\x02\n\x03\n\x01\x0c\x01\x04\x02\x0e\x01\x06\x01\x0e\x03\x02\x01\x02\x01\x04\x02\x0e\x01\x02\xfe\x02\xff\x04\xff\x02\x80\x04\x08\x08\x02\x08\x01\x04\xff\x02\x02\x06\x02\x02\x01\x02\x01\x04\x01\x14\x01\x02\x01\x06\xfa\n\x08\x04\x01\x06\x01\n\x01\x10\xff\x08\x02\x14\x01\x08\x01\x0e\x01\x10\x01\x08\x01\x04\x01\x16\x01\x04\xff\x0c\x02\x06\x02\x06\x01\x04\x02\x06\xfe\x0c\x05\x08\x01\n\x01\x08\xff\x02\x02\x08\x02\n\x01\x12\x02\n\x01\x18\x01\x02\x02\x02\x01\x02\x01\x06\x01\x04\x01\x02\x01\x06\xfa\n\x08\x04\x01\x04\x01\n\x01\x06\xff\x08\x02\x0e\x01\x12\x01\x08\x01\x10\x01\x04\x01\x0e\x01\x04\x01\x04\xfe\x0c\x03\x0c\x01\n\x02\x04\x01\x0e\x01\n\x01\x1e\x01\x06\x01\x08\x01\x18\x01\x0c\x02\x0c\x03\x02\x03\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\xfa\n\x08\x04\x01\x04\x01\x06\x01\x04\x01\x06\xfe\x08\x04\x0e\x01\x12\x01\x08\x01\x0c\x01\x04\x01\x08\x01\x08\x01\x02\x01\x06\xfd\n\x05\x04\x80\x0e\x01\x06\x01\x0e\x01\x02\x01\x02\x01\x08\x02\x10\x01\x02\xfe\x02\xff\x04\xff\x04\x07z"SQLCompiler.get_related_selectionsc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00s4\x01\x00\x00\x87\x01f\x01d\x01d\x02\x84\x08\x89\x00\x87\x01f\x01d\x03d\x04\x84\x08}\x01\x87\x00\x87\x01f\x02d\x05d\x06\x84\x08}\x02g\x00}\x03g\x00}\x04\x88\x01j\x00j\x01D\x00]k}\x05\x88\x01j\x02}\x06|\x05d\x07k\x02r)|\x01|\x06\x83\x01}\x07n@|\x05\xa0\x03t\x04\xa1\x01D\x00],}\x08g\x00|\x06\xa0\x05d\x08g\x00\xa1\x02\xa2\x01\x88\x00|\x06\x83\x01\xa2\x01R\x00}\t|\tD\x00]\x16}\n|\nd\t\x19\x00}\x0b|\nd\n\x19\x00rL|\x0bj\x06}\x0b|\x0bj\x07|\x08k\x02rU|\n}\x06\x01\x00n\x05q?d\x0b}\x06\x01\x00n\x01q.|\x06d\x0bu\x00re|\x04\xa0\x08|\x05\xa1\x01\x01\x00q\x1b|\x01|\x06\x83\x01}\x07|\x07d\x0bu\x01r\x86\x88\x01j\tj\nj\x0br}|\x03\xa0\x08\x88\x01\xa0\x0c|\x07\xa1\x01d\x0c\x19\x00\xa1\x01\x01\x00q\x1b|\x03\xa0\x08\x88\x01\xa0\r|\x07j\x0e\xa1\x01\xa1\x01\x01\x00q\x1b|\x04r\x98t\x0fd\rd\x0e\xa0\x10|\x04\xa1\x01d\x0e\xa0\x10|\x02\x83\x00\xa1\x01f\x02\x16\x00\x83\x01\x82\x01|\x03S\x00)\x0fzk\n        Return a quoted list of arguments for the SELECT FOR UPDATE OF part of\n        the query.\n        c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x003\x00\x00\x00sX\x00\x00\x00\x81\x00|\x00d\x01\x19\x00j\x00j\x01}\x01|\x01j\x00j\x02\xa0\x03\xa1\x00D\x00]\x1c\\\x02\x89\x01}\x02\x88\x01j\x00\xa0\x04\xa1\x00\x89\x00\x88\x01|\x02d\x02\x87\x00\x87\x01\x87\x02f\x03d\x03d\x04\x84\x08|\x00d\x05\x19\x00D\x00\x83\x01d\x06\x9c\x04V\x00\x01\x00q\rd\x00S\x00)\x07Nrl\x00\x00\x00Fc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s<\x00\x00\x00g\x00|\x00]\x1a}\x01\x88\x02j\x00|\x01\x19\x00d\x00\x19\x00j\x01j\x02\x88\x01k\x02s\x1a\x88\x02j\x00|\x01\x19\x00d\x00\x19\x00j\x01j\x02\x88\x00v\x00r\x02|\x01\x91\x02q\x02S\x00\xa9\x01r\x01\x00\x00\x00)\x03r"\x00\x00\x00rb\x00\x00\x00rl\x00\x00\x00)\x02r0\x00\x00\x00\xda\x0cselect_index)\x03\xda\x0bparent_list\xda\x0cparent_modelr)\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\xbe\x03\x00\x00s\x0c\x00\x00\x00\x06\x00\x02\x02\x16\x03\x16\x01\x02\xfb\x06\x05zbSQLCompiler.get_select_for_update_of_arguments.<locals>._get_parent_klass_info.<locals>.<listcomp>rw\x00\x00\x00)\x04rl\x00\x00\x00r\xa8\x00\x00\x00r>\x01\x00\x00rw\x00\x00\x00)\x05rm\x00\x00\x00r\x17\x01\x00\x00\xda\x07parentsr\x80\x00\x00\x00\xda\x0fget_parent_list)\x03r$\x00\x00\x00r\x17\x01\x00\x00\xda\x0bparent_linkr2\x00\x00\x00)\x02r\\\x01\x00\x00r]\x01\x00\x00r+\x00\x00\x00\xda\x16_get_parent_klass_info\xb6\x03\x00\x00s\x18\x00\x00\x00\x02\x80\x0c\x01\x14\x01\n\x01\x02\x02\x02\x01\x02\x01\x0e\x01\x06\x02\x04\xfe\n\xfc\x04\xfezNSQLCompiler.get_select_for_update_of_arguments.<locals>._get_parent_klass_infoc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x13\x00\x00\x00sF\x00\x00\x00|\x00d\x01\x19\x00j\x00j\x01}\x01|\x00d\x02\x19\x00D\x00]\x16}\x02\x88\x00j\x02|\x02\x19\x00d\x03\x19\x00j\x03j\x04|\x01k\x02r \x88\x00j\x02|\x02\x19\x00d\x03\x19\x00\x02\x00\x01\x00S\x00q\nd\x04S\x00)\x05z\xec\n            Find the first selected column from a model. If it doesn\'t exist,\n            don\'t lock a model.\n\n            select_fields is filled recursively, so it also contains fields\n            from the parent models.\n            rl\x00\x00\x00rw\x00\x00\x00r\x01\x00\x00\x00N)\x05rm\x00\x00\x00r\x17\x01\x00\x00r"\x00\x00\x00rb\x00\x00\x00rl\x00\x00\x00)\x03r$\x00\x00\x00r\x17\x01\x00\x00r[\x01\x00\x00r2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda"_get_first_selected_col_from_model\xc9\x03\x00\x00s\x0c\x00\x00\x00\x0c\x08\x0c\x01\x16\x01\x12\x01\x02\xff\x04\xffzZSQLCompiler.get_select_for_update_of_arguments.<locals>._get_first_selected_col_from_modelc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x003\x00\x00\x00s\xae\x00\x00\x00\x81\x00t\x00\xa0\x01d\x01\x88\x02j\x02f\x02g\x01\xa1\x01}\x00|\x00rU|\x00\xa0\x03\xa1\x00\\\x02}\x01}\x02|\x01d\x01u\x00r\x1cg\x00\x89\x00d\x02V\x00\x01\x00n\x17|\x02d\x03\x19\x00}\x03|\x02d\x04\x19\x00r\'|\x03j\x04}\x03|\x01|\x03j\x05g\x01\x17\x00\x89\x00t\x06\xa0\x07\x88\x00\xa1\x01V\x00\x01\x00|\x00\xa0\x08\x87\x00f\x01d\x05d\x06\x84\x08\x88\x01|\x02\x83\x01D\x00\x83\x01\xa1\x01\x01\x00|\x00\xa0\x08\x87\x00f\x01d\x07d\x06\x84\x08|\x02\xa0\td\x08g\x00\xa1\x02D\x00\x83\x01\xa1\x01\x01\x00|\x00s\x0cd\x01S\x00d\x01S\x00)\tz<Yield all allowed field paths in breadth-first search order.Nr)\x00\x00\x00r\xa8\x00\x00\x00r>\x01\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x003\x00\x00\x00\xf3\x18\x00\x00\x00\x81\x00|\x00]\x07}\x01\x88\x00|\x01f\x02V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00r*\x00\x00\x00\xa9\x02r0\x00\x00\x00r$\x00\x00\x00\xa9\x01r%\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xe4\x03\x00\x00\xf3\n\x00\x00\x00\x02\x80\x04\x00\x02\x02\x06\xff\n\xffz]SQLCompiler.get_select_for_update_of_arguments.<locals>._get_field_choices.<locals>.<genexpr>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x003\x00\x00\x00rc\x01\x00\x00r\xc6\x00\x00\x00r*\x00\x00\x00rd\x01\x00\x00re\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xe8\x03\x00\x00rf\x01\x00\x00rx\x00\x00\x00)\n\xda\x0bcollections\xda\x05dequer$\x00\x00\x00\xda\x07popleftrD\x01\x00\x00r\xba\x00\x00\x00r\x05\x00\x00\x00r\xd3\x00\x00\x00rP\x00\x00\x00rS\x01\x00\x00)\x04\xda\x05queue\xda\x0bparent_pathr$\x00\x00\x00r\xa8\x00\x00\x00\xa9\x02ra\x01\x00\x00r)\x00\x00\x00re\x01\x00\x00r+\x00\x00\x00r9\x01\x00\x00\xd6\x03\x00\x00s&\x00\x00\x00\x02\x80\x12\x02\x04\x01\x0c\x01\x08\x01\x04\x01\x08\x01\x08\x02\x08\x01\x06\x01\x0c\x01\x0c\x01\x0e\x01\x06\x02\x08\xfe\x0e\x04\n\x02\x08\xfe\x0c\xf1zJSQLCompiler.get_select_for_update_of_arguments.<locals>._get_field_choicesr)\x00\x00\x00rx\x00\x00\x00r\xa8\x00\x00\x00r>\x01\x00\x00Nr\x01\x00\x00\x00z\x8aInvalid field name(s) given in select_for_update(of=(...)): %s. Only relational fields followed in the query are allowed. Choices are: %s.r\xdc\x00\x00\x00)\x11r\x1e\x00\x00\x00r\xf7\x00\x00\x00r$\x00\x00\x00r\x9b\x00\x00\x00r\x05\x00\x00\x00rS\x01\x00\x00rD\x01\x00\x00r\xba\x00\x00\x00rL\x00\x00\x00r\x1f\x00\x00\x00rq\x00\x00\x00\xda\x1bselect_for_update_of_columnr&\x00\x00\x00r\x9c\x00\x00\x00rc\x00\x00\x00r\x04\x00\x00\x00r\xd3\x00\x00\x00)\x0cr)\x00\x00\x00rb\x01\x00\x00r9\x01\x00\x00r_\x00\x00\x00\xda\rinvalid_namesr\xba\x00\x00\x00r$\x00\x00\x00r[\x00\x00\x00r\xd8\x00\x00\x00Z\x0bklass_infosZ\x12related_klass_infor\xa8\x00\x00\x00r*\x00\x00\x00rl\x01\x00\x00r+\x00\x00\x00r\xfc\x00\x00\x00\xb1\x03\x00\x00sX\x00\x00\x00\x0c\x05\x0c\x13\x0e\r\x04\x16\x04\x01\x0c\x01\x06\x01\x08\x01\n\x01\x0e\x02\x02\x01\n\x01\x02\xff\x06\x02\x06\xfe\x08\x04\x08\x01\x08\x01\x06\x01\n\x01\x04\x01\x04\x01\x02\xfe\x04\x04\x04\x01\x02\xfd\x08\x04\n\x01\x02\x01\x08\x01\x08\x01\n\x01\x16\x01\x12\x02\x02\x80\x04\x01\x02\x01\x02\x01\x08\x03\n\x01\x02\xfe\x02\xfe\x04\xff\x04\x08z.SQLCompiler.get_select_for_update_of_argumentsc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s\x1a\x00\x00\x00i\x00}\x01|\x00j\x00\xa0\x01|\x01|\x00j\x00j\x02\xa1\x02\x01\x00|\x01S\x00)\x01z\xb3\n        Convert the self.deferred_loading data structure to mapping of table\n        names to sets of column names which are to be loaded. Return the\n        dictionary.\n        )\x03r\x1e\x00\x00\x00\xda\x10deferred_to_data\xda\x19get_loaded_field_names_cb)\x02r)\x00\x00\x00rV\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x15\x01\x00\x00\x16\x04\x00\x00s\x06\x00\x00\x00\x04\x06\x12\x01\x04\x01z\x1fSQLCompiler.deferred_to_columnsc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\x9c\x00\x00\x00i\x00}\x02t\x00|\x01\x83\x01D\x00]E\\\x02}\x03}\x04|\x04rK|\x00j\x01j\x02\xa0\x03|\x04\xa1\x01}\x05|\x04\xa0\x03|\x00j\x01\xa1\x01}\x06|\x05s\x1d|\x06rKg\x00}\x07|\x05|\x06\x17\x00D\x00]!}\x08t\x04|\x08d\x01\x83\x02r?t\x05\xa0\x06d\x02|\x08j\x07j\x08j\t|\x08j\tf\x02\x16\x00t\n\xa1\x02\x01\x00t\x0bj\x0c|\x08i\x00d\x03\x8d\x02}\x08|\x07\xa0\r|\x08\xa1\x01\x01\x00q#|\x07|\x04f\x02|\x02|\x03<\x00q\x06|\x02S\x00)\x04N\xda\x07contextzXRemove the context parameter from %s.%s(). Support for it will be removed in Django 3.0.)\x01rq\x01\x00\x00)\x0er\xa1\x00\x00\x00r\x1f\x00\x00\x00r\xb8\x00\x00\x00\xda\x11get_db_convertersr\x1b\x00\x00\x00r\x00\x01\x00\x00r\x01\x01\x00\x00\xda\x08__self__\xda\t__class__r\x02\x01\x00\x00r\x18\x00\x00\x00\xda\tfunctools\xda\x07partialrL\x00\x00\x00)\tr)\x00\x00\x00rW\x00\x00\x00\xda\nconverters\xda\x01i\xda\nexpressionZ\x12backend_convertersZ\x10field_converters\xda\x05convs\xda\x04convr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x0eget_converters \x04\x00\x00s,\x00\x00\x00\x04\x01\x10\x01\x04\x01\x0e\x01\x0c\x01\x08\x01\x04\x01\x0c\x01\n\x01\x04\x01\x02\x01\x08\x02\x04\x01\x02\xfe\x02\xff\x02\x05\x04\xfa\x0e\x08\x0c\x01\x0c\x01\x02\x80\x04\x01z\x1aSQLCompiler.get_convertersc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x07\x00\x00\x00c\x00\x00\x00sf\x00\x00\x00\x81\x00|\x00j\x00}\x03t\x01|\x02\xa0\x02\xa1\x00\x83\x01}\x02t\x03t\x01|\x01\x83\x02D\x00]!}\x04|\x02D\x00]\x19\\\x02}\x05\\\x02}\x06}\x07|\x04|\x05\x19\x00}\x08|\x06D\x00]\x08}\t|\t|\x08|\x07|\x03\x83\x03}\x08q\x1f|\x08|\x04|\x05<\x00q\x13|\x04V\x00\x01\x00q\x0fd\x00S\x00r\xc6\x00\x00\x00)\x04r\x1f\x00\x00\x00rT\x01\x00\x00r\x80\x00\x00\x00\xda\x03map)\nr)\x00\x00\x00\xda\x04rowsrw\x01\x00\x00r\x1f\x00\x00\x00\xda\x03row\xda\x03posrz\x01\x00\x00ry\x01\x00\x00\xda\x05value\xda\tconverterr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x10apply_converters7\x04\x00\x00s\x16\x00\x00\x00\x02\x80\x06\x01\x0c\x01\x0e\x01\x10\x01\x08\x01\x08\x01\x0e\x01\n\x01\x08\x01\x04\xfaz\x1cSQLCompiler.apply_convertersc\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00sh\x00\x00\x00|\x01d\x01u\x00r\x0c|\x00j\x00t\x01|\x03|\x04d\x02\x8d\x03}\x01d\x03d\x04\x84\x00|\x00j\x02d\x05|\x00j\x03\x85\x02\x19\x00D\x00\x83\x01}\x05|\x00\xa0\x04|\x05\xa1\x01}\x06t\x05\xa0\x06|\x01\xa1\x01}\x07|\x06r2|\x00\xa0\x07|\x07|\x06\xa1\x02}\x07|\x02r2t\x08t\t|\x07\x83\x02}\x07|\x07S\x00)\x06z>Return an iterator over the results from executing this query.N)\x02\xda\rchunked_fetch\xda\nchunk_sizec\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00r\xb0\x00\x00\x00rZ\x01\x00\x00r*\x00\x00\x00rN\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00G\x04\x00\x00r\xb3\x00\x00\x00z,SQLCompiler.results_iter.<locals>.<listcomp>r\x01\x00\x00\x00)\n\xda\x0bexecute_sqlr\x0f\x00\x00\x00r"\x00\x00\x00r:\x00\x00\x00r|\x01\x00\x00r\x02\x00\x00\x00\xda\rfrom_iterabler\x83\x01\x00\x00r}\x01\x00\x00r\n\x01\x00\x00)\x08r)\x00\x00\x00r-\x01\x00\x00\xda\x0etuple_expectedr\x84\x01\x00\x00r\x85\x01\x00\x00r6\x01\x00\x00rw\x01\x00\x00r~\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x0cresults_iterB\x04\x00\x00s\x14\x00\x00\x00\x08\x03\x10\x01\x1a\x01\n\x01\n\x01\x04\x01\x0c\x01\x04\x01\n\x01\x04\x01z\x18SQLCompiler.results_iterc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00|\x00j\x00\xa0\x01d\x01d\x02i\x01d\x03d\x03d\x03d\x03d\x03\xa1\x06\x01\x00|\x00j\x00\xa0\x02d\x01g\x01\xa1\x01\x01\x00t\x03|\x00\xa0\x04t\x05\xa1\x01\x83\x01S\x00)\x04z\x80\n        Backends (e.g. NoSQL) can override this in order to use optimized\n        versions of "query has any results."\n        r1\x00\x00\x00rv\x00\x00\x00N)\x06r\x1e\x00\x00\x00\xda\tadd_extra\xda\x0eset_extra_maskrA\x00\x00\x00r\x86\x01\x00\x00r\x12\x00\x00\x00r2\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x0bhas_resultsP\x04\x00\x00s\x06\x00\x00\x00\x1a\x06\x0e\x01\x0e\x01z\x17SQLCompiler.has_resultsc\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x08\x00\x00\x00C\x00\x00\x00sD\x01\x00\x00|\x01p\x03t\x00}\x01z\x0c|\x00\xa0\x01\xa1\x00\\\x02}\x04}\x05|\x04s\x0ft\x02\x82\x01W\x00n\x14\x04\x00t\x02y$\x01\x00\x01\x00\x01\x00|\x01t\x03k\x02r!t\x04g\x00\x83\x01\x06\x00Y\x00S\x00Y\x00d\x01S\x00w\x00|\x02r-|\x00j\x05\xa0\x06\xa1\x00}\x06n\x05|\x00j\x05\xa0\x07\xa1\x00}\x06z\x08|\x06\xa0\x08|\x04|\x05\xa1\x02\x01\x00W\x00n\x0c\x04\x00t\tyF\x01\x00\x01\x00\x01\x00|\x06\xa0\n\xa1\x00\x01\x00\x82\x00w\x00|\x01t\x0bk\x02rM|\x06S\x00|\x01t\x0ck\x02rpz\x19|\x06\xa0\r\xa1\x00}\x07|\x07rd|\x07d\x02|\x00j\x0e\x85\x02\x19\x00W\x00|\x06\xa0\n\xa1\x00\x01\x00S\x00|\x07W\x00|\x06\xa0\n\xa1\x00\x01\x00S\x00|\x06\xa0\n\xa1\x00\x01\x00w\x00|\x01t\x00k\x02rz|\x06\xa0\n\xa1\x00\x01\x00d\x01S\x00t\x0f|\x06|\x00j\x05j\x10j\x11|\x00j\x12r\x86|\x00j\x0en\x01d\x01|\x03\x83\x04}\x08|\x02r\x91|\x00j\x05j\x10j\x13s\xa0z\tt\x14|\x08\x83\x01W\x00|\x06\xa0\n\xa1\x00\x01\x00S\x00|\x06\xa0\n\xa1\x00\x01\x00w\x00|\x08S\x00)\x03a\x9d\x02\x00\x00\n        Run the query against the database and return the result(s). The\n        return value is a single data item if result_type is SINGLE, or an\n        iterator over the results if the result_type is MULTI.\n\n        result_type is either MULTI (use fetchmany() to retrieve all rows),\n        SINGLE (only retrieve a single row), or None. In this last case, the\n        cursor is returned if any query is executed, since it\'s used by\n        subclasses such as InsertQuery). It\'s possible, however, that no query\n        is needed, as the filters describe an empty set. In that case, None is\n        returned, to avoid any unnecessary database interaction.\n        Nr\x01\x00\x00\x00)\x15r\x10\x00\x00\x00rH\x00\x00\x00r\x03\x00\x00\x00r\x0f\x00\x00\x00\xda\x04iterr\x1f\x00\x00\x00\xda\x0echunked_cursor\xda\x06cursor\xda\x07execute\xda\tException\xda\x05closer\r\x00\x00\x00r\x12\x00\x00\x00\xda\x08fetchoner:\x00\x00\x00\xda\x0bcursor_iterrq\x00\x00\x00\xda\x15empty_fetchmany_valuerB\x00\x00\x00\xda\x15can_use_chunked_readsrT\x01\x00\x00)\tr)\x00\x00\x00\xda\x0bresult_typer\x84\x01\x00\x00r\x85\x01\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r\x8f\x01\x00\x00\xda\x03valr_\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x86\x01\x00\x00Z\x04\x00\x00sV\x00\x00\x00\x08\r\x02\x01\x0c\x01\x04\x01\x04\x01\x04\xff\x0c\x02\x08\x01\x0c\x01\x06\x02\x02\xfc\x04\x05\x0c\x01\n\x02\x02\x01\x10\x01\x0c\x01\x08\x02\x02\x01\x02\xfd\x08\x05\x04\x02\x08\x01\x02\x01\x08\x01\x04\x01\x0e\x01\n\x04\x04\xfd\x14\x03\x08\x01\x08\x01\x04\x01\x02\x02\n\x01\x0e\x01\x02\x01\x04\xfd\x0e\x05\x02\x01\x08\x05\x14\x03\x04\x01z\x17SQLCompiler.execute_sqlc\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\x82\x00\x00\x00|\x03j\x00}\x04|\x00j\x01j\x02j\x03}\x05t\x04|\x00j\x05j\x06\x83\x01D\x00]&\\\x02}\x06}\x07|\x00\xa0\x07|\x07\xa1\x01\\\x02}\x08}\td\x01|\x04|\x01\x83\x01|\x05|\x02|\x06\x19\x00\x83\x01f\x02\x16\x00}\n|\x00j\x05j\x08\xa0\tt\nd\x02|\x08|\nf\x02\x16\x00|\t\x83\x02d\x03\xa1\x02\x01\x00q\x0e|\x00\xa0\x0b\xa1\x00\\\x02}\x0b}\x0cd\x04|\x0b\x16\x00|\x0cf\x02S\x00)\x05Nr\x90\x00\x00\x00\xfa\x07%s = %s\xda\x03ANDz\x0bEXISTS (%s))\x0cr\x9c\x00\x00\x00r\x1f\x00\x00\x00r\xb8\x00\x00\x00r\xb9\x00\x00\x00r\xa1\x00\x00\x00r\x1e\x00\x00\x00r"\x00\x00\x00r&\x00\x00\x00r=\x00\x00\x00rV\x00\x00\x00r\x0b\x00\x00\x00rH\x00\x00\x00)\rr)\x00\x00\x00rc\x00\x00\x00rV\x01\x00\x00r\xd5\x00\x00\x00\xda\x02qn\xda\x03qn2r\x13\x01\x00\x00Z\nselect_col\xda\x07lhs_sql\xda\nlhs_params\xda\x03rhsr\\\x00\x00\x00r]\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x15as_subquery_condition\x9d\x04\x00\x00s\x14\x00\x00\x00\x06\x01\n\x01\x14\x02\x0e\x01\x18\x01\x08\x01\x12\x01\x06\xff\x0c\x03\x0c\x01z!SQLCompiler.as_subquery_conditionc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00c\x00\x00\x00sH\x00\x00\x00\x81\x00t\x00|\x00\xa0\x01\xa1\x00\x83\x01}\x01|\x01d\x01\x19\x00D\x00]\x16}\x02t\x02|\x02t\x03\x83\x02s\x1ed\x02\xa0\x04d\x03d\x04\x84\x00|\x02D\x00\x83\x01\xa1\x01V\x00\x01\x00q\x0b|\x02V\x00\x01\x00q\x0bd\x00S\x00)\x05Nr\x01\x00\x00\x00r\xeb\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00r\xe2\x00\x00\x00r\xc6\x00\x00\x00)\x01\xda\x03str)\x02r0\x00\x00\x00\xda\x01cr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xb0\x04\x00\x00r\xe6\x00\x00\x00z,SQLCompiler.explain_query.<locals>.<genexpr>)\x05rT\x01\x00\x00r\x86\x01\x00\x00rT\x00\x00\x00r\xa1\x01\x00\x00r\xd3\x00\x00\x00)\x03r)\x00\x00\x00r_\x00\x00\x00r\x7f\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x03\x01\x00\x00\xaa\x04\x00\x00s\x0e\x00\x00\x00\x02\x80\x0c\x01\x0c\x03\n\x01\x18\x01\x08\x02\x04\xfcz\x19SQLCompiler.explain_query\xa9\x01F)\x02TF)\x03NNN)\x03Nr\x89\x00\x00\x00N)\x05NNrv\x00\x00\x00NN) r\x02\x01\x00\x00\xda\n__module__\xda\x0c__qualname__r,\x00\x00\x00r;\x00\x00\x00rG\x00\x00\x00rC\x00\x00\x00rS\x00\x00\x00r8\x00\x00\x00r<\x00\x00\x00r@\x00\x00\x00r\x9c\x00\x00\x00r&\x00\x00\x00r\xd9\x00\x00\x00rH\x00\x00\x00r\x82\x00\x00\x00r\xee\x00\x00\x00r\x9e\x00\x00\x00r!\x01\x00\x00r\xef\x00\x00\x00r\x85\x00\x00\x00r\xfc\x00\x00\x00r\x15\x01\x00\x00r|\x01\x00\x00r\x83\x01\x00\x00r\x0e\x00\x00\x00r\x89\x01\x00\x00r\x8c\x01\x00\x00r\x0f\x00\x00\x00r\x86\x01\x00\x00r\xa0\x01\x00\x00r\x03\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x1c\x00\x00\x00\x1a\x00\x00\x00sH\x00\x00\x00\x08\x00\x08\x01\x08\x0f\x08\x06\x08\x0e\x08S\x08.\x08F\x08p\x08\n\n\x11\x08\n\n6\x00\x7f\n#\x08,\x02\x18\x02\x01\n\xff\x08\x1f\x08\r\x02"\x02\x01\n\xff\x00\x7f\x08.\x08e\x08\n\x08\x17\x06\x0b\x02\x01\n\xff\x08\x0e\x10\n\x08C\x0c\rr\x1c\x00\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00sB\x00\x00\x00e\x00Z\x01d\x00Z\x02d\x01Z\x03d\x02d\x03\x84\x00Z\x04d\x04d\x05\x84\x00Z\x05d\x06d\x07\x84\x00Z\x06d\x08d\t\x84\x00Z\x07d\nd\x0b\x84\x00Z\x08d\x0fd\x0cd\r\x84\x01Z\td\x0eS\x00)\x10\xda\x11SQLInsertCompilerFc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00sv\x00\x00\x00|\x01d\x01u\x00r\n|\x02g\x00\x02\x02}\x03}\x04n%t\x00|\x02d\x02\x83\x02r\x17|\x00\xa0\x01|\x02\xa1\x01\\\x02}\x03}\x04n\x18t\x00|\x01d\x03\x83\x02r)|\x01\xa0\x02|\x02|\x00|\x00j\x03\xa1\x03|\x02g\x01\x02\x02}\x03}\x04n\x06d\x04|\x02g\x01\x02\x02}\x03}\x04|\x00j\x03j\x04\xa0\x05|\x03|\x04\xa1\x02}\x04|\x03|\x04f\x02S\x00)\x05at\x01\x00\x00\n        Take a field and a value intended to be saved on that field, and\n        return placeholder SQL and accompanying params. Check for raw values,\n        expressions, and fields with get_placeholder() defined in that order.\n\n        When field is None, consider the value raw and use it as the\n        placeholder, with no corresponding parameters returned.\n        NrH\x00\x00\x00\xda\x0fget_placeholder\xfa\x02%s)\x06rK\x00\x00\x00r&\x00\x00\x00r\xa7\x01\x00\x00r\x1f\x00\x00\x00r\xb8\x00\x00\x00\xda\x14modify_insert_params)\x05r)\x00\x00\x00r\xa8\x00\x00\x00r\x98\x01\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x0cfield_as_sql\xb8\x04\x00\x00s\x12\x00\x00\x00\x08\t\x0c\x02\n\x01\x10\x02\n\x01\x1a\x03\x0c\x03\x10\x07\x08\x02z\x1eSQLInsertCompiler.field_as_sqlc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00sf\x00\x00\x00t\x00|\x02d\x01\x83\x02r)|\x02j\x01|\x00j\x02d\x02d\x03d\x04\x8d\x03}\x02|\x02j\x03r\x19t\x04d\x05|\x02|\x01f\x02\x16\x00\x83\x01\x82\x01|\x02j\x05r t\x06d\x06\x83\x01\x82\x01|\x02j\x07r\'t\x06d\x07\x83\x01\x82\x01|\x02S\x00|\x01j\x08|\x02|\x00j\td\x08\x8d\x02}\x02|\x02S\x00)\tz\x9c\n        Prepare a value to be used in a query by resolving it if it is an\n        expression and otherwise calling the field\'s get_db_prep_save().\n        r\x8b\x00\x00\x00FT\xa9\x02r\x92\x00\x00\x00\xda\x08for_savezbFailed to insert expression "%s" on %s. F() expressions can only be used to update, not to insert.\xfa1Aggregate functions are not allowed in this query\xfa1Window expressions are not allowed in this query.\xa9\x01r\x1f\x00\x00\x00)\nrK\x00\x00\x00r\x8b\x00\x00\x00r\x1e\x00\x00\x00\xda\x1acontains_column_references\xda\nValueErrorrO\x00\x00\x00r\x04\x00\x00\x00\xda\x14contains_over_clause\xda\x10get_db_prep_saver\x1f\x00\x00\x00)\x03r)\x00\x00\x00r\xa8\x00\x00\x00r\x81\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\rprepare_value\xd8\x04\x00\x00s\x1e\x00\x00\x00\n\x05\x12\x01\x06\x04\x02\x01\x02\x01\x06\x01\x02\xff\x04\xff\x06\x04\x08\x01\x06\x01\x08\x01\x04\x03\x10\xff\x04\x01z\x1fSQLInsertCompiler.prepare_valuec\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00C\x00\x00\x00s"\x00\x00\x00|\x00j\x00j\x01r\nt\x02|\x02|\x01j\x03\x83\x02S\x00|\x01j\x04|\x02d\x01d\x02\x8d\x02S\x00)\x03z\xa6\n        Get the given field\'s value off the given obj. pre_save() is used for\n        things like auto_now on DateTimeField. Skip it if this is a raw query.\n        T)\x01rV\x00\x00\x00)\x05r\x1e\x00\x00\x00\xda\x03rawri\x00\x00\x00r\x19\x01\x00\x00\xda\x08pre_save)\x03r)\x00\x00\x00r\xa8\x00\x00\x00rG\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x0cpre_save_val\xef\x04\x00\x00s\x06\x00\x00\x00\x08\x05\x0c\x01\x0e\x01z\x1eSQLInsertCompiler.pre_save_valc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00sP\x00\x00\x00|\x02s\x06g\x00g\x00f\x02S\x00\x87\x00\x87\x01f\x02d\x01d\x02\x84\x08|\x02D\x00\x83\x01}\x03d\x03d\x02\x84\x00|\x03D\x00\x83\x01}\x04t\x00|\x04\x8e\x00\\\x02}\x05}\x06d\x04d\x05\x84\x00|\x06D\x00\x83\x01}\x06|\x05|\x06f\x02S\x00)\x06a+\x02\x00\x00\n        Take a sequence of N fields and a sequence of M rows of values, and\n        generate placeholder SQL and parameters for each field and value.\n        Return a pair containing:\n         * a sequence of M rows of N SQL placeholder strings, and\n         * a sequence of M rows of corresponding parameter values.\n\n        Each placeholder string may contain any number of \'%s\' interpolation\n        strings, and each parameter row will contain exactly as many params\n        as the total number of \'%s\'s in the corresponding placeholder row.\n        c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x003\x00\x00\x00s(\x00\x00\x00\x81\x00|\x00]\x0f}\x01\x87\x01f\x01d\x00d\x01\x84\x08t\x00\x88\x00|\x01\x83\x02D\x00\x83\x01V\x00\x01\x00q\x02d\x02S\x00)\x03c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x003\x00\x00\x00s \x00\x00\x00\x81\x00|\x00]\x0b\\\x02}\x01}\x02\x88\x00\xa0\x00|\x01|\x02\xa1\x02V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00)\x01r\xaa\x01\x00\x00)\x03r0\x00\x00\x00r\xa8\x00\x00\x00\xda\x01vr2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\n\x05\x00\x00r4\x00\x00\x00z>SQLInsertCompiler.assemble_as_sql.<locals>.<genexpr>.<genexpr>N\xa9\x01r\xcc\x00\x00\x00\xa9\x02r0\x00\x00\x00r\x7f\x01\x00\x00\xa9\x02r6\x01\x00\x00r)\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\t\x05\x00\x00s\n\x00\x00\x00\x02\x80\x04\x00\x02\x02\x16\xff\n\xffz4SQLInsertCompiler.assemble_as_sql.<locals>.<genexpr>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00s\x18\x00\x00\x00\x81\x00|\x00]\x07}\x01t\x00|\x01\x8e\x00V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00r\xb9\x01\x00\x00r\xba\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\x10\x05\x00\x00r\xe6\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00s\x1a\x00\x00\x00g\x00|\x00]\t}\x01d\x00d\x01\x84\x00|\x01D\x00\x83\x01\x91\x02q\x02S\x00)\x02c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00S\x00\x00\x00s\x1a\x00\x00\x00g\x00|\x00]\t}\x01|\x01D\x00]\x04}\x02|\x02\x91\x03q\x06q\x02S\x00r*\x00\x00\x00r*\x00\x00\x00\xa9\x03r0\x00\x00\x00\xda\x02psr\'\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\x17\x05\x00\x00\xf3\x02\x00\x00\x00\x1a\x00z@SQLInsertCompiler.assemble_as_sql.<locals>.<listcomp>.<listcomp>r*\x00\x00\x00r\xba\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\x17\x05\x00\x00r\xbe\x01\x00\x00z5SQLInsertCompiler.assemble_as_sql.<locals>.<listcomp>r\xb9\x01\x00\x00)\x07r)\x00\x00\x00r6\x01\x00\x00\xda\nvalue_rowsZ\x15rows_of_fields_as_sqlZ\x17sql_and_param_pair_rows\xda\x10placeholder_rows\xda\nparam_rowsr*\x00\x00\x00r\xbb\x01\x00\x00r+\x00\x00\x00\xda\x0fassemble_as_sql\xf8\x04\x00\x00s\x12\x00\x00\x00\x04\x0c\x08\x01\x0c\x04\x02\x02\x06\xfe\x0e\x07\x0c\x04\x0e\x03\x08\x02z!SQLInsertCompiler.assemble_as_sqlc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00s\x14\x02\x00\x00\x88\x03j\x00j\x01j\x02\x89\x01\x88\x03j\x03\xa0\x04\xa1\x00}\x01\x88\x03j\x00j\x01j\x05\x88\x03j\x03j\x06d\x01\x8d\x01}\x02d\x02|\x02\x88\x01|\x01j\x07\x83\x01f\x02\x16\x00g\x01\x89\x02\x88\x03j\x03j\x08p%|\x01j\tg\x01\x89\x00\x88\x02\xa0\nd\x03d\x04\xa0\x0b\x87\x01f\x01d\x05d\x06\x84\x08\x88\x00D\x00\x83\x01\xa1\x01\x16\x00\xa1\x01\x01\x00\x88\x03j\x03j\x08rH\x87\x00\x87\x03f\x02d\x07d\x08\x84\x08\x88\x03j\x03j\x0cD\x00\x83\x01}\x03n\x0e\x87\x03f\x01d\td\x08\x84\x08\x88\x03j\x03j\x0cD\x00\x83\x01}\x03d\x00g\x01\x89\x00\x88\x03j\r\x0c\x00o^\x88\x03j\x00j\x0ej\x0f}\x04\x88\x03\xa0\x10\x88\x00|\x03\xa1\x02\\\x02}\x05}\x06\x88\x03j\x00j\x01j\x11\x88\x03j\x03j\x06d\x01\x8d\x01}\x07\x88\x03j\rr\xd4\x88\x03j\x00j\x0ej\x12r\xd4\x88\x03j\x00j\x0ej\x13r\x8c\x88\x02\xa0\n\x88\x03j\x00j\x01\xa0\x14\x88\x00|\x05\xa1\x02\xa1\x01\x01\x00|\x06}\x08n\x11\x88\x02\xa0\nd\nd\x04\xa0\x0b|\x05d\x0b\x19\x00\xa1\x01\x16\x00\xa1\x01\x01\x00|\x06d\x0b\x19\x00g\x01}\x08|\x07r\xa4\x88\x02\xa0\n|\x07\xa1\x01\x01\x00d\x0c\x88\x01|\x01j\x07\x83\x01\x88\x01|\x01j\tj\x15\x83\x01f\x02\x16\x00}\t\x88\x03j\x00j\x01\xa0\x16\xa1\x00\\\x02}\n}\x0b|\nr\xc7\x88\x02\xa0\n|\n|\t\x16\x00\xa1\x01\x01\x00|\x08|\x0bg\x017\x00}\x08d\r\xa0\x0b\x88\x02\xa1\x01t\x17t\x18\xa0\x19|\x08\xa1\x01\x83\x01f\x02g\x01S\x00|\x04r\xf7\x88\x02\xa0\n\x88\x03j\x00j\x01\xa0\x14\x88\x00|\x05\xa1\x02\xa1\x01\x01\x00|\x07r\xe8\x88\x02\xa0\n|\x07\xa1\x01\x01\x00d\r\xa0\x0b\x88\x02\xa1\x01t\x17d\x0ed\x06\x84\x00|\x06D\x00\x83\x01\x83\x01f\x02g\x01S\x00|\x07r\xfe\x88\x02\xa0\n|\x07\xa1\x01\x01\x00\x87\x02f\x01d\x0fd\x08\x84\x08t\x1a|\x05|\x06\x83\x02D\x00\x83\x01S\x00)\x10N)\x01\xda\x10ignore_conflictsz\x05%s %srJ\x00\x00\x00r\xdc\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x003\x00\x00\x00s\x1a\x00\x00\x00\x81\x00|\x00]\x08}\x01\x88\x00|\x01j\x00\x83\x01V\x00\x01\x00q\x02d\x00S\x00r\xc6\x00\x00\x00)\x01r \x01\x00\x00r\xe4\x00\x00\x00)\x01r\x9b\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00#\x05\x00\x00s\x04\x00\x00\x00\x02\x80\x18\x00z+SQLInsertCompiler.as_sql.<locals>.<genexpr>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x0c\x89\x00\x87\x00\x87\x02f\x02d\x00d\x01\x84\x08\x88\x01D\x00\x83\x01\x91\x02q\x02S\x00)\x02c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x0c}\x01\x88\x01\xa0\x00|\x01\x88\x01\xa0\x01|\x01\x88\x00\xa1\x02\xa1\x02\x91\x02q\x02S\x00r*\x00\x00\x00)\x02r\xb4\x01\x00\x00r\xb7\x01\x00\x00)\x02r0\x00\x00\x00r\xa8\x00\x00\x00)\x02rG\x01\x00\x00r)\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\'\x05\x00\x00\xf3\x02\x00\x00\x00 \x00z7SQLInsertCompiler.as_sql.<locals>.<listcomp>.<listcomp>r*\x00\x00\x00)\x01r0\x00\x00\x00r\xbb\x01\x00\x00)\x01rG\x01\x00\x00r+\x00\x00\x00rk\x00\x00\x00&\x05\x00\x00s\x08\x00\x00\x00\x06\x00\x02\x02\x12\xff\x06\xffz,SQLInsertCompiler.as_sql.<locals>.<listcomp>c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s\x1a\x00\x00\x00g\x00|\x00]\t}\x01\x88\x00j\x00j\x01\xa0\x02\xa1\x00g\x01\x91\x02q\x02S\x00r*\x00\x00\x00)\x03r\x1f\x00\x00\x00r\xb8\x00\x00\x00\xda\x10pk_default_value)\x02r0\x00\x00\x00rY\x00\x00\x00r2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00,\x05\x00\x00r\xbe\x01\x00\x00\xfa\x0bVALUES (%s)r\x01\x00\x00\x00r\x90\x00\x00\x00r\xeb\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00s\x1e\x00\x00\x00\x81\x00|\x00]\n}\x01|\x01D\x00]\x05}\x02|\x02V\x00\x01\x00q\x06q\x02d\x00S\x00r\xc6\x00\x00\x00r*\x00\x00\x00r\xbc\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00P\x05\x00\x00s\x04\x00\x00\x00\x02\x80\x1c\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00\x13\x00\x00\x00s.\x00\x00\x00g\x00|\x00]\x13\\\x02}\x01}\x02d\x00\xa0\x00\x88\x00d\x01d\x02\xa0\x00|\x01\xa1\x01\x16\x00g\x01\x17\x00\xa1\x01|\x02f\x02\x91\x02q\x02S\x00)\x03r\xeb\x00\x00\x00r\xc6\x01\x00\x00r\xdc\x00\x00\x00)\x01r\xd3\x00\x00\x00)\x03r0\x00\x00\x00r\'\x01\x00\x00\xda\x04vals)\x01r_\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00T\x05\x00\x00s\x08\x00\x00\x00\x06\x00\x06\x02\x1c\xff\x06\xff)\x1br\x1f\x00\x00\x00r\xb8\x00\x00\x00r\xb9\x00\x00\x00r\x1e\x00\x00\x00r\x96\x00\x00\x00\xda\x10insert_statementr\xc3\x01\x00\x00\xda\x08db_tabler6\x01\x00\x00rs\x00\x00\x00rL\x00\x00\x00r\xd3\x00\x00\x00\xda\x04objs\xda\treturn_idrq\x00\x00\x00\xda\x0fhas_bulk_insertr\xc2\x01\x00\x00\xda\x1bignore_conflicts_suffix_sql\xda\x19can_return_id_from_insert\xda\x1fcan_return_ids_from_bulk_insert\xda\x0fbulk_insert_sqlr \x01\x00\x00\xda\x10return_insert_idr\n\x01\x00\x00r\x02\x00\x00\x00r\x87\x01\x00\x00r\xcc\x00\x00\x00)\x0cr)\x00\x00\x00r\x1d\x01\x00\x00r\xc8\x01\x00\x00r\xbf\x01\x00\x00Z\x08can_bulkr\xc0\x01\x00\x00r\xc1\x01\x00\x00r\xcd\x01\x00\x00r]\x00\x00\x00r[\x00\x00\x00Z\x05r_fmtZ\x08r_paramsr*\x00\x00\x00)\x04r6\x01\x00\x00r\x9b\x01\x00\x00r_\x00\x00\x00r)\x00\x00\x00r+\x00\x00\x00rH\x00\x00\x00\x1b\x05\x00\x00sR\x00\x00\x00\n\x03\n\x01\x14\x01\x14\x01\x10\x01"\x01\x08\x02\x0c\x01\x06\x02\x08\xfe\x16\x06\x06\x01\x12\x06\x10\x02\x08\x02\x06\x01\x06\xff\x10\x03\n\x01\x16\x01\x06\x01\x18\x02\n\x01\x04\x01\n\x01\x1a\x01\x10\x01\x04\x03\x0e\x01\n\x01\x1a\x01\x04\x02\x16\x01\x04\x01\n\x01\x1e\x01\x04\x02\n\x01\n\x01\x08\x02\x06\xfez\x18SQLInsertCompiler.as_sqlc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x08\x00\x00\x00C\x00\x00\x00s\x1e\x01\x00\x00|\x01r\x11t\x00|\x00j\x01j\x02\x83\x01d\x01k\x03r\x11|\x00j\x03j\x04j\x05s\x11J\x00\x82\x01|\x01|\x00_\x06|\x00j\x03\xa0\x07\xa1\x00\x8fl}\x02|\x00\xa0\x08\xa1\x00D\x00]\n\\\x02}\x03}\x04|\x02\xa0\t|\x03|\x04\xa1\x02\x01\x00q\x1e|\x01s4\t\x00W\x00d\x00\x04\x00\x04\x00\x83\x03\x01\x00d\x00S\x00|\x00j\x03j\x04j\x05rOt\x00|\x00j\x01j\x02\x83\x01d\x01k\x04rO|\x00j\x03j\n\xa0\x0b|\x02\xa1\x01W\x00\x02\x00d\x00\x04\x00\x04\x00\x83\x03\x01\x00S\x00|\x00j\x03j\x04j\x0crlt\x00|\x00j\x01j\x02\x83\x01d\x01k\x02s^J\x00\x82\x01|\x00j\x03j\n\xa0\r|\x02\xa1\x01W\x00\x02\x00d\x00\x04\x00\x04\x00\x83\x03\x01\x00S\x00|\x00j\x03j\n\xa0\x0e|\x02|\x00j\x01\xa0\x0f\xa1\x00j\x10|\x00j\x01\xa0\x0f\xa1\x00j\x11j\x12\xa1\x03W\x00\x02\x00d\x00\x04\x00\x04\x00\x83\x03\x01\x00S\x001\x00s\x88w\x01\x01\x00\x01\x00\x01\x00Y\x00\x01\x00d\x00S\x00)\x02Nrv\x00\x00\x00)\x13r9\x00\x00\x00r\x1e\x00\x00\x00r\xca\x01\x00\x00r\x1f\x00\x00\x00rq\x00\x00\x00r\xcf\x01\x00\x00r\xcb\x01\x00\x00r\x8f\x01\x00\x00rH\x00\x00\x00r\x90\x01\x00\x00r\xb8\x00\x00\x00Z\x19fetch_returned_insert_idsr\xce\x01\x00\x00\xda\x18fetch_returned_insert_id\xda\x0elast_insert_idr\x96\x00\x00\x00r\xc9\x01\x00\x00rs\x00\x00\x00r \x01\x00\x00)\x05r)\x00\x00\x00r\xcb\x01\x00\x00r\x8f\x01\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x86\x01\x00\x00Y\x05\x00\x00s.\x00\x00\x00\x02\x02\x02\xff\x10\x01\x08\x01\x06\xff\x06\x03\x0c\x01\x10\x01\x0e\x01\x04\x01\x02\x01\x10\xfc\x1a\x05\x0c\x01\x10\xfa\n\x07\x14\x01\x0c\x01\x10\xf7\x08\n\x18\x01\x02\xff$\xf6z\x1dSQLInsertCompiler.execute_sqlNr\xa3\x01\x00\x00)\nr\x02\x01\x00\x00r\xa4\x01\x00\x00r\xa5\x01\x00\x00r\xcb\x01\x00\x00r\xaa\x01\x00\x00r\xb4\x01\x00\x00r\xb7\x01\x00\x00r\xc2\x01\x00\x00rH\x00\x00\x00r\x86\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\xa6\x01\x00\x00\xb5\x04\x00\x00s\x10\x00\x00\x00\x08\x00\x04\x01\x08\x02\x08 \x08\x17\x08\t\x08#\x0e>r\xa6\x01\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00@\x00\x00\x00\xf3\x14\x00\x00\x00e\x00Z\x01d\x00Z\x02d\x01d\x02\x84\x00Z\x03d\x03S\x00)\x04\xda\x11SQLDeleteCompilerc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00st\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08\x88\x00j\x01j\x02D\x00\x83\x01\x83\x01d\x03k\x02s\x13J\x00d\x04\x83\x01\x82\x01\x88\x00j\x03}\x01d\x05|\x01\x88\x00j\x01j\x04\x83\x01\x16\x00g\x01}\x02\x88\x00\xa0\x05\x88\x00j\x01j\x06\xa1\x01\\\x02}\x03}\x04|\x03r1|\x02\xa0\x07d\x06|\x03\x16\x00\xa1\x01\x01\x00d\x07\xa0\x08|\x02\xa1\x01t\t|\x04\x83\x01f\x02S\x00)\x08\xfaf\n        Create the SQL for this query. Return the SQL string and list of\n        parameters.\n        c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x0c}\x01\x88\x00j\x00j\x01|\x01\x19\x00d\x00k\x04r\x02|\x01\x91\x02q\x02S\x00rZ\x01\x00\x00r.\x00\x00\x00r\xb1\x00\x00\x00r2\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00t\x05\x00\x00r\xc4\x01\x00\x00z,SQLDeleteCompiler.as_sql.<locals>.<listcomp>rv\x00\x00\x00z)Can only delete from one table at a time.z\x0eDELETE FROM %sr\xe1\x00\x00\x00r\xeb\x00\x00\x00)\nr9\x00\x00\x00r\x1e\x00\x00\x00r6\x00\x00\x00r\x9c\x00\x00\x00rt\x00\x00\x00r&\x00\x00\x00r=\x00\x00\x00rL\x00\x00\x00r\xd3\x00\x00\x00r\n\x01\x00\x00)\x05r)\x00\x00\x00r\x9b\x01\x00\x00r_\x00\x00\x00r=\x00\x00\x00r]\x00\x00\x00r*\x00\x00\x00r2\x00\x00\x00r+\x00\x00\x00rH\x00\x00\x00o\x05\x00\x00s\x12\x00\x00\x00 \x05\x02\x01\x04\xff\x06\x02\x12\x01\x12\x01\x04\x01\x0e\x01\x12\x01z\x18SQLDeleteCompiler.as_sqlN\xa9\x04r\x02\x01\x00\x00r\xa4\x01\x00\x00r\xa5\x01\x00\x00rH\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\xd5\x01\x00\x00n\x05\x00\x00\xf3\x04\x00\x00\x00\x08\x00\x0c\x01r\xd5\x01\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00s0\x00\x00\x00e\x00Z\x01d\x00Z\x02d\x01d\x02\x84\x00Z\x03\x87\x00f\x01d\x03d\x04\x84\x08Z\x04\x87\x00f\x01d\x05d\x06\x84\x08Z\x05\x87\x00\x04\x00Z\x06S\x00)\x07\xda\x11SQLUpdateCompilerc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x07\x00\x00\x00C\x00\x00\x00s\xb8\x01\x00\x00|\x00\xa0\x00\xa1\x00\x01\x00|\x00j\x01j\x02s\nd\x01S\x00|\x00j\x03}\x01g\x00g\x00\x02\x02}\x02}\x03|\x00j\x01j\x02D\x00]\x99\\\x03}\x04}\x05}\x06t\x04|\x06d\x02\x83\x02r8|\x06j\x05|\x00j\x01d\x03d\x04d\x05\x8d\x03}\x06|\x06j\x06r0t\x07d\x06\x83\x01\x82\x01|\x06j\x08r7t\x07d\x07\x83\x01\x82\x01n\'t\x04|\x06d\x08\x83\x02rW|\x04j\trL|\x04j\n|\x06\xa0\x0b|\x04\xa1\x01|\x00j\x0cd\t\x8d\x02}\x06n\x13t\rd\n|\x04|\x06|\x04j\x0ej\x0ff\x03\x16\x00\x83\x01\x82\x01|\x04j\n|\x06|\x00j\x0cd\t\x8d\x02}\x06t\x04|\x04d\x0b\x83\x02rm|\x04\xa0\x10|\x06|\x00|\x00j\x0c\xa1\x03}\x07n\x02d\x0c}\x07|\x04j\x11}\x08t\x04|\x06d\r\x83\x02r\x91|\x00\xa0\x12|\x06\xa1\x01\\\x02}\t}\n|\x02\xa0\x13d\x0e|\x01|\x08\x83\x01|\x07|\t\x16\x00f\x02\x16\x00\xa1\x01\x01\x00|\x03\xa0\x14|\n\xa1\x01\x01\x00q\x16|\x06d\x0fu\x01r\xa6|\x02\xa0\x13d\x0e|\x01|\x08\x83\x01|\x07f\x02\x16\x00\xa1\x01\x01\x00|\x03\xa0\x13|\x06\xa1\x01\x01\x00q\x16|\x02\xa0\x13d\x10|\x01|\x08\x83\x01\x16\x00\xa1\x01\x01\x00q\x16|\x00j\x01j\x15}\x0bd\x11|\x01|\x0b\x83\x01\x16\x00d\x12\xa0\x16|\x02\xa1\x01g\x02}\x0c|\x00\xa0\x12|\x00j\x01j\x17\xa1\x01\\\x02}\r}\n|\rr\xd1|\x0c\xa0\x13d\x13|\r\x16\x00\xa1\x01\x01\x00d\x14\xa0\x16|\x0c\xa1\x01t\x18|\x03|\n\x17\x00\x83\x01f\x02S\x00)\x15r\xd6\x01\x00\x00)\x02r\xda\x00\x00\x00r*\x00\x00\x00r\x8b\x00\x00\x00FTr\xab\x01\x00\x00r\xad\x01\x00\x00r\xae\x01\x00\x00\xda\x15prepare_database_saver\xaf\x01\x00\x00zSTried to update field %s with a model instance, %r. Use a value compatible with %s.r\xa7\x01\x00\x00r\xa8\x01\x00\x00rH\x00\x00\x00r\x99\x01\x00\x00Nz\t%s = NULLz\rUPDATE %s SETr\xdc\x00\x00\x00r\xe1\x00\x00\x00r\xeb\x00\x00\x00)\x19rG\x00\x00\x00r\x1e\x00\x00\x00\xda\x06valuesr\x9c\x00\x00\x00rK\x00\x00\x00r\x8b\x00\x00\x00rO\x00\x00\x00r\x04\x00\x00\x00r\xb2\x01\x00\x00rD\x01\x00\x00r\xb3\x01\x00\x00r\xda\x01\x00\x00r\x1f\x00\x00\x00\xda\tTypeErrorrt\x01\x00\x00r\x02\x01\x00\x00r\xa7\x01\x00\x00r \x01\x00\x00r&\x00\x00\x00rL\x00\x00\x00rP\x00\x00\x00rt\x00\x00\x00r\xd3\x00\x00\x00r=\x00\x00\x00r\n\x01\x00\x00)\x0er)\x00\x00\x00r\x9b\x01\x00\x00r\xdb\x01\x00\x00\xda\rupdate_paramsr\xa8\x00\x00\x00rl\x00\x00\x00r\x98\x01\x00\x00\xda\x0bplaceholderr\xba\x00\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r\xaa\x00\x00\x00r_\x00\x00\x00r=\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rH\x00\x00\x00\x7f\x05\x00\x00sZ\x00\x00\x00\x08\x05\x08\x01\x04\x01\x06\x01\n\x01\x12\x01\n\x01\x12\x01\x06\x01\x08\x01\x06\x01\x08\x01\x02\xff\n\x02\x06\x01\x04\x01\x08\x01\x04\x01\x08\xfe\x02\x05\x02\x01\x0c\x02\x02\xfe\x04\xff\x10\x06\n\x03\x12\x01\x04\x02\x06\x01\n\x01\x0e\x01\x1a\x01\x0c\x01\x08\x01\x16\x01\x0c\x01\x14\x02\x08\x01\n\x02\x08\x01\x04\xfe\x12\x04\x04\x01\x0e\x01\x16\x01z\x18SQLUpdateCompiler.as_sqlc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00sz\x00\x00\x00t\x00\x83\x00\xa0\x01|\x01\xa1\x01}\x02z\x13|\x02r\x0c|\x02j\x02n\x01d\x01}\x03|\x02d\x02u\x00}\x04W\x00|\x02r\x19|\x02\xa0\x03\xa1\x00\x01\x00n\x08|\x02r!|\x02\xa0\x03\xa1\x00\x01\x00w\x00w\x00|\x00j\x04\xa0\x05\xa1\x00D\x00]\x13}\x05|\x05\xa0\x06|\x00j\x07\xa1\x01\xa0\x01|\x01\xa1\x01}\x06|\x04r:|\x06r:|\x06}\x03d\x03}\x04q\'|\x03S\x00)\x04a\x13\x01\x00\x00\n        Execute the specified update. Return the number of rows affected by\n        the primary update query. The "primary update query" is the first\n        non-empty query that is executed. Row counts for any subsequent,\n        related queries are not available.\n        r\x01\x00\x00\x00NF)\x08\xda\x05superr\x86\x01\x00\x00\xda\x08rowcountr\x92\x01\x00\x00r\x1e\x00\x00\x00\xda\x13get_related_updatesr\xc3\x00\x00\x00r \x00\x00\x00)\x07r)\x00\x00\x00r\x97\x01\x00\x00r\x8f\x01\x00\x00r~\x01\x00\x00r\xc2\x00\x00\x00r\x1e\x00\x00\x00Z\x08aux_rows\xa9\x01rt\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\x86\x01\x00\x00\xb8\x05\x00\x00s"\x00\x00\x00\x0c\x07\x02\x01\x0e\x01\n\x01\x04\x02\x08\x01\x02\x80\x04\xff\n\x01\x02\xff\x0e\x02\x12\x01\x08\x01\x04\x01\x04\x01\x02\x80\x04\x01z\x1dSQLUpdateCompiler.execute_sqlc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x05\x00\x00\x00\x03\x00\x00\x00s\x14\x01\x00\x00|\x00j\x00j\x01\xa0\x02\xa1\x00}\x01|\x00j\x00\xa0\x03\xa1\x00\x01\x00|\x00j\x00\xa0\x04\xa1\x00}\x02|\x00j\x00j\x05s\x1a|\x02d\x01k\x02r\x1ad\x02S\x00|\x00j\x00j\x06t\x07d\x03\x8d\x01}\x03d\x04|\x03_\x08|\x03\xa0\td\x05\xa1\x01\x01\x00i\x00|\x03_\ng\x00|\x03_\x0b|\x03\xa0\x0c|\x03\xa0\r\xa1\x00j\x0ej\x0fg\x01\xa1\x01\x01\x00t\x10\x83\x00\xa0\x11\xa1\x00\x01\x00|\x02d\x01k\x04oG|\x00j\x12j\x13j\x14\x0c\x00}\x04|\x00j\x00\xa0\x15\xa1\x00|\x00j\x00_\x16|\x00j\x00j\x05sU|\x04rzg\x00}\x05|\x03\xa0\x17|\x00j\x18\xa1\x01\xa0\x19t\x1a\xa1\x01D\x00]\x0c}\x06|\x05\xa0\x1bd\x06d\x07\x84\x00|\x06D\x00\x83\x01\xa1\x01\x01\x00q`|\x00j\x00\xa0\x1cd\x08|\x05f\x02\xa1\x01\x01\x00|\x05|\x00j\x00_\x1dn\x08|\x00j\x00\xa0\x1cd\x08|\x03f\x02\xa1\x01\x01\x00|\x00j\x00\xa0\x1e|\x01\xa1\x01\x01\x00d\x02S\x00)\taO\x01\x00\x00\n        If the update depends on results from other tables, munge the "where"\n        conditions to match the format required for (portable) SQL updates.\n\n        If multiple updates are required, pull out the id values to update at\n        this point so that they don\'t change as a result of the progressive\n        updates.\n        rv\x00\x00\x00N)\x01\xda\x05klassFTc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00s\x00\x00\x00s\x18\x00\x00\x00\x81\x00|\x00]\x07}\x01|\x01d\x00\x19\x00V\x00\x01\x00q\x02d\x01S\x00r-\x00\x00\x00r*\x00\x00\x00\xa9\x02r0\x00\x00\x00r\xbb\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r3\x00\x00\x00\xef\x05\x00\x00r\xe6\x00\x00\x00z2SQLUpdateCompiler.pre_sql_setup.<locals>.<genexpr>\xda\x06pk__in)\x1fr\x1e\x00\x00\x00r/\x00\x00\x00r\xec\x00\x00\x00r7\x00\x00\x00\xda\x13count_active_tables\xda\x0frelated_updatesr\x02\x00\x00\x00r\x13\x00\x00\x00r\x84\x00\x00\x00\xda\x0eclear_orderingr\x9d\x00\x00\x00r"\x00\x00\x00\xda\nadd_fieldsr\x96\x00\x00\x00rs\x00\x00\x00r\xba\x00\x00\x00r\xdf\x01\x00\x00rG\x00\x00\x00r\x1f\x00\x00\x00rq\x00\x00\x00\xda\x16update_can_self_select\xda\x0bwhere_classr=\x00\x00\x00r\xc3\x00\x00\x00r \x00\x00\x00r\x86\x01\x00\x00r\x0f\x00\x00\x00rP\x00\x00\x00\xda\nadd_filter\xda\x0brelated_idsr\x0b\x01\x00\x00)\x07r)\x00\x00\x00r\r\x01\x00\x00\xda\x05countr\x1e\x00\x00\x00Z\x0fmust_pre_selectZ\x06identsr~\x01\x00\x00r\xe2\x01\x00\x00r*\x00\x00\x00r+\x00\x00\x00rG\x00\x00\x00\xcd\x05\x00\x00s,\x00\x00\x00\x0c\t\n\x02\n\x01\x10\x01\x04\x01\x0e\x01\x06\x01\n\x01\x06\x01\x06\x01\x14\x01\n\x01\x14\x02\x0e\x04\x0c\x01\x04\x04\x16\x01\x16\x01\x10\x01\n\x01\x10\x03\x10\x01z\x1fSQLUpdateCompiler.pre_sql_setup)\x07r\x02\x01\x00\x00r\xa4\x01\x00\x00r\xa5\x01\x00\x00rH\x00\x00\x00r\x86\x01\x00\x00rG\x00\x00\x00\xda\r__classcell__r*\x00\x00\x00r*\x00\x00\x00r\xe2\x01\x00\x00r+\x00\x00\x00r\xd9\x01\x00\x00~\x05\x00\x00s\x08\x00\x00\x00\x08\x00\x08\x01\x0c9\x14\x15r\xd9\x01\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00@\x00\x00\x00r\xd4\x01\x00\x00)\x04\xda\x14SQLAggregateCompilerc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x86\x00\x00\x00g\x00g\x00\x02\x02}\x01}\x02|\x00j\x00j\x01\xa0\x02\xa1\x00D\x00]\x15}\x03|\x00j\x03|\x03t\x04d\x01\x8d\x02\\\x02}\x04}\x05|\x01\xa0\x05|\x04\xa1\x01\x01\x00|\x02\xa0\x06|\x05\xa1\x01\x01\x00q\x0bt\x07|\x00j\x00j\x01\x83\x01|\x00_\x08d\x02\xa0\t|\x01\xa1\x01}\x01t\n|\x02\x83\x01}\x02d\x03|\x01|\x00j\x00j\x0bf\x02\x16\x00}\x01|\x02|\x00j\x00j\x0c\x17\x00}\x02|\x01|\x02f\x02S\x00)\x04r\xd6\x01\x00\x00r}\x00\x00\x00r\xdc\x00\x00\x00r\xea\x00\x00\x00)\rr\x1e\x00\x00\x00r\x83\x00\x00\x00r\xdb\x01\x00\x00r&\x00\x00\x00r\xbe\x00\x00\x00rL\x00\x00\x00rP\x00\x00\x00r9\x00\x00\x00r:\x00\x00\x00r\xd3\x00\x00\x00r\n\x01\x00\x00r\xbf\x00\x00\x00r\x12\x01\x00\x00)\x06r)\x00\x00\x00r\\\x00\x00\x00r]\x00\x00\x00r\x87\x00\x00\x00Z\x07ann_sqlZ\nann_paramsr*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rH\x00\x00\x00\xf9\x05\x00\x00s\x16\x00\x00\x00\n\x05\x10\x01\x12\x01\n\x01\x0c\x01\x0e\x01\n\x01\x08\x01\x10\x02\x0c\x01\x08\x01z\x1bSQLAggregateCompiler.as_sqlNr\xd7\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00r\xf0\x01\x00\x00\xf8\x05\x00\x00r\xd8\x01\x00\x00r\xf0\x01\x00\x00c\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x08\x00\x00\x00#\x00\x00\x00sV\x00\x00\x00\x81\x00z$t\x00\x87\x01\x87\x02f\x02d\x01d\x02\x84\x08|\x01\x83\x02D\x00]\x12}\x04\x88\x00d\x03u\x00r\x14|\x04n\x08\x87\x00f\x01d\x04d\x05\x84\x08|\x04D\x00\x83\x01V\x00\x01\x00q\x0cW\x00\x88\x01\xa0\x01\xa1\x00\x01\x00d\x03S\x00\x88\x01\xa0\x01\xa1\x00\x01\x00w\x00)\x06z[\n    Yield blocks of rows from a cursor and ensure the cursor is closed when\n    done.\n    c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x13\x00\x00\x00s\n\x00\x00\x00\x88\x00\xa0\x00\x88\x01\xa1\x01S\x00r\xc6\x00\x00\x00)\x01\xda\tfetchmanyr*\x00\x00\x00)\x02r\x8f\x01\x00\x00\xda\x08itersizer*\x00\x00\x00r+\x00\x00\x00r=\x01\x00\x00\x12\x06\x00\x00s\x02\x00\x00\x00\n\x00z\x1dcursor_iter.<locals>.<lambda>Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s\x18\x00\x00\x00g\x00|\x00]\x08}\x01|\x01d\x00\x88\x00\x85\x02\x19\x00\x91\x02q\x02S\x00r\xc6\x00\x00\x00r*\x00\x00\x00r\xe4\x01\x00\x00)\x01r:\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00rk\x00\x00\x00\x13\x06\x00\x00s\x02\x00\x00\x00\x18\x00z\x1fcursor_iter.<locals>.<listcomp>)\x02r\x8d\x01\x00\x00r\x92\x01\x00\x00)\x05r\x8f\x01\x00\x00\xda\x08sentinelr:\x00\x00\x00r\xf2\x01\x00\x00r~\x01\x00\x00r*\x00\x00\x00)\x03r:\x00\x00\x00r\x8f\x01\x00\x00r\xf2\x01\x00\x00r+\x00\x00\x00r\x94\x01\x00\x00\x0c\x06\x00\x00s\x0c\x00\x00\x00\x02\x80\x02\x05\x18\x01"\x01\x02\xff\x16\x03r\x94\x01\x00\x00)2rg\x01\x00\x00ru\x01\x00\x00r%\x00\x00\x00r\x00\x01\x00\x00\xda\titertoolsr\x02\x00\x00\x00\xda\x16django.core.exceptionsr\x03\x00\x00\x00r\x04\x00\x00\x00\xda\x1adjango.db.models.constantsr\x05\x00\x00\x00\xda\x1cdjango.db.models.expressionsr\x06\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x1cdjango.db.models.query_utilsr\x0b\x00\x00\x00r\x0c\x00\x00\x00\xda\x1edjango.db.models.sql.constantsr\r\x00\x00\x00r\x0e\x00\x00\x00r\x0f\x00\x00\x00r\x10\x00\x00\x00r\x11\x00\x00\x00r\x12\x00\x00\x00\xda\x1adjango.db.models.sql.queryr\x13\x00\x00\x00r\x14\x00\x00\x00Z\x15django.db.transactionr\x15\x00\x00\x00\xda\x0fdjango.db.utilsr\x16\x00\x00\x00r\x17\x00\x00\x00\xda\x18django.utils.deprecationr\x18\x00\x00\x00r\x19\x00\x00\x00\xda\x15django.utils.hashabler\x1a\x00\x00\x00\xda\x14django.utils.inspectr\x1b\x00\x00\x00\xda\x06objectr\xbe\x00\x00\x00r\x1c\x00\x00\x00r\xa6\x01\x00\x00r\xd5\x01\x00\x00r\xd9\x01\x00\x00r\xf0\x01\x00\x00r\x94\x01\x00\x00r*\x00\x00\x00r*\x00\x00\x00r*\x00\x00\x00r+\x00\x00\x00\xda\x08<module>\x01\x00\x00\x00sB\x00\x00\x00\x08\x00\x08\x01\x08\x01\x08\x01\x0c\x01\x10\x02\x0c\x01\x1c\x01\x10\x01 \x01\x10\x03\x0c\x01\x10\x01\x10\x01\x0c\x03\x0c\x01\x06\x02\x0e\x03\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x10$\x00\x7f\x10:\x10\x10\x10z\x0c\x14'
+++ <frozen importlib._bootstrap_external> 980 get_code : 
+++ <frozen importlib._bootstrap_external> 981 get_code : 
+++ <frozen importlib._bootstrap_external> 979 get_code : 
+++ <frozen importlib._bootstrap_external> 983 get_code : 
+++ <frozen importlib._bootstrap_external> 984 get_code : 
+++ call _classify_pyc None
+++ <frozen importlib._bootstrap_external> 601 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 602 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 606 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 610 _classify_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 612 _classify_pyc : 
+++ <frozen importlib._bootstrap_external> 615 _classify_pyc : 
+++ return 0
+++ <frozen importlib._bootstrap_external> 985 get_code : 
+++ <frozen importlib._bootstrap_external> 986 get_code : 
+++ <frozen importlib._bootstrap_external> 987 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ <frozen importlib._bootstrap_external> 1001 get_code : 
+++ <frozen importlib._bootstrap_external> 1002 get_code : 
+++ <frozen importlib._bootstrap_external> 1003 get_code : 
+++ <frozen importlib._bootstrap_external> 1004 get_code : 
+++ <frozen importlib._bootstrap_external> 1005 get_code : 
+++ <frozen importlib._bootstrap_external> 1000 get_code : 
+++ call _validate_timestamp_pyc None
+++ <frozen importlib._bootstrap_external> 637 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 1646141005
+++ <frozen importlib._bootstrap_external> 641 _validate_timestamp_pyc : 
+++ <frozen importlib._bootstrap_external> 642 _validate_timestamp_pyc : 
+++ call _unpack_uint32 None
+++ <frozen importlib._bootstrap_external> 86 _unpack_uint32 : 
+++ <frozen importlib._bootstrap_external> 87 _unpack_uint32 : 
+++ return 71525
+++ return None
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1011 get_code : 
+++ <frozen importlib._bootstrap_external> 1010 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ <frozen importlib._bootstrap_external> 1013 get_code : 
+++ <frozen importlib._bootstrap_external> 1014 get_code : 
+++ <frozen importlib._bootstrap_external> 1012 get_code : 
+++ call _compile_bytecode None
+++ <frozen importlib._bootstrap_external> 672 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 673 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 674 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 675 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 676 _compile_bytecode : 
+++ <frozen importlib._bootstrap_external> 677 _compile_bytecode : 
+++ return <code object <module> at 0x13ea0b680, file "/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py", line 1>
+++ return <code object <module> at 0x13ea0b680, file "/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py", line 1>
+++ <frozen importlib._bootstrap_external> 880 exec_module : 
+++ <frozen importlib._bootstrap_external> 883 exec_module : 
+++ return None
+++ exception (<class 'django.core.exceptions.ImproperlyConfigured'>, ImproperlyConfigured('settings.DATABASES is improperly configured. Please supply the NAME value.'), <traceback object at 0x13e1a9e40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 226, in create
    new_person.save()
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 743, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 780, in save_base
    updated = self._save_table(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 873, in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 910, in _do_insert
    return manager._insert([self], fields=fields, return_id=update_pk,
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/query.py", line 1186, in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py", line 1375, in execute_sql
    with self.connection.cursor() as cursor:
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 256, in cursor
    return self._cursor()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 233, in _cursor
    self.ensure_connection()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 217, in ensure_connection
    self.connect()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 194, in connect
    conn_params = self.get_connection_params()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/sqlite3/base.py", line 168, in get_connection_params
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly configured. Please supply the NAME value.

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 24, in perform_create
    serializer.save()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "/Users/kaima/src/soir/apps/ownphotos/api/serializers.py", line 226, in create
    new_person.save()
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 743, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 780, in save_base
    updated = self._save_table(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 873, in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/base.py", line 910, in _do_insert
    return manager._insert([self], fields=fields, return_id=update_pk,
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/query.py", line 1186, in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/sql/compiler.py", line 1375, in execute_sql
    with self.connection.cursor() as cursor:
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 256, in cursor
    return self._cursor()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 233, in _cursor
    self.ensure_connection()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 217, in ensure_connection
    self.connect()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/base/base.py", line 194, in connect
    conn_params = self.get_connection_params()
  File "/Users/kaima/src/soir/deps/django22/django/db/backends/sqlite3/base.py", line 168, in get_connection_params
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly configured. Please supply the NAME value.

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/persons/<pk>/ <function PersonViewSet at 0x13e896830> ^^api/persons/(?P<pk>[^/.]+)/$ person-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 724 get_queryset : qs = Person.objects.filter(faces__photo__owner=self.request.user) \
+++ exception (<class 'django.core.exceptions.FieldDoesNotExist'>, FieldDoesNotExist("Person has no field named 'faces__photo__owner'"), <traceback object at 0x13eb5dd40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/django22/django/db/models/options.py", line 565, in get_field
    return self.fields_map[field_name]
KeyError: 'faces__photo__owner'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 724, in get_queryset
    qs = Person.objects.filter(faces__photo__owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 111, in __resolve_filter_to_expr
    f = self._meta.get_field(key)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/options.py", line 567, in get_field
    raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, field_name))
django.core.exceptions.FieldDoesNotExist: Person has no field named 'faces__photo__owner'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/django22/django/db/models/options.py", line 565, in get_field
    return self.fields_map[field_name]
KeyError: 'faces__photo__owner'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 724, in get_queryset
    qs = Person.objects.filter(faces__photo__owner=self.request.user) \
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 111, in __resolve_filter_to_expr
    f = self._meta.get_field(key)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/options.py", line 567, in get_field
    raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, field_name))
django.core.exceptions.FieldDoesNotExist: Person has no field named 'faces__photo__owner'

[DBG] Number of effectful paths discovered = 0

/api/photos/shared/tome/ <function SharedToMePhotoSuperSimpleListViewSet at 0x13e896950> ^^api/photos/shared/tome/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_public), not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(request_data_favorited), request_data_public, not(request_data_hidden), not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_hidden), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_hidden), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(request_data_hidden), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_hidden), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden, not(request_data_favorited)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), request_data_hidden, not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==('')), request_data_hidden}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==('')), request_data_public, request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), request_data_public, request_data_hidden}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_public, request_data_hidden}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_public, request_data_hidden}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_public, request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), request_data_public, request_data_hidden}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), request_data_favorited, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), not(request_data_public), not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), not(request_data_public), not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {request_data_favorited, not((request_data_image_hash)==('')), not(request_data_hidden)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_favorited, not((request_data_image_hash)==('')), request_data_public, not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), request_data_hidden, request_data_favorited, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, request_data_hidden, request_data_favorited, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Number of effectful paths discovered = 8
[DBG] Path 1 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_public), not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 2 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_hidden), not(request_data_favorited), request_data_public, not(request_data_hidden), not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1)))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 3 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_public), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(request_data_favorited)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 4 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 5 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_public), request_data_favorited, not(request_data_public), not((request_data_image_hash)==('')), not(request_data_hidden)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 6 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_favorited, not(request_data_hidden), request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_hidden)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 7 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_public), not(request_data_public), request_data_hidden, request_data_favorited}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 8 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/shared/tome/<pk>/ <function SharedToMePhotoSuperSimpleListViewSet at 0x13e896a70> ^^api/photos/shared/tome/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 378 get_queryset : return Photo.objects.filter(shared_to__id__exact=self.request.user.id) \
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'id'"), <traceback object at 0x13ec2d200>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 378, in get_queryset
    return Photo.objects.filter(shared_to__id__exact=self.request.user.id) \
AttributeError: 'FakeUser' object has no attribute 'id'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 378, in get_queryset
    return Photo.objects.filter(shared_to__id__exact=self.request.user.id) \
AttributeError: 'FakeUser' object has no attribute 'id'

[DBG] Number of effectful paths discovered = 0

/api/photos/shared/fromme/ <function SharedFromMePhotoSuperSimpleListViewSet2 at 0x13e896b90> ^^api/photos/shared/fromme/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Found a new bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), giving False
[DBG]  not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), giving False
[DBG]  not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))}
[DBG] Found a new bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), giving False
[DBG]  not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is False
[DBG]  not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is False
[DBG]  not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))) is True
[DBG]  getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is False
[DBG]  not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is True
[DBG]  getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), giving False
[DBG]  not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))))
[DBG]  {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is False
[DBG]  not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is True
[DBG]  getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))}
[DBG] Bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))) is True
[DBG]  getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is True
[DBG]  getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))
[DBG]  {getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), giving False
[DBG]  not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))
[DBG]  {not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), giving False
[DBG]  not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))))
[DBG]  {not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is True
[DBG]  getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is False
[DBG]  not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))}
[DBG] Bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))) is True
[DBG]  getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is True
[DBG]  getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))
[DBG]  {getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is True
[DBG]  getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), giving False
[DBG]  not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))))
[DBG]  {not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict(), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('user', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: user>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))
[DBG]  {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), forward_relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('password', <django.db.models.fields.CharField: password>), ('last_login', <django.db.models.fields.DateTimeField: last_login>), ('is_superuser', <django.db.models.fields.BooleanField: is_superuser>), ('username', <django.db.models.fields.CharField: username>), ('first_name', <django.db.models.fields.CharField: first_name>), ('last_name', <django.db.models.fields.CharField: last_name>), ('email', <django.db.models.fields.EmailField: email>), ('is_staff', <django.db.models.fields.BooleanField: is_staff>), ('is_active', <django.db.models.fields.BooleanField: is_active>), ('date_joined', <django.db.models.fields.DateTimeField: date_joined>), ('scan_directory', <django.db.models.fields.CharField: scan_directory>), ('avatar', <django.db.models.fields.files.ImageField: avatar>), ('nextcloud_server_address', <django.db.models.fields.CharField: nextcloud_server_address>), ('nextcloud_username', <django.db.models.fields.CharField: nextcloud_username>), ('nextcloud_app_password', <django_cryptography.fields.EncryptedCharField: nextcloud_app_password>), ('nextcloud_scan_directory', <django.db.models.fields.CharField: nextcloud_scan_directory>)]), relations=OrderedDict([('groups', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: groups>, related_model=<class 'django.contrib.auth.models.Group'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('user_permissions', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: user_permissions>, related_model=<class 'django.contrib.auth.models.Permission'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('logentry_set', RelationInfo(model_field=None, related_model=<class 'django.contrib.admin.models.LogEntry'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('photo_set', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('person', RelationInfo(model_field=None, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('longrunningjob_set', RelationInfo(model_field=None, related_model=<class 'api.models.LongRunningJob'>, to_many=True, to_field='id', has_through_model=False, reverse=True)), ('photo_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.Photo'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_date_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_auto_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_shared_to', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] Bool node getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))) is True
[DBG]  getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))
[DBG]  {getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))) is True
[DBG]  getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))
[DBG]  {getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Bool node getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))) is True
[DBG]  getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))
[DBG]  {getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'obj1_id': <Type.INT: 2>}
condition = {getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}
effect = [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]
[DBG] Number of effectful paths discovered = 8
[DBG] Path 1 = [{'obj1_id': <Type.INT: 2>}, {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 2 = [{'obj1_id': <Type.INT: 2>}, {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 3 = [{'obj1_id': <Type.INT: 2>}, {not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 4 = [{'obj1_id': <Type.INT: 2>}, {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 5 = [{'obj1_id': <Type.INT: 2>}, {not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 6 = [{'obj1_id': <Type.INT: 2>}, {not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), not(getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 7 = [{'obj1_id': <Type.INT: 2>}, {not(getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))))), getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
[DBG] Path 8 = [{'obj1_id': <Type.INT: 2>}, {getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), getf[api.Photo](public, setf[api.Photo](exif_timestamp, getf[api.Photo](exif_timestamp, setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))))), setf[api.Photo](hidden, getf[api.Photo](hidden, setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))), setf[api.Photo](favorited, getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))))))), getf[api.Photo](favorited, setf[api.Photo](image_hash, getf[api.Photo](image_hash, any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))')))), any[api.Photo](follow[forward](('api.Photo_shared_to__api.Photo__photo', 'singleton[api.Photo_shared_to](setf[api.Photo_shared_to](id, obj1_id, obj1))'))))), not(exists[api.Photo_shared_to](objtoref[api.Photo_shared_to](obj1)))}, [update[api.Photo_shared_to](singleton[api.Photo_shared_to](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/shared/fromme/<pk>/ <function SharedFromMePhotoSuperSimpleListViewSet2 at 0x13e896cb0> ^^api/photos/shared/fromme/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 426 get_queryset : ThroughModel = Photo.shared_to.through
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 428 get_queryset : user_photos = Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 429 get_queryset : owner=self.request.user.id).only('image_hash')
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'id'"), <traceback object at 0x13ec4a680>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 429, in get_queryset
    owner=self.request.user.id).only('image_hash')
AttributeError: 'FakeUser' object has no attribute 'id'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 429, in get_queryset
    owner=self.request.user.id).only('image_hash')
AttributeError: 'FakeUser' object has no attribute 'id'

[DBG] Number of effectful paths discovered = 0

/api/photos/notimestamp/list/ <function NoTimestampPhotoHashListViewSet at 0x13e896dd0> ^^api/photos/notimestamp/list/$ photo-list
for POST...{}
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 96 __init__ : if data is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 98 __init__ : 'serpy serializers do not support input validation')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ exception (<class 'RuntimeError'>, RuntimeError('serpy serializers do not support input validation'), <traceback object at 0x13ec4afc0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 17, in create
    serializer = self.get_serializer(data=request.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 110, in get_serializer
    return serializer_class(*args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/notimestamp/list/<pk>/ <function NoTimestampPhotoHashListViewSet at 0x13e896ef0> ^^api/photos/notimestamp/list/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 572 get_queryset : return Photo.objects.filter(exif_timestamp=None).filter(
+++ exception (<class 'AttributeError'>, AttributeError("'NoneType' object has no attribute 'expr'"), <traceback object at 0x13ec2f680>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 572, in get_queryset
    return Photo.objects.filter(exif_timestamp=None).filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 116, in __resolve_filter_to_expr
    result_expr = Filteq(self._label, key, value.expr, result_expr)
AttributeError: 'NoneType' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 572, in get_queryset
    return Photo.objects.filter(exif_timestamp=None).filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 116, in __resolve_filter_to_expr
    result_expr = Filteq(self._label, key, value.expr, result_expr)
AttributeError: 'NoneType' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/edit/ <function PhotoEditViewSet at 0x13e897010> ^^api/photos/edit/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited)}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
[WARN] Assume api.Photo.exif_timestamp default is __now
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_favorited)}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_favorited)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_favorited)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden)}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
[WARN] Assume api.Photo.exif_timestamp default is __now
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden), not(request_data_hidden)}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden), not(request_data_hidden)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden), not(request_data_hidden)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
[WARN] Assume api.Photo.exif_timestamp default is __now
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_hidden}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_favorited), not((request_data_image_hash)==('')), request_data_hidden}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
[WARN] Assume api.Photo.exif_timestamp default is __now
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Number of effectful paths discovered = 4
[DBG] Path 1 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 2 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 3 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), request_data_hidden}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 4 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_favorited': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not((request_data_image_hash)==('')), request_data_favorited, request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1)))}, [update[api.Photo](singleton[api.Photo](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/edit/<pk>/ <function PhotoEditViewSet at 0x13e897130> ^^api/photos/edit/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 227 get_queryset : return Photo.objects.filter(owner=self.request.user)
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ec4bb40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 227, in get_queryset
    return Photo.objects.filter(owner=self.request.user)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 227, in get_queryset
    return Photo.objects.filter(owner=self.request.user)
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/recentlyadded/ <function RecentlyAddedPhotoListViewSet at 0x13e897250> ^^api/photos/recentlyadded/$ photo-list
for POST...{}
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 96 __init__ : if data is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 98 __init__ : 'serpy serializers do not support input validation')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ exception (<class 'RuntimeError'>, RuntimeError('serpy serializers do not support input validation'), <traceback object at 0x13ec3b1c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 17, in create
    serializer = self.get_serializer(data=request.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 110, in get_serializer
    return serializer_class(*args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/recentlyadded/<pk>/ <function RecentlyAddedPhotoListViewSet at 0x13e897370> ^^api/photos/recentlyadded/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 362 get_queryset : queryset = Photo.objects.filter(owner=self.request.user).only(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ec214c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 362, in get_queryset
    queryset = Photo.objects.filter(owner=self.request.user).only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 362, in get_queryset
    queryset = Photo.objects.filter(owner=self.request.user).only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/simplelist/ <function PhotoSimpleListViewSet at 0x13e897490> ^^api/photos/simplelist/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1895, in to_internal_value
    file_object = super().to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1848, in to_internal_value
    file_name = data.name
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr name from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/simplelist/<pk>/ <function PhotoSimpleListViewSet at 0x13e8975b0> ^^api/photos/simplelist/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 277 get_queryset : return Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 278 get_queryset : owner=self.request.user).order_by('-exif_timestamp')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 277 get_queryset : return Photo.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ec20cc0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 277, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 277, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/list/ <function PhotoSuperSimpleListViewSet at 0x13e8976d0> ^^api/photos/list/$ photo-list
for POST...{}
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 96 __init__ : if data is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 98 __init__ : 'serpy serializers do not support input validation')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ exception (<class 'RuntimeError'>, RuntimeError('serpy serializers do not support input validation'), <traceback object at 0x13ec21740>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 17, in create
    serializer = self.get_serializer(data=request.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 110, in get_serializer
    return serializer_class(*args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/list/<pk>/ <function PhotoSuperSimpleListViewSet at 0x13e8977f0> ^^api/photos/list/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG]  exists[api.Photo](objtoref[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))
[DBG]  {exists[api.Photo](objtoref[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))}
[DBG] Found a new path with retval = <Response status_code=204, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'pk': <Type.INT: 2>}
condition = {exists[api.Photo](objtoref[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))}
effect = [delete[api.Photo](singleton[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'pk': <Type.INT: 2>}, {exists[api.Photo](objtoref[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))}, [delete[api.Photo](singleton[api.Photo](deref[api.Photo](orderby[api.Photo, exif_timestamp, desc](all[api.Photo]),arg_pk)))]]

/api/photos/favorites/ <function FavoritePhotoListViewset at 0x13e897910> ^^api/photos/favorites/$ photo-list
for POST...{}
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 96 __init__ : if data is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 98 __init__ : 'serpy serializers do not support input validation')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ exception (<class 'RuntimeError'>, RuntimeError('serpy serializers do not support input validation'), <traceback object at 0x13ec1b8c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 17, in create
    serializer = self.get_serializer(data=request.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 110, in get_serializer
    return serializer_class(*args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/favorites/<pk>/ <function FavoritePhotoListViewset at 0x13e897a30> ^^api/photos/favorites/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 463 get_queryset : return Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 464 get_queryset : Q(favorited=True) & Q(owner=self.request.user)).only(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 463 get_queryset : return Photo.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13ec2c580>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 463, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 463, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/hidden/ <function HiddenPhotoListViewset at 0x13e897b50> ^^api/photos/hidden/$ photo-list
for POST...{}
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 96 __init__ : if data is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 98 __init__ : 'serpy serializers do not support input validation')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py 97 __init__ : raise RuntimeError(
+++ exception (<class 'RuntimeError'>, RuntimeError('serpy serializers do not support input validation'), <traceback object at 0x13ec1b8c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 17, in create
    serializer = self.get_serializer(data=request.data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 110, in get_serializer
    return serializer_class(*args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/serpy/serializer.py", line 97, in __init__
    raise RuntimeError(
RuntimeError: serpy serializers do not support input validation

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/hidden/<pk>/ <function HiddenPhotoListViewset at 0x13e897c70> ^^api/photos/hidden/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 497 get_queryset : return Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 498 get_queryset : Q(hidden=True) & Q(owner=self.request.user)).only(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 497 get_queryset : return Photo.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13ec21b40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 497, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 497, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/searchlist/ <function PhotoSuperSimpleSearchListViewSet at 0x13e897d90> ^^api/photos/searchlist/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==('')), not(request_data_hidden)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==('')), not(request_data_public), not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_favorited), not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_public), not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_favorited), not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_public), not(request_data_favorited), not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_hidden)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), request_data_public, not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), request_data_hidden}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_public), request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited)}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, request_data_hidden, not(request_data_favorited), not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not(request_data_favorited), not(request_data_favorited), request_data_hidden, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, not(request_data_public), not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_public)}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_public)}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_hidden), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_public)}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), not(request_data_hidden), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_public)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), not(request_data_hidden), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_public)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, not(request_data_hidden)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited, request_data_public, not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not((request_data_image_hash)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {request_data_hidden, not(request_data_public), not((request_data_image_hash)==('')), request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_hidden}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_hidden}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_hidden}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), request_data_favorited, request_data_hidden}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), request_data_favorited, request_data_hidden}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_favorited, not((request_data_image_hash)==('')), request_data_hidden}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_favorited, request_data_public, not((request_data_image_hash)==('')), request_data_hidden}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_public, not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_public, not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_public, not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_public, not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Number of effectful paths discovered = 8
[DBG] Path 1 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_hidden), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_public), not(request_data_favorited), not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 2 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited), not(request_data_hidden), request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1)))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 3 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_favorited), not(request_data_favorited), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_public), not(request_data_public)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 4 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_hidden, not(request_data_favorited), request_data_public, not(request_data_favorited), not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 5 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_hidden), not(request_data_hidden), not(request_data_public), not((request_data_image_hash)==('')), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 6 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 7 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_public), request_data_favorited, request_data_hidden}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 8 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not((request_data_image_hash)==('')), request_data_hidden}, [update[api.Photo](singleton[api.Photo](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/searchlist/<pk>/ <function PhotoSuperSimpleSearchListViewSet at 0x13e897eb0> ^^api/photos/searchlist/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 303 get_queryset : return Photo.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 304 get_queryset : owner=self.request.user).order_by('-exif_timestamp')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 303 get_queryset : return Photo.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'expr'"), <traceback object at 0x13ebfe2c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 303, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 303, in get_queryset
    return Photo.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 140, in __resolve_filter_to_expr
    result_expr = FilteqRel(rel_name, components[1], value.expr, result_expr)
AttributeError: 'FakeUser' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/public/ <function PublicPhotoListViewset at 0x13e8ac040> ^^api/photos/public/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_favorited, giving False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_hidden)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_hidden)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public)}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public)}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public)}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not(request_data_public)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not(request_data_public)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited)}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(request_data_favorited)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not((request_data_image_hash)==('')), not(request_data_favorited)}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_favorited)}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited)}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public), not(request_data_favorited)}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public), not(request_data_favorited)}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not((request_data_image_hash)==('')), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public), not(request_data_favorited)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_public), not((request_data_image_hash)==('')), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited), not(request_data_public), not(request_data_favorited)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not(request_data_favorited), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_hidden, request_data_public, not(request_data_favorited), not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited), request_data_public}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is False
[DBG]  not(request_data_favorited)
[DBG]  {request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), request_data_public}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), request_data_public}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), request_data_public}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited), request_data_public}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_hidden, giving False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_hidden), request_data_favorited, not(request_data_public), not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_public), not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {not(request_data_hidden), request_data_favorited, not((request_data_image_hash)==('')), request_data_public}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1)))}
[DBG] Bool node request_data_hidden is False
[DBG]  not(request_data_hidden)
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_public, not((request_data_image_hash)==('')), not(request_data_hidden), request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden)}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not((request_data_image_hash)==('')), request_data_favorited}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not((request_data_image_hash)==('')), request_data_hidden, request_data_favorited}
[DBG] Found a new bool node request_data_public, giving False
[DBG]  not(request_data_public)
[DBG]  {not((request_data_image_hash)==('')), not(request_data_public), request_data_hidden, request_data_favorited}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is False
[DBG]  not(request_data_public)
[DBG]  {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_image_hash)==(''))
[DBG]  {not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_favorited, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_favorited, request_data_hidden, not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_favorited, request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not(exists[api.Photo](objtoref[api.Photo](obj1)))
[DBG]  {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}
!!! Unknown field type in insert: api.Photo.thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_tiny <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_small <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.square_thumbnail_big <class 'django.db.models.fields.files.ImageField'>
!!! Unknown field type in insert: api.Photo.image <class 'django.db.models.fields.files.ImageField'>
[WARN] Assume api.Photo.added_on default is __now
!!! Unknown field type in insert: api.Photo.exif_gps_lat <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_gps_lon <class 'django.db.models.fields.FloatField'>
!!! Unknown field type in insert: api.Photo.exif_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.geolocation_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.captions_json <class 'django.contrib.postgres.fields.jsonb.JSONField'>
!!! Unknown field type in insert: api.Photo.search_captions <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.search_location <class 'django.db.models.fields.TextField'>
!!! Unknown field type in insert: api.Photo.encoding <class 'django.db.models.fields.TextField'>
[DBG] Bool node request_data_favorited is True
[DBG]  request_data_favorited
[DBG]  {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_hidden is True
[DBG]  request_data_hidden
[DBG]  {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}
[DBG] Bool node request_data_public is True
[DBG]  request_data_public
[DBG]  {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}
[DBG] Found a new path with retval = <Response status_code=201, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}
condition = {request_data_public, request_data_hidden, request_data_favorited, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}
effect = [update[api.Photo](singleton[api.Photo](obj1))]
[DBG] Number of effectful paths discovered = 8
[DBG] Path 1 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_hidden), not((request_data_image_hash)==('')), not(request_data_hidden), not(request_data_favorited), not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_public), not(request_data_favorited), not(request_data_public)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 2 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_hidden), not(request_data_hidden), request_data_public, not((request_data_image_hash)==('')), not(request_data_favorited), not(request_data_favorited)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 3 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_public), not(request_data_public), not((request_data_image_hash)==('')), not(request_data_favorited), request_data_hidden, not(exists[api.Photo](objtoref[api.Photo](obj1))), not(request_data_favorited)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 4 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_hidden, not(request_data_favorited), not(request_data_favorited), request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 5 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_public), not(request_data_hidden), request_data_favorited, not(request_data_hidden), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 6 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(request_data_hidden), request_data_favorited, request_data_public, not(exists[api.Photo](objtoref[api.Photo](obj1))), not((request_data_image_hash)==('')), not(request_data_hidden)}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 7 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {request_data_favorited, not(request_data_public), request_data_hidden, not((request_data_image_hash)==('')), not(request_data_public), not(exists[api.Photo](objtoref[api.Photo](obj1)))}, [update[api.Photo](singleton[api.Photo](obj1))]]
[DBG] Path 8 = [{'request_data_image_hash': <Type.STR: 5>, 'request_data_favorited': <Type.BOOL: 1>, 'request_data_hidden': <Type.BOOL: 1>, 'request_data_exif_timestamp': <Type.INT: 2>, 'request_data_public': <Type.BOOL: 1>, '__now': <Type.INT: 2>}, {not(exists[api.Photo](objtoref[api.Photo](obj1))), request_data_favorited, request_data_public, request_data_hidden, not((request_data_image_hash)==(''))}, [update[api.Photo](singleton[api.Photo](obj1))]]
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/public/<pk>/ <function PublicPhotoListViewset at 0x13e8ac160> ^^api/photos/public/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 533 get_queryset : if 'username' in self.request.query_params.keys():
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 540 get_queryset : return Photo.objects.filter(public=True).only(
+++ exception (<class 'AttributeError'>, AttributeError("'bool' object has no attribute 'expr'"), <traceback object at 0x13df7c280>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 540, in get_queryset
    return Photo.objects.filter(public=True).only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 116, in __resolve_filter_to_expr
    result_expr = Filteq(self._label, key, value.expr, result_expr)
AttributeError: 'bool' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 540, in get_queryset
    return Photo.objects.filter(public=True).only(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 116, in __resolve_filter_to_expr
    result_expr = Filteq(self._label, key, value.expr, result_expr)
AttributeError: 'bool' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/photos/ <function PhotoViewSet at 0x13e8ac280> ^^api/photos/$ photo-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.CharField: image_hash>, fields=OrderedDict([('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict([('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.CharField: image_hash>), ('image_hash', <django.db.models.fields.CharField: image_hash>), ('image_path', <django.db.models.fields.CharField: image_path>), ('thumbnail', <django.db.models.fields.files.ImageField: thumbnail>), ('thumbnail_tiny', <django.db.models.fields.files.ImageField: thumbnail_tiny>), ('thumbnail_small', <django.db.models.fields.files.ImageField: thumbnail_small>), ('thumbnail_big', <django.db.models.fields.files.ImageField: thumbnail_big>), ('square_thumbnail', <django.db.models.fields.files.ImageField: square_thumbnail>), ('square_thumbnail_tiny', <django.db.models.fields.files.ImageField: square_thumbnail_tiny>), ('square_thumbnail_small', <django.db.models.fields.files.ImageField: square_thumbnail_small>), ('square_thumbnail_big', <django.db.models.fields.files.ImageField: square_thumbnail_big>), ('image', <django.db.models.fields.files.ImageField: image>), ('added_on', <django.db.models.fields.DateTimeField: added_on>), ('exif_gps_lat', <django.db.models.fields.FloatField: exif_gps_lat>), ('exif_gps_lon', <django.db.models.fields.FloatField: exif_gps_lon>), ('exif_timestamp', <django.db.models.fields.DateTimeField: exif_timestamp>), ('exif_json', <django.contrib.postgres.fields.jsonb.JSONField: exif_json>), ('geolocation_json', <django.contrib.postgres.fields.jsonb.JSONField: geolocation_json>), ('captions_json', <django.contrib.postgres.fields.jsonb.JSONField: captions_json>), ('search_captions', <django.db.models.fields.TextField: search_captions>), ('search_location', <django.db.models.fields.TextField: search_location>), ('favorited', <django.db.models.fields.BooleanField: favorited>), ('hidden', <django.db.models.fields.BooleanField: hidden>), ('public', <django.db.models.fields.BooleanField: public>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('owner', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: owner>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)), ('shared_to', RelationInfo(model_field=<django.db.models.fields.related.ManyToManyField: shared_to>, related_model=<class 'api.models.User'>, to_many=True, to_field=None, has_through_model=False, reverse=False)), ('faces', RelationInfo(model_field=None, related_model=<class 'api.models.Face'>, to_many=True, to_field='image_hash', has_through_model=False, reverse=True)), ('albumthing_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_thing_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumThing'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumplace_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_place_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumPlace'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumdate_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumDate'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumauto_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumAuto'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('albumuser_set', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True)), ('album_user_cover_photos', RelationInfo(model_field=None, related_model=<class 'api.models.AlbumUser'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))
[DBG]  not((request_data_search_captions)==(''))
[DBG]  {not((request_data_search_captions)==(''))}
[DBG]  not((request_data_search_location)==(''))
[DBG]  {not((request_data_search_captions)==('')), not((request_data_search_location)==(''))}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2098, in to_internal_value
    if self.binary or getattr(data, 'is_json_string', False):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr is_json_string from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photos/<pk>/ <function PhotoViewSet at 0x13e8ac3a0> ^^api/photos/(?P<pk>[^/.]+)/$ photo-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 205 get_queryset : if self.request.user.is_anonymous:
+++ exception (<class 'AttributeError'>, AttributeError("'FakeUser' object has no attribute 'is_anonymous'"), <traceback object at 0x13ec65500>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 205, in get_queryset
    if self.request.user.is_anonymous:
AttributeError: 'FakeUser' object has no attribute 'is_anonymous'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 205, in get_queryset
    if self.request.user.is_anonymous:
AttributeError: 'FakeUser' object has no attribute 'is_anonymous'

[DBG] Number of effectful paths discovered = 0

/api/faces/inferred/list/ <function FaceInferredListViewSet at 0x13e8ac4c0> ^^api/faces/inferred/list/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1895, in to_internal_value
    file_object = super().to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1848, in to_internal_value
    file_name = data.name
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr name from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/inferred/list/<pk>/ <function FaceInferredListViewSet at 0x13e8ac5e0> ^^api/faces/inferred/list/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 617 get_queryset : queryset = Face.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 618 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 619 get_queryset : person_label_is_inferred=True)).select_related(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 618 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 617 get_queryset : queryset = Face.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13ec65d00>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 617, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 617, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/faces/labeled/list/ <function FaceLabeledListViewSet at 0x13e8ac700> ^^api/faces/labeled/list/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1895, in to_internal_value
    file_object = super().to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1848, in to_internal_value
    file_name = data.name
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr name from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/labeled/list/<pk>/ <function FaceLabeledListViewSet at 0x13e8ac820> ^^api/faces/labeled/list/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 642 get_queryset : queryset = Face.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 643 get_queryset : Q(photo__owner=self.request.user),
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 644 get_queryset : Q(person_label_is_inferred=False)
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 646 get_queryset : Q(person__name='unknown')).select_related('person').order_by('id')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 644 get_queryset : Q(person_label_is_inferred=False)
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 642 get_queryset : queryset = Face.objects.filter(
+++ exception (<class 'NotImplementedError'>, NotImplementedError("get() get both args and kwargs (<Q: (AND: ('photo__owner', <Analyzer.management.commands.consistency.FakeUser object at 0x13ec7c0d0>))>, <Q: (OR: ('person_label_is_inferred', False), ('person__name', 'unknown'))>) {}"), <traceback object at 0x13ec86280>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 642, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 145, in __resolve_filter_to_expr
    raise NotImplementedError('get() get both args and kwargs {} {}'.format(str(args), str(kwargs)))
NotImplementedError: get() get both args and kwargs (<Q: (AND: ('photo__owner', <Analyzer.management.commands.consistency.FakeUser object at 0x13ec7c0d0>))>, <Q: (OR: ('person_label_is_inferred', False), ('person__name', 'unknown'))>) {}

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 642, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 145, in __resolve_filter_to_expr
    raise NotImplementedError('get() get both args and kwargs {} {}'.format(str(args), str(kwargs)))
NotImplementedError: get() get both args and kwargs (<Q: (AND: ('photo__owner', <Analyzer.management.commands.consistency.FakeUser object at 0x13ec7c0d0>))>, <Q: (OR: ('person_label_is_inferred', False), ('person__name', 'unknown'))>) {}

[DBG] Number of effectful paths discovered = 0

/api/faces/list/ <function FaceListViewSet at 0x13e8ac940> ^^api/faces/list/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1895, in to_internal_value
    file_object = super().to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 1848, in to_internal_value
    file_name = data.name
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr name from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/list/<pk>/ <function FaceListViewSet at 0x13e8aca60> ^^api/faces/list/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 594 get_queryset : queryset = Face.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 595 get_queryset : Q(photo__owner=self.request.user)).select_related(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 594 get_queryset : queryset = Face.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13eb5ff80>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 594, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 594, in get_queryset
    queryset = Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/faces/inferred/ <function FaceInferredViewSet at 0x13e8acb80> ^^api/faces/inferred/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_person_label_is_inferred, giving False
[DBG]  not(request_data_person_label_is_inferred)
[DBG]  {not(request_data_person_label_is_inferred)}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_person_label_is_inferred is True
[DBG]  request_data_person_label_is_inferred
[DBG]  {request_data_person_label_is_inferred}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/inferred/<pk>/ <function FaceInferredViewSet at 0x13e8acca0> ^^api/faces/inferred/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 681 get_queryset : return Face.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 682 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 683 get_queryset : person_label_is_inferred=True)).order_by('id')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 682 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 681 get_queryset : return Face.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13b8af1c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 681, in get_queryset
    return Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 681, in get_queryset
    return Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/faces/labeled/ <function FaceLabeledViewSet at 0x13e8acdc0> ^^api/faces/labeled/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_person_label_is_inferred, giving False
[DBG]  not(request_data_person_label_is_inferred)
[DBG]  {not(request_data_person_label_is_inferred)}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_person_label_is_inferred is True
[DBG]  request_data_person_label_is_inferred
[DBG]  {request_data_person_label_is_inferred}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/labeled/<pk>/ <function FaceLabeledViewSet at 0x13e8acee0> ^^api/faces/labeled/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
+++ call get_queryset None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 702 get_queryset : return Face.objects.filter(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 703 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 704 get_queryset : person_label_is_inferred=False)).order_by('id')
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 703 get_queryset : Q(photo__owner=self.request.user) & Q(
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 702 get_queryset : return Face.objects.filter(
+++ exception (<class 'AttributeError'>, AttributeError("'Q' object has no attribute 'expr'"), <traceback object at 0x13eb4e440>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 702, in get_queryset
    return Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 702, in get_queryset
    return Face.objects.filter(
  File "/Users/kaima/src/soir/deps/django22/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 320, in filter
    result_expr, is_object = self.__resolve_filter_to_expr(*args, **kwargs)
  File "/Users/kaima/src/soir/Analyzer/patch_django.py", line 105, in __resolve_filter_to_expr
    return Deref(self._label, self.translate(), pk.expr), True
AttributeError: 'Q' object has no attribute 'expr'

[DBG] Number of effectful paths discovered = 0

/api/faces/ <function FaceViewSet at 0x13e8ad000> ^^api/faces/$ face-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Found a new bool node request_data_person_label_is_inferred, giving False
[DBG]  not(request_data_person_label_is_inferred)
[DBG]  {not(request_data_person_label_is_inferred)}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), forward_relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('image', <django.db.models.fields.files.ImageField: image>), ('image_path', <django.db.models.fields.FilePathField: image_path>), ('person_label_is_inferred', <django.db.models.fields.NullBooleanField: person_label_is_inferred>), ('person_label_probability', <django.db.models.fields.FloatField: person_label_probability>), ('location_top', <django.db.models.fields.IntegerField: location_top>), ('location_bottom', <django.db.models.fields.IntegerField: location_bottom>), ('location_left', <django.db.models.fields.IntegerField: location_left>), ('location_right', <django.db.models.fields.IntegerField: location_right>), ('encoding', <django.db.models.fields.TextField: encoding>)]), relations=OrderedDict([('photo', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: photo>, related_model=<class 'api.models.Photo'>, to_many=False, to_field='image_hash', has_through_model=False, reverse=False)), ('person', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: person>, related_model=<class 'api.models.Person'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG] Bool node request_data_person_label_is_inferred is True
[DBG]  request_data_person_label_is_inferred
[DBG]  {request_data_person_label_is_inferred}
[DBG] Found a new path with retval = <Response status_code=400, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/faces/<pk>/ <function FaceViewSet at 0x13e8ad120> ^^api/faces/(?P<pk>[^/.]+)/$ face-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG]  exists[api.Face](objtoref[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))
[DBG]  {exists[api.Face](objtoref[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))}
[DBG] Found a new path with retval = <Response status_code=204, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'pk': <Type.INT: 2>}
condition = {exists[api.Face](objtoref[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))}
effect = [delete[api.Face](singleton[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'pk': <Type.INT: 2>}, {exists[api.Face](objtoref[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))}, [delete[api.Face](singleton[api.Face](deref[api.Face](orderby[api.Face, id, asc](all[api.Face]),arg_pk)))]]

/api/jobs/ <function LongRunningJobViewSet at 0x13e8ad240> ^^api/jobs/$ longrunningjob-list
for POST...{}
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), forward_relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not((request_data_job_id)==(''))
[DBG]  {not((request_data_job_id)==(''))}
[DBG] Found a new bool node request_data_finished, giving False
[DBG]  not(request_data_finished)
[DBG]  {not(request_data_finished), not((request_data_job_id)==(''))}
[DBG] Found a new bool node request_data_failed, giving False
[DBG]  not(request_data_failed)
[DBG]  {not(request_data_finished), not(request_data_failed), not((request_data_job_id)==(''))}
[DBG]  ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False))))
[DBG]  {not(request_data_finished), not(request_data_failed), not((request_data_job_id)==('')), ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False))))}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2098, in to_internal_value
    if self.binary or getattr(data, 'is_json_string', False):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr is_json_string from symbolic value for python type <class 'int'>

[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), forward_relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not((request_data_job_id)==(''))
[DBG]  {not((request_data_job_id)==(''))}
[DBG] Bool node request_data_finished is False
[DBG]  not(request_data_finished)
[DBG]  {not((request_data_job_id)==('')), not(request_data_finished)}
[DBG] Bool node request_data_failed is True
[DBG]  request_data_failed
[DBG]  {not((request_data_job_id)==('')), not(request_data_finished), request_data_failed}
[DBG]  ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False))))
[DBG]  {not((request_data_job_id)==('')), not(request_data_finished), ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False)))), request_data_failed}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2098, in to_internal_value
    if self.binary or getattr(data, 'is_json_string', False):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr is_json_string from symbolic value for python type <class 'int'>

[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), forward_relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not((request_data_job_id)==(''))
[DBG]  {not((request_data_job_id)==(''))}
[DBG] Bool node request_data_finished is True
[DBG]  request_data_finished
[DBG]  {request_data_finished, not((request_data_job_id)==(''))}
[DBG] Found a new bool node request_data_failed, giving False
[DBG]  not(request_data_failed)
[DBG]  {not(request_data_failed), request_data_finished, not((request_data_job_id)==(''))}
[DBG]  ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False))))
[DBG]  {not(request_data_failed), ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False)))), request_data_finished, not((request_data_job_id)==(''))}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2098, in to_internal_value
    if self.binary or getattr(data, 'is_json_string', False):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr is_json_string from symbolic value for python type <class 'int'>

[DBG] Continuing...
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False)
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), forward_relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([('pk', <django.db.models.fields.AutoField: id>), ('id', <django.db.models.fields.AutoField: id>), ('job_type', <django.db.models.fields.PositiveIntegerField: job_type>), ('finished', <django.db.models.fields.BooleanField: finished>), ('failed', <django.db.models.fields.BooleanField: failed>), ('job_id', <django.db.models.fields.CharField: job_id>), ('queued_at', <django.db.models.fields.DateTimeField: queued_at>), ('started_at', <django.db.models.fields.DateTimeField: started_at>), ('finished_at', <django.db.models.fields.DateTimeField: finished_at>), ('result', <django.contrib.postgres.fields.jsonb.JSONField: result>)]), relations=OrderedDict([('started_by', RelationInfo(model_field=<django.db.models.fields.related.ForeignKey: started_by>, related_model=<class 'api.models.User'>, to_many=False, to_field='id', has_through_model=False, reverse=False))]))
[DBG]  not((request_data_job_id)==(''))
[DBG]  {not((request_data_job_id)==(''))}
[DBG] Bool node request_data_finished is True
[DBG]  request_data_finished
[DBG]  {not((request_data_job_id)==('')), request_data_finished}
[DBG] Bool node request_data_failed is True
[DBG]  request_data_failed
[DBG]  {not((request_data_job_id)==('')), request_data_failed, request_data_finished}
[DBG]  ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False))))
[DBG]  {not((request_data_job_id)==('')), request_data_failed, ((request_data_job_type)==('4'))||(((request_data_job_type)==('3'))||(((request_data_job_type)==('2'))||(((request_data_job_type)==('1'))||(False)))), request_data_finished}
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 426, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 483, in to_internal_value
    validated_value = field.run_validation(primitive_value)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 568, in run_validation
    value = self.to_internal_value(data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/fields.py", line 2098, in to_internal_value
    if self.binary or getattr(data, 'is_json_string', False):
  File "/Users/kaima/src/soir/Analyzer/symbolic.py", line 294, in __getattr__
    raise NotImplementedError('Trying to get attr {} from symbolic value for python type {}'.format(attr, self.type))
NotImplementedError: Trying to get attr is_json_string from symbolic value for python type <class 'int'>

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/jobs/<pk>/ <function LongRunningJobViewSet at 0x13e8ad360> ^^api/jobs/(?P<pk>[^/.]+)/$ longrunningjob-detail
for POST...{'pk': <Sym: arg_pk>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'pk': <Sym: arg_pk>}
[DBG]  exists[api.LongRunningJob](objtoref[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))
[DBG]  {exists[api.LongRunningJob](objtoref[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))}
[DBG] Found a new path with retval = <Response status_code=204, "text/html; charset=utf-8">
[PATHPRINTER] 
argument = {'pk': <Type.INT: 2>}
condition = {exists[api.LongRunningJob](objtoref[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))}
effect = [delete[api.LongRunningJob](singleton[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))]
[DBG] Number of effectful paths discovered = 1
[DBG] Path 1 = [{'pk': <Type.INT: 2>}, {exists[api.LongRunningJob](objtoref[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))}, [delete[api.LongRunningJob](singleton[api.LongRunningJob](deref[api.LongRunningJob](orderby[api.LongRunningJob, started_at, desc](all[api.LongRunningJob]),arg_pk)))]]

/ <function APIRootView at 0x13e8ad480> ^^$ api-root
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/sitesettings <function SiteSettingsView at 0x13e8afa30> ^api/sitesettings None
for POST...{}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1273 get_permissions : if self.request.method == 'GET':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1276 get_permissions : self.permission_classes = (IsAdminUser, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1278 get_permissions : return super(SiteSettingsView, self).get_permissions()
+++ return [<rest_framework.permissions.IsAdminUser object at 0x13eb23490>]
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
+++ call get_permissions None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1273 get_permissions : if self.request.method == 'GET':
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1276 get_permissions : self.permission_classes = (IsAdminUser, )
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1278 get_permissions : return super(SiteSettingsView, self).get_permissions()
+++ return [<rest_framework.permissions.IsAdminUser object at 0x13ec77130>]
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0

/api/dirtree <function RootPathTreeView at 0x13e8afb50> ^api/dirtree None
for POST...{}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
+++ call authenticate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 31 authenticate : header = self.get_header(request)
+++ call get_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 54 get_header : header = request.META.get('HTTP_AUTHORIZATION')
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 56 get_header : if isinstance(header, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 60 get_header : return header
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 32 authenticate : if header is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/authentication.py 33 authenticate : return None
+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
AttributeError: can't set attribute 'user'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 333, in check_permissions
    self.permission_denied(
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 173, in permission_denied
    if request.authenticators and not request.successful_authenticator:
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 270, in successful_authenticator
    with wrap_attributeerrors():
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 78, in wrap_attributeerrors
    raise exc.with_traceback(info[2])
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 74, in wrap_attributeerrors
    yield
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 271, in successful_authenticator
    self._authenticate()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 390, in _authenticate
    self._not_authenticated()
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/request.py", line 401, in _not_authenticated
    self.user = api_settings.UNAUTHENTICATED_USER()
rest_framework.request.WrappedAttributeError: can't set attribute 'user'

[DBG] Number of effectful paths discovered = 0

/api/labelfaces <function SetFacePersonLabel at 0x13e8afc70> ^api/labelfaces None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1547 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13eb5fb00>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1547, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1547, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/deletefaces <function DeleteFaces at 0x13e8afd90> ^api/deletefaces None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1575 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13ec22640>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1575, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1575, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photosedit/favorite <function SetPhotosFavorite at 0x13e8afeb0> ^api/photosedit/favorite None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1481 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13ea62c40>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1481, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1481, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photosedit/hide <function SetPhotosHidden at 0x13e8e8040> ^api/photosedit/hide None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1514 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13eb6a340>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1514, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1514, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photosedit/makepublic <function SetPhotosPublic at 0x13e8e8160> ^api/photosedit/makepublic None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1447 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13ec0d8c0>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1447, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1447, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photosedit/share <function SetPhotosShared at 0x13e8e8280> ^api/photosedit/share None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1365 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13eb3cd80>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1365, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1365, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photosedit/generateim2txt <function GeneratePhotoCaption at 0x13e8e83a0> ^api/photosedit/generateim2txt None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1347 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13eb14d00>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1347, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1347, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/useralbum/share <function SetUserAlbumShared at 0x13e8e84c0> ^api/useralbum/share None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/api/views.py 1296 post : data = dict(request.data)
+++ exception (<class 'ValueError'>, ValueError('Symbolic request data cannot be iterated'), <traceback object at 0x13ebfb480>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1296, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/api/views.py", line 1296, in post
    data = dict(request.data)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py", line 881, in __iter__
    yield from self._mapping
  File "/Users/kaima/src/soir/Analyzer/patch_drf.py", line 16, in __iter__
    raise ValueError('Symbolic request data cannot be iterated')
ValueError: Symbolic request data cannot be iterated

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/facetolabel <function FaceToLabelView at 0x13e8e85e0> ^api/facetolabel None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/trainfaces <function TrainFaceView at 0x13e8e8700> ^api/trainfaces None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/clusterfaces <function ClusterFaceView at 0x13e8e8820> ^api/clusterfaces None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/socialgraph <function SocialGraphView at 0x13e8e8940> ^api/socialgraph None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/egograph <function EgoGraphView at 0x13e8e8a60> ^api/egograph None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/scanphotos <function ScanPhotosView at 0x13e8e8b80> ^api/scanphotos None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/autoalbumgen <function AutoAlbumGenerateView at 0x13e8e8ca0> ^api/autoalbumgen None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/autoalbumtitlegen <function RegenerateAutoAlbumTitles at 0x13e8e8dc0> ^api/autoalbumtitlegen None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/searchtermexamples <function SearchTermExamples at 0x13e8e8ee0> ^api/searchtermexamples None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/locationsunburst <function LocationSunburst at 0x13e8e9000> ^api/locationsunburst None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/locationtimeline <function LocationTimeline at 0x13e8e9120> ^api/locationtimeline None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/stats <function StatsView at 0x13e8e9240> ^api/stats None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/locclust <function LocationClustersView at 0x13e8e9360> ^api/locclust None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photocountrycounts <function PhotoCountryCountsView at 0x13e8e9480> ^api/photocountrycounts None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/photomonthcounts <function PhotoMonthCountsView at 0x13e8e95a0> ^api/photomonthcounts None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/wordcloud <function SearchTermWordCloudView at 0x13e8e96c0> ^api/wordcloud None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/similar <function SearchSimilarPhotosView at 0x13e8e97e0> ^api/similar None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/watcher/photo <function IsPhotosBeingAddedView at 0x13e8e9900> ^api/watcher/photo None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/watcher/autoalbum <function IsAutoAlbumsBeingProcessed at 0x13e8e9a20> ^api/watcher/autoalbum None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/auth/token/obtain/ <function TokenObtainPairView at 0x13e8e9b40> ^api/auth/token/obtain/$ None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 62 post : response = super(TokenObtainPairView, self).post(
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 63 post : request, *args, **kwargs)
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 62 post : response = super(TokenObtainPairView, self).post(
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 63 post : request, *args, **kwargs)
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 62 post : response = super(TokenObtainPairView, self).post(
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 63 post : request, *args, **kwargs)
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 62 post : response = super(TokenObtainPairView, self).post(
+++ call post None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 26 post : serializer = self.get_serializer(data=request.data)
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 27 __init__ : super(TokenObtainSerializer, self).__init__(*args, **kwargs)
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 29 __init__ : self.fields[self.username_field] = serializers.CharField()
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 30 __init__ : self.fields['password'] = PasswordField()
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 15 __init__ : kwargs.setdefault('style', {})
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 17 __init__ : kwargs['style']['input_type'] = 'password'
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 18 __init__ : kwargs['write_only'] = True
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 20 __init__ : super(PasswordField, self).__init__(*args, **kwargs)
+++ return None
+++ return None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 28 post : try:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 29 post : serializer.is_valid(raise_exception=True)
[DBG]  not((request_data_username)==(''))
[DBG]  {not((request_data_username)==(''))}
[DBG]  not((request_data_password)==(''))
[DBG]  {not((request_data_password)==('')), not((request_data_username)==(''))}
+++ call validate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 63 validate : data = super(TokenObtainPairSerializer, self).validate(attrs)
+++ call validate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 33 validate : self.user = authenticate(**{
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 34 validate : self.username_field: attrs[self.username_field],
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 35 validate : 'password': attrs['password'],
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 33 validate : self.user = authenticate(**{
+++ call <lambda> None
+++ <string> 1 <lambda> : 
+++ return FullArgSpec(args=['self', 'request', 'username', 'password'], varargs=None, varkw='kwargs', defaults=(None, None), kwonlyargs=[], kwonlydefaults=None, annotations={})
[DBG]  exists[api.User](objtoref[api.User](any[api.User](filter[api.User](username==request_data_username,all[api.User]))))
[DBG]  {exists[api.User](objtoref[api.User](any[api.User](filter[api.User](username==request_data_username,all[api.User])))), not((request_data_password)==('')), not((request_data_username)==(''))}
fuck, ATTR NOT RECOGNIZED BUT IT IS IN model_cls: check_password
+++ exception (<class 'TypeError'>, TypeError('Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given'), <traceback object at 0x13ec2f4c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 33, in validate
    self.user = authenticate(**{
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/__init__.py", line 73, in authenticate
    user = backend.authenticate(request, **credentials)
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/backends.py", line 26, in authenticate
    if user.check_password(password) and self.user_can_authenticate(user):
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

+++ return None
+++ exception (<class 'TypeError'>, TypeError('Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given'), <traceback object at 0x13ec2ec00>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 63, in validate
    data = super(TokenObtainPairSerializer, self).validate(attrs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 33, in validate
    self.user = authenticate(**{
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/__init__.py", line 73, in authenticate
    user = backend.authenticate(request, **credentials)
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/backends.py", line 26, in authenticate
    if user.check_password(password) and self.user_can_authenticate(user):
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

+++ return None
+++ exception (<class 'TypeError'>, TypeError('Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given'), <traceback object at 0x13ebf9740>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 63, in validate
    data = super(TokenObtainPairSerializer, self).validate(attrs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 33, in validate
    self.user = authenticate(**{
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/__init__.py", line 73, in authenticate
    user = backend.authenticate(request, **credentials)
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/backends.py", line 26, in authenticate
    if user.check_password(password) and self.user_can_authenticate(user):
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 30 post : except TokenError as e:
+++ return None
+++ exception (<class 'TypeError'>, TypeError('Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given'), <traceback object at 0x13e9fc540>)
Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py", line 62, in post
    response = super(TokenObtainPairView, self).post(
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 63, in validate
    data = super(TokenObtainPairSerializer, self).validate(attrs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 33, in validate
    self.user = authenticate(**{
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/__init__.py", line 73, in authenticate
    user = backend.authenticate(request, **credentials)
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/backends.py", line 26, in authenticate
    if user.check_password(password) and self.user_can_authenticate(user):
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

+++ return None
[DBG] This path raised an exception: Traceback (most recent call last):
  File "/Users/kaima/src/soir/Analyzer/analyzer.py", line 34, in one_path
    retval = self.runcall(self.func, *self.extra_args, **self.extra_kwargs)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bdb.py", line 640, in runcall
    res = func(*args, **kwds)
  File "/Users/kaima/src/soir/deps/django22/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/kaima/src/soir/deps/django22/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py", line 62, in post
    response = super(TokenObtainPairView, self).post(
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 63, in validate
    data = super(TokenObtainPairSerializer, self).validate(attrs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 33, in validate
    self.user = authenticate(**{
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/__init__.py", line 73, in authenticate
    user = backend.authenticate(request, **credentials)
  File "/Users/kaima/src/soir/deps/django22/django/contrib/auth/backends.py", line 26, in authenticate
    if user.check_password(password) and self.user_can_authenticate(user):
TypeError: Sym.__getattr__.<locals>.f() takes 0 positional arguments but 1 was given

[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/auth/token/refresh/ <function TokenRefreshView at 0x13e8e9c60> ^api/auth/token/refresh/$ None
for POST...{}
+++ call post None
+++ /Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py 75 post : response = super(TokenRefreshView, self).post(request, *args, **kwargs)
+++ call post None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 26 post : serializer = self.get_serializer(data=request.data)
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 28 post : try:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 29 post : serializer.is_valid(raise_exception=True)
[DBG]  not((request_data_refresh)==(''))
[DBG]  {not((request_data_refresh)==(''))}
+++ call validate None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py 92 validate : refresh = RefreshToken(attrs['refresh'])
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 33 __init__ : if self.token_type is None or self.lifetime is None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 36 __init__ : self.token = token
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 37 __init__ : self.current_time = aware_utcnow()
+++ call aware_utcnow None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/utils.py 20 aware_utcnow : return make_utc(datetime.utcnow())
+++ call make_utc None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/utils.py 13 make_utc : if settings.USE_TZ and is_naive(dt):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/utils.py 14 make_utc : return make_aware(dt, timezone=utc)
+++ call localize None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/pytz/__init__.py 222 localize : if dt.tzinfo is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/pytz/__init__.py 224 localize : return dt.replace(tzinfo=self)
+++ return 2022-12-14 13:15:09.295389+00:00
+++ return 2022-12-14 13:15:09.295389+00:00
+++ return 2022-12-14 13:15:09.295389+00:00
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 40 __init__ : if token is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 42 __init__ : from .state import token_backend
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 45 __init__ : try:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 46 __init__ : self.payload = token_backend.decode(token, verify=verify)
+++ call decode None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py 47 decode : try:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py 48 decode : return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
+++ call decode None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py 62 decode : if verify and not algorithms:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py 70 decode : payload, signing_input, header, signature = self._load(jwt)
+++ call _load None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py 156 _load : if isinstance(jwt, text_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py 159 _load : if not issubclass(type(jwt), binary_type):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py 160 _load : raise DecodeError("Invalid token type. Token must be a {0}".format(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py 161 _load : binary_type))
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py 160 _load : raise DecodeError("Invalid token type. Token must be a {0}".format(
+++ exception (<class 'jwt.exceptions.DecodeError'>, DecodeError("Invalid token type. Token must be a <class 'bytes'>"), <traceback object at 0x13eb3f600>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

+++ return None
+++ exception (<class 'jwt.exceptions.DecodeError'>, DecodeError("Invalid token type. Token must be a <class 'bytes'>"), <traceback object at 0x13ec51880>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

+++ return None
+++ exception (<class 'jwt.exceptions.DecodeError'>, DecodeError("Invalid token type. Token must be a <class 'bytes'>"), <traceback object at 0x13ec3a6c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py 49 decode : except InvalidTokenError:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py 50 decode : raise TokenBackendError(_('Token is invalid or expired'))
+++ exception (<class 'rest_framework_simplejwt.exceptions.TokenBackendError'>, TokenBackendError('Token is invalid or expired'), <traceback object at 0x13e943080>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

+++ return None
+++ exception (<class 'rest_framework_simplejwt.exceptions.TokenBackendError'>, TokenBackendError('Token is invalid or expired'), <traceback object at 0x13e943600>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 47 __init__ : except TokenBackendError:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py 48 __init__ : raise TokenError(_('Token is invalid or expired'))
+++ exception (<class 'rest_framework_simplejwt.exceptions.TokenError'>, TokenError('Token is invalid or expired'), <traceback object at 0x13e8fe200>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 48, in __init__
    raise TokenError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenError: Token is invalid or expired

+++ return None
+++ exception (<class 'rest_framework_simplejwt.exceptions.TokenError'>, TokenError('Token is invalid or expired'), <traceback object at 0x13ec226c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 92, in validate
    refresh = RefreshToken(attrs['refresh'])
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 48, in __init__
    raise TokenError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenError: Token is invalid or expired

+++ return None
+++ exception (<class 'rest_framework_simplejwt.exceptions.TokenError'>, TokenError('Token is invalid or expired'), <traceback object at 0x13eb3fc40>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 92, in validate
    refresh = RefreshToken(attrs['refresh'])
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 48, in __init__
    raise TokenError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenError: Token is invalid or expired

+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 30 post : except TokenError as e:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 31 post : raise InvalidToken(e.args[0])
+++ call __init__ None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 21 __init__ : detail_dict = {'detail': self.default_detail, 'code': self.default_code}
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 23 __init__ : if isinstance(detail, dict):
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 25 __init__ : elif detail is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 26 __init__ : detail_dict['detail'] = detail
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 28 __init__ : if code is not None:
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/exceptions.py 31 __init__ : super(DetailDictMixin, self).__init__(detail_dict)
+++ return None
+++ exception (<class 'rest_framework_simplejwt.exceptions.InvalidToken'>, InvalidToken('Token is invalid or expired'), <traceback object at 0x13ec0ce40>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 92, in validate
    refresh = RefreshToken(attrs['refresh'])
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 48, in __init__
    raise TokenError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 31, in post
    raise InvalidToken(e.args[0])
rest_framework_simplejwt.exceptions.InvalidToken: {'detail': ErrorDetail(string='Token is invalid or expired', code='token_not_valid'), 'code': ErrorDetail(string='token_not_valid', code='token_not_valid')}

+++ return None
+++ exception (<class 'rest_framework_simplejwt.exceptions.InvalidToken'>, InvalidToken('Token is invalid or expired'), <traceback object at 0x13ec194c0>)
Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 48, in decode
    return jwt.decode(token, self.verifying_key, algorithms=[self.algorithm], verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jwt.py", line 70, in decode
    payload, signing_input, header, signature = self._load(jwt)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/jwt/api_jws.py", line 160, in _load
    raise DecodeError("Invalid token type. Token must be a {0}".format(
jwt.exceptions.DecodeError: Invalid token type. Token must be a <class 'bytes'>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 46, in __init__
    self.payload = token_backend.decode(token, verify=verify)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/backends.py", line 50, in decode
    raise TokenBackendError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenBackendError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 29, in post
    serializer.is_valid(raise_exception=True)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 227, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "/Users/kaima/src/soir/deps/restframework/rest_framework/serializers.py", line 429, in run_validation
    value = self.validate(value)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/serializers.py", line 92, in validate
    refresh = RefreshToken(attrs['refresh'])
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/tokens.py", line 48, in __init__
    raise TokenError(_('Token is invalid or expired'))
rest_framework_simplejwt.exceptions.TokenError: Token is invalid or expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/kaima/src/soir/apps/ownphotos/ownphotos/urls.py", line 75, in post
    response = super(TokenRefreshView, self).post(request, *args, **kwargs)
  File "/Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py", line 31, in post
    raise InvalidToken(e.args[0])
rest_framework_simplejwt.exceptions.InvalidToken: {'detail': ErrorDetail(string='Token is invalid or expired', code='token_not_valid'), 'code': ErrorDetail(string='token_not_valid', code='token_not_valid')}

+++ return None
+++ call get_authenticate_header None
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 20 get_authenticate_header : return '{0} realm="{1}"'.format(
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 21 get_authenticate_header : AUTH_HEADER_TYPES[0],
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 22 get_authenticate_header : self.www_authenticate_realm,
+++ /Users/kaima/.virtualenvs/analyzer/lib/python3.10/site-packages/rest_framework_simplejwt/views.py 20 get_authenticate_header : return '{0} realm="{1}"'.format(
+++ return Bearer realm="api"
[DBG] Found a new path with retval = <Response status_code=401, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/media/<path>/(P<fname>.*) <function MediaAccessFullsizeOriginalView at 0x13e8e9d80> ^media/(?P<path>.*)/(?P<fname>.*) media
for POST...{'path': <Sym: arg_path>, 'fname': <Sym: arg_fname>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{'path': <Sym: arg_path>, 'fname': <Sym: arg_fname>}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/rqavailable/ <function QueueAvailabilityView at 0x13e8e9ea0> ^api/rqavailable/$ None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/rqjobstat/ <function RQJobStatView at 0x13e8e9fc0> ^api/rqjobstat/$ None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/rqjoblist/ <function ListAllRQJobsView at 0x13e8ea0e0> ^api/rqjoblist/$ None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/nextcloud/listdir <function ListDir at 0x13e8ea200> ^api/nextcloud/listdir None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0

/api/nextcloud/scanphotos <function ScanPhotosView at 0x13e8ea320> ^api/nextcloud/scanphotos None
for POST...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
for DELETE...{}
[DBG] Found a new path with retval = <Response status_code=405, "text/html; charset=utf-8">
[DBG] Number of effectful paths discovered = 0
* Verification started, timeout = 4000
check pair: DELETE__/api/albums/date/list/<pk>/ DELETE__/api/albums/date/list/<pk>/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/thing/list/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/place/list/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/list/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/list/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/shared/fromme/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/shared/fromme/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/date/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/date/
check pair: DELETE__/api/albums/date/list/<pk>/ DELETE__/api/albums/date/<pk>/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/thing/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/place/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/albums/user/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/list/<pk>/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/list/<pk>/ DELETE__/api/faces/<pk>/
check pair: DELETE__/api/albums/date/list/<pk>/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/thing/list/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/place/list/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/date/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/date/
check pair: POST__/api/albums/thing/list/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/thing/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/place/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/
check pair: POST__/api/albums/thing/list/ POST__/api/albums/user/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/list/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/list/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/thing/list/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/place/list/ POST__/api/albums/place/list/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/place/list/ POST__/api/albums/date/
check pair: POST__/api/albums/place/list/ POST__/api/albums/date/
check pair: POST__/api/albums/place/list/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/place/list/ POST__/api/albums/thing/
check pair: POST__/api/albums/place/list/ POST__/api/albums/place/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/
check pair: POST__/api/albums/place/list/ POST__/api/albums/user/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/list/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ POST__/api/photos/public/
check pair: POST__/api/albums/place/list/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/place/list/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/list/ POST__/api/albums/date/
check pair: POST__/api/albums/user/list/ POST__/api/albums/date/
check pair: POST__/api/albums/user/list/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/list/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/list/ POST__/api/albums/place/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/list/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/list/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/list/ POST__/api/albums/date/
check pair: POST__/api/albums/user/list/ POST__/api/albums/date/
check pair: POST__/api/albums/user/list/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/list/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/list/ POST__/api/albums/place/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/
check pair: POST__/api/albums/user/list/ POST__/api/albums/user/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/list/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ POST__/api/photos/public/
check pair: POST__/api/albums/user/list/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/list/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/place/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/place/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/place/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/shared/fromme/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/date/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/thing/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/place/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/albums/user/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ POST__/api/photos/public/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/shared/fromme/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/date/ POST__/api/albums/date/
check pair: POST__/api/albums/date/ POST__/api/albums/date/
check pair: POST__/api/albums/date/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/date/ POST__/api/albums/thing/
check pair: POST__/api/albums/date/ POST__/api/albums/place/
check pair: POST__/api/albums/date/ POST__/api/albums/user/
check pair: POST__/api/albums/date/ POST__/api/albums/user/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/date/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/date/ POST__/api/albums/date/
check pair: POST__/api/albums/date/ DELETE__/api/albums/date/<pk>/
check pair: POST__/api/albums/date/ POST__/api/albums/thing/
check pair: POST__/api/albums/date/ POST__/api/albums/place/
check pair: POST__/api/albums/date/ POST__/api/albums/user/
check pair: POST__/api/albums/date/ POST__/api/albums/user/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ POST__/api/photos/edit/
check pair: POST__/api/albums/date/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ POST__/api/photos/public/
check pair: POST__/api/albums/date/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/date/ DELETE__/api/jobs/<pk>/
check pair: DELETE__/api/albums/date/<pk>/ DELETE__/api/albums/date/<pk>/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/albums/thing/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/albums/place/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/albums/user/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/albums/user/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/tome/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/edit/
check pair: DELETE__/api/albums/date/<pk>/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/searchlist/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ POST__/api/photos/public/
check pair: DELETE__/api/albums/date/<pk>/ DELETE__/api/faces/<pk>/
check pair: DELETE__/api/albums/date/<pk>/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/thing/ POST__/api/albums/thing/
check pair: POST__/api/albums/thing/ POST__/api/albums/place/
check pair: POST__/api/albums/thing/ POST__/api/albums/user/
check pair: POST__/api/albums/thing/ POST__/api/albums/user/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/thing/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/ POST__/api/photos/edit/
check pair: POST__/api/albums/thing/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ POST__/api/photos/public/
check pair: POST__/api/albums/thing/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/thing/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/place/ POST__/api/albums/place/
check pair: POST__/api/albums/place/ POST__/api/albums/user/
check pair: POST__/api/albums/place/ POST__/api/albums/user/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/place/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/ POST__/api/photos/edit/
check pair: POST__/api/albums/place/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ POST__/api/photos/public/
check pair: POST__/api/albums/place/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/place/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/ POST__/api/albums/user/
check pair: POST__/api/albums/user/ POST__/api/albums/user/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/albums/user/ POST__/api/albums/user/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/tome/
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ POST__/api/photos/edit/
check pair: POST__/api/albums/user/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/searchlist/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ POST__/api/photos/public/
check pair: POST__/api/albums/user/ DELETE__/api/faces/<pk>/
check pair: POST__/api/albums/user/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/tome/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/edit/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ POST__/api/photos/public/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/shared/tome/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/shared/fromme/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/edit/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ POST__/api/photos/public/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/shared/fromme/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: 'api.Photo_shared_to'
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/edit/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/edit/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/edit/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/edit/ POST__/api/photos/edit/
check pair: POST__/api/photos/edit/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ POST__/api/photos/public/
check pair: POST__/api/photos/edit/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/edit/ DELETE__/api/jobs/<pk>/
check pair: DELETE__/api/photos/list/<pk>/ DELETE__/api/photos/list/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/searchlist/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ POST__/api/photos/public/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ DELETE__/api/faces/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: DELETE__/api/photos/list/<pk>/ DELETE__/api/jobs/<pk>/
  Cannot verify pair! due to exception: Sort mismatch
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/searchlist/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ POST__/api/photos/public/
check pair: POST__/api/photos/searchlist/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/searchlist/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: POST__/api/photos/public/ POST__/api/photos/public/
check pair: POST__/api/photos/public/ DELETE__/api/faces/<pk>/
check pair: POST__/api/photos/public/ DELETE__/api/jobs/<pk>/
check pair: DELETE__/api/faces/<pk>/ DELETE__/api/faces/<pk>/
check pair: DELETE__/api/faces/<pk>/ DELETE__/api/jobs/<pk>/
check pair: DELETE__/api/jobs/<pk>/ DELETE__/api/jobs/<pk>/
Total number of explored paths = 272
Total number of effectful paths = 55
Total time of Finding models and relations 3194
Total time of Collecting all paths 255839
Total time of Checking = 265263872
Total time   of C-checks = 126755928
Total number of C-checks = 1081
Total time   of S-checks = 138393009
Total number of S-checks = 1540
